;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_bank_bg
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_check_collision
	.import		_pal_fade_to
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.export		_animate_bread_data
	.export		_animate_bun_data
	.export		_animate_fruit_data
	.export		_animate_wine_data
	.export		_animate_implosion1_data
	.export		_animate_implosion2_data
	.export		_animate_implosion3_data
	.export		_animate_orb0_data
	.export		_animate_meter28_data
	.export		_animate_meter27_data
	.export		_animate_meter26_data
	.export		_animate_meter25_data
	.export		_animate_meter24_data
	.export		_animate_meter23_data
	.export		_animate_meter22_data
	.export		_animate_meter21_data
	.export		_animate_meter20_data
	.export		_animate_meter19_data
	.export		_animate_meter18_data
	.export		_animate_meter17_data
	.export		_animate_meter16_data
	.export		_animate_meter15_data
	.export		_animate_meter14_data
	.export		_animate_meter13_data
	.export		_animate_meter12_data
	.export		_animate_meter11_data
	.export		_animate_meter10_data
	.export		_animate_meter9_data
	.export		_animate_meter8_data
	.export		_animate_meter7_data
	.export		_animate_meter6_data
	.export		_animate_meter5_data
	.export		_animate_meter4_data
	.export		_animate_meter3_data
	.export		_animate_meter2_data
	.export		_animate_meter1_data
	.export		_animate_meter0_data
	.export		_animate_playerclimb1_data
	.export		_animate_playerclimb2_data
	.export		_animate_playerclimbshootleft_data
	.export		_animate_playerclimbshootright_data
	.export		_animate_recoilleft_data
	.export		_animate_recoilright_data
	.export		_animate_playerstandright_data
	.export		_animate_playerstandleft_data
	.export		_animate_playerstandshootleft_data
	.export		_animate_playerstandshootright_data
	.export		_animate_playerrun1left_data
	.export		_animate_playerrun2left_data
	.export		_animate_playerrun3left_data
	.export		_animate_playerrun1right_data
	.export		_animate_playerrun2right_data
	.export		_animate_playerrun3right_data
	.export		_animate_playerrunshoot1left_data
	.export		_animate_playerrunshoot2left_data
	.export		_animate_playerrunshoot3left_data
	.export		_animate_playerrunshoot1right_data
	.export		_animate_playerrunshoot2right_data
	.export		_animate_playerrunshoot3right_data
	.export		_animate_playerjumpleft_data
	.export		_animate_playerjumpleftshoot_data
	.export		_animate_playerjumpright_data
	.export		_animate_playerjumprightshoot_data
	.export		_animate_hootyowl1left_data
	.export		_animate_hootyowl2left_data
	.export		_animate_hootyowl3left_data
	.export		_animate_hootyowl4left_data
	.export		_animate_hootyowl5left_data
	.export		_animate_hootyowl1right_data
	.export		_animate_hootyowl2right_data
	.export		_animate_hootyowl3right_data
	.export		_animate_hootyowl4right_data
	.export		_animate_hootyowl5right_data
	.export		_animate_snail1left_data
	.export		_animate_snail2left_data
	.export		_animate_snail3left_data
	.export		_animate_snail1right_data
	.export		_animate_snail2right_data
	.export		_animate_snail3right_data
	.export		_animate_snake1left_data
	.export		_animate_snake2left_data
	.export		_animate_snake3left_data
	.export		_animate_snake4left_data
	.export		_animate_snake5left_data
	.export		_animate_snake6left_data
	.export		_animate_snake7left_data
	.export		_animate_snake8left_data
	.export		_animate_snake9left_data
	.export		_animate_snake10left_data
	.export		_animate_snake11left_data
	.export		_animate_snake12left_data
	.export		_animate_snake13left_data
	.export		_animate_snake14left_data
	.export		_animate_snake15left_data
	.export		_animate_snake16left_data
	.export		_animate_snake17left_data
	.export		_animate_snake18left_data
	.export		_animate_snake19left_data
	.export		_animate_snake20left_data
	.export		_animate_snake21left_data
	.export		_animate_snake22left_data
	.export		_animate_mole1_data
	.export		_animate_mole2_data
	.export		_animate_mole3_data
	.export		_animate_mole4_data
	.export		_animate_mole5_data
	.export		_animate_mole6_data
	.export		_animate_mole7_data
	.export		_animate_mole8_data
	.export		_animate_spidrer1_data
	.export		_animate_spider2_data
	.export		_animate_spider3_data
	.export		_animate_spiderweb_data
	.export		_animate_mousewalk1left_data
	.export		_animate_mousewalk2left_data
	.export		_animate_mousewalk3left_data
	.export		_animate_mousewalk1right_data
	.export		_animate_mousewalk2right_data
	.export		_animate_mousewalk3right_data
	.export		_animate_mousejumpleft_data
	.export		_animate_mousejumpright_data
	.export		_animate_bearstandleft_data
	.export		_animate_bearstandright_data
	.export		_animate_bearroarleft_data
	.export		_animate_bearroarright_data
	.export		_animate_beararms_data
	.export		_animate_beararmsright_data
	.export		_animate_bearwalk1eft_data
	.export		_animate_bearwalk2left_data
	.export		_animate_bearwalk3left_data
	.export		_animate_bearwalkright_data
	.export		_animate_bearwalk2right_data
	.export		_animate_bearwalk3right_data
	.export		_animate_bouldersmall_data
	.export		_animate_fisleft_data
	.export		_animate_fishright_data
	.export		_animate_boulderbig_data
	.export		_debug
	.export		_pad1
	.export		_pad1_new
	.export		_short_jump_count
	.export		_map_loaded
	.export		_collision
	.export		_player_in_air
	.export		_player_is_running
	.export		_player_on_ladder
	.export		_player_on_ladder_pose
	.export		_player_in_hitstun
	.export		_player_running
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_multi_jump
	.export		_temp5
	.export		_temp6
	.export		_tempint
	.export		_tempint2
	.export		_temp_playerlocation
	.export		_temp_cmap1
	.export		_temp_cmap2
	.export		_level
	.export		_offset
	.export		_level_up
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_direction_y
	.export		_sprite_frame_counter
	.export		_frame_counter
	.export		_address
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_index2
	.export		_room_to_load
	.export		_current_room
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_song
	.export		_game_mode
	.export		_pointer
	.export		_l_scroll_frames
	.export		_r_scroll_frames
	.export		_old_x
	.export		_old_y
	.export		_bright
	.export		_bright_count
	.export		_temp_x
	.export		_temp_y
	.export		_temp_room
	.export		_player_shooting
	.export		_death
	.export		_invul_frames
	.export		_projectile_cooldown
	.export		_projectile_count
	.export		_projectile_index
	.export		_projectiles_list
	.export		_projectiles_x
	.export		_projectiles_y
	.export		_sine_wave
	.export		_shuffle_array
	.export		_c_map
	.export		_c_map2
	.export		_Generic
	.export		_Generic2
	.export		_BoxGuy1
	.export		_max_rooms
	.export		_max_scroll
	.export		_palette_sp
	.export		_enemy_x
	.export		_enemy_y
	.export		_enemy_active
	.export		_enemy_health
	.export		_enemy_room
	.export		_enemy_actual_x
	.export		_enemy_type
	.export		_enemy_anim
	.export		_enemy_frames
	.export		_entity_x
	.export		_entity_y
	.export		_entity_active
	.export		_entity_room
	.export		_entity_actual_x
	.export		_entity_type
	.export		_entity_anim
	.export		_entity_frames
	.export		_palette_bg
	.export		_metatile
	.export		_metatile_colision_map
	.export		_leveltng_0
	.export		_leveltng_1
	.export		_leveltng_2
	.export		_leveltng_3
	.export		_leveltng_4
	.export		_leveltng_5
	.export		_leveltng_6
	.export		_leveltng_7
	.export		_leveltng_8
	.export		_leveltng_9
	.export		_leveltng_10
	.export		_leveltng2_0
	.export		_leveltng3_0
	.export		_leveltng3_1
	.export		_leveltng3_2
	.export		_leveltng3_3
	.export		_leveltng4_0
	.export		_leveltng5_0
	.export		_leveltng5_1
	.export		_leveltng5_2
	.export		_leveltng5_3
	.export		_leveltng5_4
	.export		_leveltng6_0
	.export		_leveltng7_0
	.export		_stage1_levels_list
	.export		_level_max_rooms
	.export		_level_offsets
	.export		_level_1_enemies
	.export		_level_2_enemies
	.export		_level_3_enemies
	.export		_level_4_enemies
	.export		_level_5_enemies
	.export		_level_6_enemies
	.export		_level_7_enemies
	.export		_Enemy_list
	.export		_level_1_entities
	.export		_level_2_entities
	.export		_level_3_entities
	.export		_level_4_entities
	.export		_level_5_entities
	.export		_level_6_entities
	.export		_level_7_entities
	.export		_entity_list
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision_sub
	.export		_draw_screen_R
	.export		_draw_screen_L
	.export		_new_cmap
	.export		_handle_scrolling
	.export		_projectile_movement
	.export		_check_spr_objects
	.export		_check_entity_objects
	.export		_sprite_collisions
	.export		_enemy_moves
	.export		_reset
	.export		_sprite_obj_init
	.export		_entity_obj_init
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_bg_coll_D2
	.export		_get_position
	.export		_bg_collision_fast
	.export		_bg_coll_ladder
	.export		_bg_coll_ladder_top_under_player
	.export		_draw_player_health_meter
	.export		_draw_player_sprites
	.export		_main

.segment	"DATA"

_direction:
	.byte	$01
_direction_y:
	.byte	$01
_room_to_load:
	.byte	$00
_current_room:
	.byte	$00
_projectiles_list:
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
_projectiles_x:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_projectiles_y:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_sine_wave:
	.byte	$05
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$08
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
_BoxGuy1:
	.word	$4000
	.word	$8400
	.res	5,$00

.segment	"RODATA"

_animate_bread_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$80
_animate_bun_data:
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$80
_animate_fruit_data:
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$80
_animate_wine_data:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1F
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$80
_animate_implosion1_data:
	.byte	$00
	.byte	$00
	.byte	$2E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$2F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$3E
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$3F
	.byte	$02
	.byte	$80
_animate_implosion2_data:
	.byte	$04
	.byte	$04
	.byte	$4E
	.byte	$02
	.byte	$80
_animate_implosion3_data:
	.byte	$04
	.byte	$05
	.byte	$4F
	.byte	$02
	.byte	$80
_animate_orb0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$80
_animate_meter28_data:
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter27_data:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter26_data:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter25_data:
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter24_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter23_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter22_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter21_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter20_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter19_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter18_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter17_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter16_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter15_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter14_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter13_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter12_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter11_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter10_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter9_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter8_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter7_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter6_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter5_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter4_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter3_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$51
	.byte	$02
	.byte	$80
_animate_meter2_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$52
	.byte	$02
	.byte	$80
_animate_meter1_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$53
	.byte	$02
	.byte	$80
_animate_meter0_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$54
	.byte	$02
	.byte	$80
_animate_playerclimb1_data:
	.byte	$00
	.byte	$F8
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$80
_animate_playerclimb2_data:
	.byte	$00
	.byte	$F8
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$80
_animate_playerclimbshootleft_data:
	.byte	$00
	.byte	$F8
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$01
	.byte	$F9
	.byte	$0A
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerclimbshootright_data:
	.byte	$00
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$06
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$07
	.byte	$F9
	.byte	$0A
	.byte	$42
	.byte	$80
_animate_recoilleft_data:
	.byte	$00
	.byte	$F8
	.byte	$29
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$2A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$39
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$49
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$3B
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$3B
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_recoilright_data:
	.byte	$08
	.byte	$F8
	.byte	$29
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$2A
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$39
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$49
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$4A
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$3B
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$3B
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerstandright_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerstandleft_data:
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerstandshootleft_data:
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerstandshootright_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerrun1left_data:
	.byte	$00
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerrun2left_data:
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerrun3left_data:
	.byte	$00
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$44
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerrun1right_data:
	.byte	$08
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$32
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$43
	.byte	$40
	.byte	$F8
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerrun2right_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$41
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerrun3right_data:
	.byte	$08
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$35
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$45
	.byte	$40
	.byte	$F8
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerrunshoot1left_data:
	.byte	$00
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$80
_animate_playerrunshoot2left_data:
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerrunshoot3left_data:
	.byte	$00
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$44
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$80
_animate_playerrunshoot1right_data:
	.byte	$08
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$19
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$43
	.byte	$40
	.byte	$F8
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$80
_animate_playerrunshoot2right_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$41
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerrunshoot3right_data:
	.byte	$08
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$19
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$35
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$45
	.byte	$40
	.byte	$F8
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$80
_animate_playerjumpleft_data:
	.byte	$00
	.byte	$F8
	.byte	$27
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$48
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$58
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerjumpleftshoot_data:
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$48
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$58
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerjumpright_data:
	.byte	$08
	.byte	$F8
	.byte	$27
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$28
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$37
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$47
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$48
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$58
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerjumprightshoot_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$28
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$47
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$48
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$58
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_hootyowl1left_data:
	.byte	$00
	.byte	$00
	.byte	$E7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$F7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$E9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$F9
	.byte	$02
	.byte	$80
_animate_hootyowl2left_data:
	.byte	$00
	.byte	$00
	.byte	$C7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$F7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$C9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$F9
	.byte	$02
	.byte	$80
_animate_hootyowl3left_data:
	.byte	$00
	.byte	$00
	.byte	$A7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$A9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$B9
	.byte	$02
	.byte	$80
_animate_hootyowl4left_data:
	.byte	$00
	.byte	$00
	.byte	$87
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$88
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$89
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$98
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$97
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$99
	.byte	$02
	.byte	$80
_animate_hootyowl5left_data:
	.byte	$00
	.byte	$08
	.byte	$87
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$88
	.byte	$82
	.byte	$10
	.byte	$08
	.byte	$89
	.byte	$82
	.byte	$08
	.byte	$00
	.byte	$98
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$82
	.byte	$10
	.byte	$00
	.byte	$99
	.byte	$82
	.byte	$80
_animate_hootyowl1right_data:
	.byte	$10
	.byte	$00
	.byte	$E7
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$F7
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$E9
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$F9
	.byte	$42
	.byte	$80
_animate_hootyowl2right_data:
	.byte	$10
	.byte	$00
	.byte	$C7
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$F7
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$C9
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$F9
	.byte	$42
	.byte	$80
_animate_hootyowl3right_data:
	.byte	$10
	.byte	$00
	.byte	$A7
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$B7
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$A9
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$B9
	.byte	$42
	.byte	$80
_animate_hootyowl4right_data:
	.byte	$10
	.byte	$00
	.byte	$87
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$88
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$98
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$97
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$99
	.byte	$42
	.byte	$80
_animate_hootyowl5right_data:
	.byte	$10
	.byte	$08
	.byte	$87
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$88
	.byte	$C2
	.byte	$00
	.byte	$08
	.byte	$89
	.byte	$C2
	.byte	$08
	.byte	$00
	.byte	$98
	.byte	$C2
	.byte	$10
	.byte	$00
	.byte	$97
	.byte	$C2
	.byte	$00
	.byte	$00
	.byte	$99
	.byte	$C2
	.byte	$80
_animate_snail1left_data:
	.byte	$00
	.byte	$00
	.byte	$ED
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$FD
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EF
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$FF
	.byte	$01
	.byte	$80
_animate_snail2left_data:
	.byte	$00
	.byte	$00
	.byte	$CD
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$DD
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EF
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$DF
	.byte	$01
	.byte	$80
_animate_snail3left_data:
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$BD
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EF
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$BF
	.byte	$01
	.byte	$80
_animate_snail1right_data:
	.byte	$10
	.byte	$00
	.byte	$ED
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$FD
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$EF
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$41
	.byte	$80
_animate_snail2right_data:
	.byte	$10
	.byte	$00
	.byte	$CD
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$DD
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$EF
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$DF
	.byte	$41
	.byte	$80
_animate_snail3right_data:
	.byte	$10
	.byte	$00
	.byte	$AD
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$BD
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$EF
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$BF
	.byte	$41
	.byte	$80
_animate_snake1left_data:
	.byte	$20
	.byte	$08
	.byte	$FA
	.byte	$C1
	.byte	$80
_animate_snake2left_data:
	.byte	$20
	.byte	$00
	.byte	$FA
	.byte	$C1
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$80
_animate_snake3left_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$80
_animate_snake4left_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$80
_animate_snake5left_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$FA
	.byte	$01
	.byte	$80
_animate_snake6left_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake7left_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$EC
	.byte	$C1
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake8left_data:
	.byte	$20
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$FA
	.byte	$C1
	.byte	$80
_animate_snake9left_data:
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$FA
	.byte	$C1
	.byte	$80
_animate_snake10left_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$80
_animate_snake11left_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$FB
	.byte	$01
	.byte	$80
_animate_snake12left_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$FC
	.byte	$01
	.byte	$80
_animate_snake13left_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$FB
	.byte	$01
	.byte	$80
_animate_snake14left_data:
	.byte	$10
	.byte	$08
	.byte	$EC
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$80
_animate_snake15left_data:
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$FA
	.byte	$01
	.byte	$80
_animate_snake16left_data:
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake17left_data:
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake18left_data:
	.byte	$00
	.byte	$08
	.byte	$EC
	.byte	$C1
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake19left_data:
	.byte	$00
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake20left_data:
	.byte	$F8
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake21left_data:
	.byte	$F0
	.byte	$00
	.byte	$EC
	.byte	$01
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake22left_data:
	.byte	$F0
	.byte	$08
	.byte	$EC
	.byte	$01
	.byte	$80
_animate_mole1_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6F
	.byte	$03
	.byte	$80
_animate_mole2_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6C
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6D
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5D
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$03
	.byte	$80
_animate_mole3_data:
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$6A
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6B
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5B
	.byte	$03
	.byte	$80
_animate_mole4_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6C
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6D
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5D
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$03
	.byte	$80
_animate_mole5_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$03
	.byte	$80
_animate_mole6_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$8C
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$8D
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7D
	.byte	$03
	.byte	$80
_animate_mole7_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$8E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$8F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7F
	.byte	$03
	.byte	$80
_animate_mole8_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$8A
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$8B
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7B
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$03
	.byte	$80
_animate_spidrer1_data:
	.byte	$00
	.byte	$00
	.byte	$BA
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$BA
	.byte	$43
	.byte	$80
_animate_spider2_data:
	.byte	$00
	.byte	$00
	.byte	$CA
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$CA
	.byte	$43
	.byte	$80
_animate_spider3_data:
	.byte	$00
	.byte	$00
	.byte	$DA
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$DA
	.byte	$43
	.byte	$80
_animate_spiderweb_data:
	.byte	$00
	.byte	$00
	.byte	$BB
	.byte	$02
	.byte	$80
_animate_mousewalk1left_data:
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$79
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$69
	.byte	$03
	.byte	$80
_animate_mousewalk2left_data:
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$75
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$65
	.byte	$03
	.byte	$80
_animate_mousewalk3left_data:
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$77
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$67
	.byte	$03
	.byte	$80
_animate_mousewalk1right_data:
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$43
	.byte	$00
	.byte	$F8
	.byte	$69
	.byte	$43
	.byte	$80
_animate_mousewalk2right_data:
	.byte	$08
	.byte	$00
	.byte	$74
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$43
	.byte	$00
	.byte	$F8
	.byte	$65
	.byte	$43
	.byte	$80
_animate_mousewalk3right_data:
	.byte	$08
	.byte	$00
	.byte	$76
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$43
	.byte	$00
	.byte	$F8
	.byte	$67
	.byte	$43
	.byte	$80
_animate_mousejumpleft_data:
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$69
	.byte	$03
	.byte	$80
_animate_mousejumpright_data:
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$43
	.byte	$00
	.byte	$F8
	.byte	$69
	.byte	$43
	.byte	$80
_animate_bearstandleft_data:
	.byte	$08
	.byte	$F0
	.byte	$B4
	.byte	$01
	.byte	$10
	.byte	$F0
	.byte	$B5
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$C4
	.byte	$01
	.byte	$10
	.byte	$F8
	.byte	$C5
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$D4
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$D5
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$E4
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$E5
	.byte	$01
	.byte	$0B
	.byte	$F2
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_bearstandright_data:
	.byte	$10
	.byte	$F0
	.byte	$B4
	.byte	$41
	.byte	$08
	.byte	$F0
	.byte	$B5
	.byte	$41
	.byte	$10
	.byte	$F8
	.byte	$C4
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$C5
	.byte	$41
	.byte	$10
	.byte	$00
	.byte	$D4
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$D5
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$E4
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$E5
	.byte	$41
	.byte	$0D
	.byte	$F2
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_bearroarleft_data:
	.byte	$08
	.byte	$F0
	.byte	$94
	.byte	$01
	.byte	$10
	.byte	$F0
	.byte	$B5
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$A4
	.byte	$01
	.byte	$10
	.byte	$F8
	.byte	$C5
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$D4
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$D5
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$E4
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$E5
	.byte	$01
	.byte	$0B
	.byte	$F2
	.byte	$0B
	.byte	$02
	.byte	$FF
	.byte	$F4
	.byte	$C3
	.byte	$01
	.byte	$80
_animate_bearroarright_data:
	.byte	$10
	.byte	$F0
	.byte	$94
	.byte	$41
	.byte	$08
	.byte	$F0
	.byte	$B5
	.byte	$41
	.byte	$10
	.byte	$F8
	.byte	$A4
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$C5
	.byte	$41
	.byte	$10
	.byte	$00
	.byte	$D4
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$D5
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$E4
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$E5
	.byte	$41
	.byte	$0D
	.byte	$F2
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$F4
	.byte	$C3
	.byte	$41
	.byte	$80
_animate_beararms_data:
	.byte	$08
	.byte	$F0
	.byte	$A0
	.byte	$01
	.byte	$10
	.byte	$F0
	.byte	$A1
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$B0
	.byte	$01
	.byte	$10
	.byte	$F8
	.byte	$B1
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$C0
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$C1
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$E4
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$E5
	.byte	$01
	.byte	$0B
	.byte	$F2
	.byte	$0B
	.byte	$02
	.byte	$18
	.byte	$F8
	.byte	$B2
	.byte	$01
	.byte	$18
	.byte	$F0
	.byte	$A2
	.byte	$01
	.byte	$80
_animate_beararmsright_data:
	.byte	$10
	.byte	$F0
	.byte	$A0
	.byte	$41
	.byte	$08
	.byte	$F0
	.byte	$A1
	.byte	$41
	.byte	$10
	.byte	$F8
	.byte	$B0
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$B1
	.byte	$41
	.byte	$10
	.byte	$00
	.byte	$C0
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$C1
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$E4
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$E5
	.byte	$41
	.byte	$0D
	.byte	$F2
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$F8
	.byte	$B2
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$A2
	.byte	$41
	.byte	$80
_animate_bearwalk1eft_data:
	.byte	$08
	.byte	$F0
	.byte	$D0
	.byte	$01
	.byte	$10
	.byte	$F0
	.byte	$D1
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$E0
	.byte	$01
	.byte	$10
	.byte	$F8
	.byte	$E1
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$F0
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$F1
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$F3
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$F2
	.byte	$01
	.byte	$18
	.byte	$08
	.byte	$D3
	.byte	$01
	.byte	$0B
	.byte	$F4
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_bearwalk2left_data:
	.byte	$08
	.byte	$F0
	.byte	$B4
	.byte	$01
	.byte	$10
	.byte	$F0
	.byte	$B5
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$C4
	.byte	$01
	.byte	$10
	.byte	$F8
	.byte	$C5
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$D2
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$D5
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$F4
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$F5
	.byte	$01
	.byte	$0B
	.byte	$F2
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_bearwalk3left_data:
	.byte	$08
	.byte	$F0
	.byte	$D0
	.byte	$01
	.byte	$10
	.byte	$F0
	.byte	$D1
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$E0
	.byte	$01
	.byte	$10
	.byte	$F8
	.byte	$E1
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$E2
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$E3
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$F2
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$F3
	.byte	$01
	.byte	$0B
	.byte	$F4
	.byte	$0B
	.byte	$02
	.byte	$18
	.byte	$08
	.byte	$D3
	.byte	$01
	.byte	$80
_animate_bearwalkright_data:
	.byte	$10
	.byte	$F0
	.byte	$D0
	.byte	$41
	.byte	$08
	.byte	$F0
	.byte	$D1
	.byte	$41
	.byte	$10
	.byte	$F8
	.byte	$E0
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$E1
	.byte	$41
	.byte	$10
	.byte	$00
	.byte	$F0
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$F1
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$F3
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$F2
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$D3
	.byte	$41
	.byte	$0D
	.byte	$F4
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_bearwalk2right_data:
	.byte	$10
	.byte	$F0
	.byte	$B4
	.byte	$41
	.byte	$08
	.byte	$F0
	.byte	$B5
	.byte	$41
	.byte	$10
	.byte	$F8
	.byte	$C4
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$C5
	.byte	$41
	.byte	$10
	.byte	$00
	.byte	$D2
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$D5
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$F4
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$F5
	.byte	$41
	.byte	$0D
	.byte	$F2
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_bearwalk3right_data:
	.byte	$10
	.byte	$F0
	.byte	$D0
	.byte	$41
	.byte	$08
	.byte	$F0
	.byte	$D1
	.byte	$41
	.byte	$10
	.byte	$F8
	.byte	$E0
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$E1
	.byte	$41
	.byte	$10
	.byte	$00
	.byte	$E2
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$E3
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$F2
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$F3
	.byte	$41
	.byte	$0D
	.byte	$F4
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$D3
	.byte	$41
	.byte	$80
_animate_bouldersmall_data:
	.byte	$00
	.byte	$00
	.byte	$C2
	.byte	$01
	.byte	$80
_animate_fisleft_data:
	.byte	$00
	.byte	$01
	.byte	$B3
	.byte	$03
	.byte	$80
_animate_fishright_data:
	.byte	$00
	.byte	$01
	.byte	$B3
	.byte	$43
	.byte	$80
_animate_boulderbig_data:
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$03
	.byte	$80
_shuffle_array:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0D
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$09
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0C
	.byte	$0E
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$07
	.byte	$09
	.byte	$0B
	.byte	$0D
	.byte	$0F
	.byte	$0F
	.byte	$0D
	.byte	$0B
	.byte	$09
	.byte	$07
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$0E
	.byte	$0C
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$00
_palette_sp:
	.byte	$21
	.byte	$17
	.byte	$24
	.byte	$36
	.byte	$21
	.byte	$06
	.byte	$28
	.byte	$37
	.byte	$21
	.byte	$0F
	.byte	$11
	.byte	$30
	.byte	$21
	.byte	$17
	.byte	$3D
	.byte	$38
_palette_bg:
	.byte	$21
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$21
	.byte	$30
	.byte	$29
	.byte	$06
	.byte	$21
	.byte	$0F
	.byte	$16
	.byte	$06
	.byte	$21
	.byte	$0F
	.byte	$19
	.byte	$29
_metatile:
	.byte	$7B
	.byte	$7C
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$7D
	.byte	$7E
	.byte	$8D
	.byte	$8E
	.byte	$00
	.byte	$9B
	.byte	$9C
	.byte	$AB
	.byte	$AC
	.byte	$00
	.byte	$9D
	.byte	$9E
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$BE
	.byte	$AF
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$BE
	.byte	$BE
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$8E
	.byte	$00
	.byte	$BE
	.byte	$BE
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$BE
	.byte	$B9
	.byte	$9B
	.byte	$9C
	.byte	$00
	.byte	$BE
	.byte	$BE
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$BE
	.byte	$BB
	.byte	$AB
	.byte	$AC
	.byte	$00
	.byte	$BE
	.byte	$AF
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$BE
	.byte	$BD
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$BE
	.byte	$BD
	.byte	$7D
	.byte	$7E
	.byte	$00
	.byte	$BA
	.byte	$BF
	.byte	$9B
	.byte	$9C
	.byte	$00
	.byte	$BA
	.byte	$B8
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$7B
	.byte	$AE
	.byte	$7C
	.byte	$7B
	.byte	$00
	.byte	$8B
	.byte	$8C
	.byte	$9B
	.byte	$9C
	.byte	$00
	.byte	$8D
	.byte	$8E
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$7B
	.byte	$7C
	.byte	$8B
	.byte	$01
	.byte	$00
	.byte	$AD
	.byte	$8E
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$AD
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$7E
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$9D
	.byte	$9E
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$AB
	.byte	$AC
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$7B
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$7B
	.byte	$AD
	.byte	$01
	.byte	$AE
	.byte	$00
	.byte	$7B
	.byte	$7C
	.byte	$01
	.byte	$7B
	.byte	$00
	.byte	$7A
	.byte	$7C
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$00
	.byte	$7B
	.byte	$6A
	.byte	$7C
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$76
	.byte	$85
	.byte	$86
	.byte	$02
	.byte	$65
	.byte	$66
	.byte	$85
	.byte	$86
	.byte	$02
	.byte	$75
	.byte	$76
	.byte	$95
	.byte	$96
	.byte	$02
	.byte	$74
	.byte	$76
	.byte	$84
	.byte	$86
	.byte	$02
	.byte	$75
	.byte	$77
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$64
	.byte	$66
	.byte	$84
	.byte	$86
	.byte	$02
	.byte	$65
	.byte	$67
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$74
	.byte	$76
	.byte	$94
	.byte	$96
	.byte	$02
	.byte	$75
	.byte	$77
	.byte	$95
	.byte	$97
	.byte	$02
	.byte	$BB
	.byte	$CD
	.byte	$CB
	.byte	$CB
	.byte	$02
	.byte	$CD
	.byte	$BC
	.byte	$DD
	.byte	$DC
	.byte	$02
	.byte	$CC
	.byte	$CD
	.byte	$DC
	.byte	$CB
	.byte	$02
	.byte	$CD
	.byte	$AF
	.byte	$DC
	.byte	$CB
	.byte	$02
	.byte	$CC
	.byte	$CF
	.byte	$CB
	.byte	$DF
	.byte	$02
	.byte	$CE
	.byte	$CD
	.byte	$DE
	.byte	$DC
	.byte	$02
	.byte	$CE
	.byte	$CD
	.byte	$DE
	.byte	$CB
	.byte	$02
	.byte	$65
	.byte	$66
	.byte	$95
	.byte	$96
	.byte	$02
	.byte	$64
	.byte	$66
	.byte	$94
	.byte	$96
	.byte	$02
	.byte	$65
	.byte	$67
	.byte	$95
	.byte	$97
	.byte	$02
	.byte	$EB
	.byte	$EB
	.byte	$FB
	.byte	$FC
	.byte	$03
	.byte	$EB
	.byte	$EA
	.byte	$FC
	.byte	$FB
	.byte	$03
	.byte	$FA
	.byte	$EB
	.byte	$FC
	.byte	$FC
	.byte	$03
	.byte	$EB
	.byte	$EC
	.byte	$FB
	.byte	$FC
	.byte	$03
	.byte	$98
	.byte	$99
	.byte	$A8
	.byte	$A9
	.byte	$03
	.byte	$9A
	.byte	$98
	.byte	$AA
	.byte	$A8
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$9A
	.byte	$98
	.byte	$03
	.byte	$7B
	.byte	$8B
	.byte	$AD
	.byte	$9B
	.byte	$00
	.byte	$8E
	.byte	$7B
	.byte	$9C
	.byte	$AE
	.byte	$00
	.byte	$8B
	.byte	$7C
	.byte	$9B
	.byte	$AD
	.byte	$00
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$02
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$02
	.byte	$CA
	.byte	$CA
	.byte	$DA
	.byte	$DA
	.byte	$00
	.byte	$38
	.byte	$36
	.byte	$36
	.byte	$36
	.byte	$02
	.byte	$37
	.byte	$36
	.byte	$36
	.byte	$36
	.byte	$02
	.byte	$37
	.byte	$39
	.byte	$36
	.byte	$37
	.byte	$02
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$30
	.byte	$02
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$02
	.byte	$31
	.byte	$31
	.byte	$31
	.byte	$31
	.byte	$02
	.byte	$32
	.byte	$30
	.byte	$34
	.byte	$31
	.byte	$02
	.byte	$30
	.byte	$33
	.byte	$30
	.byte	$35
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$1F
	.byte	$02
	.byte	$02
	.byte	$30
	.byte	$33
	.byte	$30
	.byte	$33
	.byte	$02
	.byte	$02
	.byte	$0D
	.byte	$0E
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$1F
	.byte	$02
	.byte	$02
	.byte	$2F
	.byte	$03
	.byte	$1B
	.byte	$0C
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$3F
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$2A
	.byte	$01
	.byte	$03
	.byte	$1A
	.byte	$01
	.byte	$01
	.byte	$2A
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$1A
	.byte	$03
	.byte	$F2
	.byte	$F2
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$F3
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$D4
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$82
	.byte	$03
	.byte	$01
	.byte	$2A
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$1A
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$AA
	.byte	$03
	.byte	$E8
	.byte	$03
	.byte	$A8
	.byte	$A9
	.byte	$68
	.byte	$FC
	.byte	$03
	.byte	$8A
	.byte	$03
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$E9
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$19
	.byte	$09
	.byte	$18
	.byte	$02
	.byte	$08
	.byte	$19
	.byte	$08
	.byte	$18
	.byte	$02
	.byte	$B1
	.byte	$B2
	.byte	$08
	.byte	$18
	.byte	$02
	.byte	$D4
	.byte	$B0
	.byte	$F3
	.byte	$C0
	.byte	$02
	.byte	$08
	.byte	$19
	.byte	$C1
	.byte	$C2
	.byte	$02
	.byte	$B3
	.byte	$F3
	.byte	$C3
	.byte	$D4
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$02
	.byte	$F1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$14
	.byte	$04
	.byte	$15
	.byte	$04
	.byte	$02
	.byte	$15
	.byte	$04
	.byte	$15
	.byte	$05
	.byte	$02
	.byte	$E5
	.byte	$E6
	.byte	$14
	.byte	$04
	.byte	$02
	.byte	$D4
	.byte	$E4
	.byte	$F3
	.byte	$F4
	.byte	$02
	.byte	$14
	.byte	$04
	.byte	$F5
	.byte	$F6
	.byte	$02
	.byte	$E7
	.byte	$F3
	.byte	$F7
	.byte	$D4
	.byte	$02
	.byte	$00
	.byte	$E2
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$E3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$17
	.byte	$06
	.byte	$17
	.byte	$02
	.byte	$07
	.byte	$16
	.byte	$07
	.byte	$17
	.byte	$02
	.byte	$06
	.byte	$17
	.byte	$07
	.byte	$17
	.byte	$02
	.byte	$E0
	.byte	$E1
	.byte	$06
	.byte	$16
	.byte	$02
	.byte	$D4
	.byte	$D0
	.byte	$F2
	.byte	$F2
	.byte	$02
	.byte	$D1
	.byte	$F3
	.byte	$F2
	.byte	$F2
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D2
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$AA
	.byte	$AA
	.byte	$03
	.byte	$04
	.byte	$E3
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$A9
	.byte	$A9
	.byte	$78
	.byte	$69
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$00
	.byte	$03
	.byte	$8A
	.byte	$00
	.byte	$8A
	.byte	$00
	.byte	$03
	.byte	$8A
	.byte	$00
	.byte	$79
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$F9
	.byte	$03
	.byte	$F9
	.byte	$E9
	.byte	$AA
	.byte	$AA
	.byte	$03
	.byte	$90
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$91
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$92
	.byte	$92
	.byte	$02
	.byte	$92
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$92
	.byte	$90
	.byte	$02
	.byte	$68
	.byte	$A8
	.byte	$01
	.byte	$69
	.byte	$03
	.byte	$68
	.byte	$69
	.byte	$EE
	.byte	$ED
	.byte	$03
	.byte	$68
	.byte	$68
	.byte	$EF
	.byte	$EE
	.byte	$03
	.byte	$69
	.byte	$68
	.byte	$EE
	.byte	$ED
	.byte	$03
	.byte	$68
	.byte	$EF
	.byte	$EF
	.byte	$FF
	.byte	$03
	.byte	$69
	.byte	$ED
	.byte	$EE
	.byte	$EE
	.byte	$03
	.byte	$A9
	.byte	$68
	.byte	$68
	.byte	$01
	.byte	$03
	.byte	$AA
	.byte	$A8
	.byte	$68
	.byte	$69
	.byte	$03
	.byte	$AA
	.byte	$A8
	.byte	$68
	.byte	$68
	.byte	$03
	.byte	$A9
	.byte	$8A
	.byte	$AA
	.byte	$8A
	.byte	$03
	.byte	$A8
	.byte	$8A
	.byte	$AA
	.byte	$8A
	.byte	$03
	.byte	$A8
	.byte	$A9
	.byte	$A9
	.byte	$AA
	.byte	$03
	.byte	$AA
	.byte	$A9
	.byte	$A8
	.byte	$A8
	.byte	$03
	.byte	$A9
	.byte	$AA
	.byte	$AA
	.byte	$A9
	.byte	$03
	.byte	$A8
	.byte	$A8
	.byte	$A9
	.byte	$A8
	.byte	$03
	.byte	$A9
	.byte	$A9
	.byte	$AA
	.byte	$A9
	.byte	$03
	.byte	$00
	.byte	$7A
	.byte	$88
	.byte	$AA
	.byte	$03
	.byte	$00
	.byte	$88
	.byte	$88
	.byte	$AA
	.byte	$03
	.byte	$6A
	.byte	$00
	.byte	$AA
	.byte	$6A
	.byte	$03
	.byte	$89
	.byte	$00
	.byte	$A8
	.byte	$89
	.byte	$03
	.byte	$A9
	.byte	$6A
	.byte	$AA
	.byte	$AA
	.byte	$03
	.byte	$01
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$FE
	.byte	$03
	.byte	$EF
	.byte	$EF
	.byte	$FE
	.byte	$FD
	.byte	$03
	.byte	$ED
	.byte	$EE
	.byte	$FE
	.byte	$FF
	.byte	$03
	.byte	$FD
	.byte	$FE
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$A9
	.byte	$79
	.byte	$FF
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$3F
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$2F
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$1F
	.byte	$1F
	.byte	$02
	.byte	$03
	.byte	$0F
	.byte	$02
	.byte	$01
	.byte	$0F
	.byte	$03
	.byte	$02
	.byte	$2F
	.byte	$11
	.byte	$11
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$11
	.byte	$11
	.byte	$03
	.byte	$03
	.byte	$61
	.byte	$60
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$62
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$61
	.byte	$03
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$72
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$03
	.byte	$FF
	.byte	$FD
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$3F
	.byte	$03
	.byte	$02
	.byte	$3F
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$0E
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$03
	.byte	$0E
	.byte	$01
	.byte	$3F
	.byte	$03
	.byte	$02
	.byte	$3F
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$62
	.byte	$60
	.byte	$03
	.byte	$02
	.byte	$61
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$72
	.byte	$01
	.byte	$61
	.byte	$03
	.byte	$03
	.byte	$62
	.byte	$01
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$B5
	.byte	$B6
	.byte	$C5
	.byte	$C6
	.byte	$02
	.byte	$01
	.byte	$B4
	.byte	$01
	.byte	$C4
	.byte	$02
	.byte	$B7
	.byte	$01
	.byte	$C7
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$A5
	.byte	$A6
	.byte	$02
	.byte	$D5
	.byte	$D6
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$9F
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$D8
	.byte	$D9
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$D9
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$C8
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$C9
	.byte	$01
	.byte	$D9
	.byte	$02
	.byte	$D8
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$D8
	.byte	$01
	.byte	$01
	.byte	$C9
	.byte	$02
	.byte	$01
	.byte	$D8
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$5E
	.byte	$6C
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6C
	.byte	$00
	.byte	$6B
	.byte	$5E
	.byte	$03
	.byte	$6D
	.byte	$00
	.byte	$6B
	.byte	$5E
	.byte	$6D
	.byte	$5D
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$03
	.byte	$6D
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$6D
	.byte	$20
	.byte	$6D
	.byte	$20
	.byte	$00
	.byte	$20
	.byte	$6E
	.byte	$6F
	.byte	$20
	.byte	$00
	.byte	$6D
	.byte	$14
	.byte	$03
	.byte	$6F
	.byte	$00
	.byte	$20
	.byte	$6E
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$6E
	.byte	$6E
	.byte	$20
	.byte	$6E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$6D
	.byte	$6D
	.byte	$A3
	.byte	$A7
	.byte	$00
	.byte	$5D
	.byte	$5B
	.byte	$20
	.byte	$9F
	.byte	$00
	.byte	$5C
	.byte	$80
	.byte	$9F
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5B
	.byte	$5C
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$9F
	.byte	$5F
	.byte	$00
	.byte	$5B
	.byte	$5C
	.byte	$9F
	.byte	$01
	.byte	$00
	.byte	$6B
	.byte	$6C
	.byte	$01
	.byte	$A3
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$A4
	.byte	$03
	.byte	$00
	.byte	$A3
	.byte	$A7
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$03
	.byte	$6D
	.byte	$A7
	.byte	$03
	.byte	$00
	.byte	$9F
	.byte	$9F
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$9F
	.byte	$01
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$6E
	.byte	$9F
	.byte	$6E
	.byte	$8F
	.byte	$00
	.byte	$8F
	.byte	$7F
	.byte	$6E
	.byte	$6E
	.byte	$00
	.byte	$9F
	.byte	$9F
	.byte	$8F
	.byte	$7F
	.byte	$00
	.byte	$7F
	.byte	$9F
	.byte	$6E
	.byte	$8F
	.byte	$00
_metatile_colision_map:
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_leveltng_0:
	.byte	$3C
	.byte	$1E
	.byte	$1F
	.byte	$50
	.byte	$95
	.byte	$94
	.byte	$91
	.byte	$8E
	.byte	$93
	.byte	$92
	.byte	$8E
	.byte	$92
	.byte	$92
	.byte	$94
	.byte	$92
	.byte	$91
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$1F
	.byte	$92
	.byte	$94
	.byte	$91
	.byte	$90
	.byte	$8F
	.byte	$91
	.byte	$92
	.byte	$8E
	.byte	$92
	.byte	$91
	.byte	$92
	.byte	$92
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$1E
	.byte	$92
	.byte	$90
	.byte	$91
	.byte	$94
	.byte	$8F
	.byte	$91
	.byte	$90
	.byte	$8E
	.byte	$92
	.byte	$91
	.byte	$94
	.byte	$92
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$90
	.byte	$92
	.byte	$90
	.byte	$92
	.byte	$8E
	.byte	$90
	.byte	$91
	.byte	$8F
	.byte	$94
	.byte	$91
	.byte	$90
	.byte	$94
	.byte	$02
	.byte	$03
	.byte	$15
	.byte	$1B
	.byte	$92
	.byte	$92
	.byte	$90
	.byte	$90
	.byte	$8E
	.byte	$92
	.byte	$93
	.byte	$8F
	.byte	$92
	.byte	$91
	.byte	$93
	.byte	$90
	.byte	$00
	.byte	$15
	.byte	$51
	.byte	$51
	.byte	$85
	.byte	$92
	.byte	$90
	.byte	$91
	.byte	$8B
	.byte	$88
	.byte	$8C
	.byte	$8E
	.byte	$87
	.byte	$85
	.byte	$87
	.byte	$8B
	.byte	$02
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$9B
	.byte	$8C
	.byte	$8B
	.byte	$88
	.byte	$9C
	.byte	$73
	.byte	$9A
	.byte	$8B
	.byte	$6A
	.byte	$9A
	.byte	$83
	.byte	$9C
	.byte	$10
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$50
	.byte	$AF
	.byte	$62
	.byte	$AF
	.byte	$76
	.byte	$71
	.byte	$77
	.byte	$AF
	.byte	$69
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$12
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$50
	.byte	$50
	.byte	$60
	.byte	$67
	.byte	$50
	.byte	$71
	.byte	$50
	.byte	$50
	.byte	$69
	.byte	$6F
	.byte	$50
	.byte	$50
	.byte	$01
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$58
	.byte	$59
	.byte	$61
	.byte	$58
	.byte	$59
	.byte	$72
	.byte	$58
	.byte	$59
	.byte	$68
	.byte	$58
	.byte	$59
	.byte	$58
	.byte	$03
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$74
	.byte	$55
	.byte	$75
	.byte	$51
	.byte	$69
	.byte	$52
	.byte	$51
	.byte	$74
	.byte	$00
	.byte	$0F
	.byte	$04
	.byte	$0C
	.byte	$54
	.byte	$51
	.byte	$55
	.byte	$54
	.byte	$56
	.byte	$55
	.byte	$51
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$53
	.byte	$51
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$0F
	.byte	$06
	.byte	$08
	.byte	$0C
	.byte	$54
	.byte	$51
	.byte	$51
	.byte	$54
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$00
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
_leveltng_1:
	.byte	$92
	.byte	$8F
	.byte	$92
	.byte	$90
	.byte	$92
	.byte	$92
	.byte	$92
	.byte	$8E
	.byte	$92
	.byte	$92
	.byte	$92
	.byte	$92
	.byte	$99
	.byte	$7B
	.byte	$50
	.byte	$50
	.byte	$94
	.byte	$8F
	.byte	$94
	.byte	$92
	.byte	$94
	.byte	$94
	.byte	$93
	.byte	$92
	.byte	$8E
	.byte	$92
	.byte	$90
	.byte	$90
	.byte	$92
	.byte	$7C
	.byte	$50
	.byte	$50
	.byte	$90
	.byte	$8F
	.byte	$94
	.byte	$92
	.byte	$93
	.byte	$90
	.byte	$94
	.byte	$92
	.byte	$8E
	.byte	$92
	.byte	$90
	.byte	$90
	.byte	$92
	.byte	$7C
	.byte	$50
	.byte	$50
	.byte	$91
	.byte	$8F
	.byte	$93
	.byte	$93
	.byte	$92
	.byte	$91
	.byte	$91
	.byte	$93
	.byte	$8F
	.byte	$92
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$7D
	.byte	$50
	.byte	$50
	.byte	$8F
	.byte	$94
	.byte	$8E
	.byte	$91
	.byte	$92
	.byte	$91
	.byte	$94
	.byte	$94
	.byte	$8E
	.byte	$8D
	.byte	$85
	.byte	$92
	.byte	$8E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$90
	.byte	$8C
	.byte	$8E
	.byte	$91
	.byte	$91
	.byte	$92
	.byte	$8D
	.byte	$8E
	.byte	$8B
	.byte	$62
	.byte	$9C
	.byte	$8B
	.byte	$9F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$8B
	.byte	$62
	.byte	$88
	.byte	$8B
	.byte	$8D
	.byte	$8B
	.byte	$71
	.byte	$87
	.byte	$9A
	.byte	$61
	.byte	$67
	.byte	$9E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$73
	.byte	$61
	.byte	$AF
	.byte	$AF
	.byte	$9B
	.byte	$6A
	.byte	$70
	.byte	$AF
	.byte	$DD
	.byte	$61
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$71
	.byte	$60
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$69
	.byte	$71
	.byte	$77
	.byte	$50
	.byte	$61
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$72
	.byte	$60
	.byte	$58
	.byte	$58
	.byte	$59
	.byte	$68
	.byte	$72
	.byte	$58
	.byte	$59
	.byte	$61
	.byte	$58
	.byte	$59
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$53
	.byte	$51
	.byte	$69
	.byte	$72
	.byte	$51
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$54
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$55
	.byte	$55
	.byte	$57
	.byte	$51
	.byte	$54
	.byte	$68
	.byte	$55
	.byte	$75
	.byte	$56
	.byte	$55
	.byte	$57
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$53
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$51
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$57
	.byte	$51
	.byte	$53
	.byte	$51
	.byte	$51
	.byte	$54
	.byte	$0F
	.byte	$04
	.byte	$0C
	.byte	$0B
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$04
	.byte	$08
	.byte	$06
	.byte	$07
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$0D
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
_leveltng_2:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DE
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$35
	.byte	$34
	.byte	$A4
	.byte	$A1
	.byte	$AB
	.byte	$A7
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$AB
	.byte	$A8
	.byte	$B0
	.byte	$35
	.byte	$36
	.byte	$25
	.byte	$21
	.byte	$51
	.byte	$A0
	.byte	$B0
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$AB
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$25
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$A3
	.byte	$A2
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$A7
	.byte	$35
	.byte	$36
	.byte	$23
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$A5
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$35
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$36
	.byte	$31
	.byte	$30
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
_leveltng_3:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$96
	.byte	$90
	.byte	$91
	.byte	$90
	.byte	$98
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$95
	.byte	$90
	.byte	$91
	.byte	$90
	.byte	$90
	.byte	$90
	.byte	$99
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$92
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$90
	.byte	$90
	.byte	$8F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$92
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$90
	.byte	$90
	.byte	$8E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$85
	.byte	$92
	.byte	$91
	.byte	$90
	.byte	$91
	.byte	$8E
	.byte	$8C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$85
	.byte	$8C
	.byte	$85
	.byte	$86
	.byte	$8C
	.byte	$9A
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AF
	.byte	$9C
	.byte	$6A
	.byte	$9A
	.byte	$AF
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$6E
	.byte	$69
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$68
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$33
	.byte	$36
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$69
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$21
	.byte	$26
	.byte	$35
	.byte	$36
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$A7
	.byte	$4D
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$53
	.byte	$4F
	.byte	$A7
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$B0
	.byte	$A7
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$4A
	.byte	$4B
	.byte	$5A
	.byte	$4B
	.byte	$5B
	.byte	$4C
	.byte	$B0
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$24
	.byte	$35
	.byte	$34
	.byte	$36
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$A8
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$30
	.byte	$30
	.byte	$32
	.byte	$35
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$36
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
_leveltng_4:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$40
	.byte	$41
	.byte	$41
	.byte	$41
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$95
	.byte	$99
	.byte	$7B
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$7A
	.byte	$8D
	.byte	$7D
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$43
	.byte	$51
	.byte	$45
	.byte	$51
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$A8
	.byte	$7E
	.byte	$78
	.byte	$5F
	.byte	$B0
	.byte	$AB
	.byte	$46
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$B0
	.byte	$A8
	.byte	$35
	.byte	$34
	.byte	$36
	.byte	$B0
	.byte	$A8
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$B1
	.byte	$A8
	.byte	$B0
	.byte	$35
	.byte	$36
	.byte	$25
	.byte	$21
	.byte	$26
	.byte	$35
	.byte	$36
	.byte	$AA
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$A8
	.byte	$A7
	.byte	$35
	.byte	$34
	.byte	$34
	.byte	$31
	.byte	$30
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$30
	.byte	$32
	.byte	$35
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$36
	.byte	$31
	.byte	$30
	.byte	$30
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
_leveltng_5:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DE
	.byte	$50
	.byte	$B2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$95
	.byte	$99
	.byte	$7B
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$41
	.byte	$41
	.byte	$42
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$90
	.byte	$92
	.byte	$7C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$B2
	.byte	$50
	.byte	$50
	.byte	$44
	.byte	$44
	.byte	$49
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$7A
	.byte	$8D
	.byte	$7D
	.byte	$50
	.byte	$40
	.byte	$41
	.byte	$41
	.byte	$41
	.byte	$42
	.byte	$50
	.byte	$44
	.byte	$51
	.byte	$49
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$6E
	.byte	$79
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$49
	.byte	$AC
	.byte	$44
	.byte	$45
	.byte	$47
	.byte	$51
	.byte	$4F
	.byte	$A8
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$A9
	.byte	$43
	.byte	$51
	.byte	$44
	.byte	$51
	.byte	$49
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$B0
	.byte	$46
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$49
	.byte	$51
	.byte	$34
	.byte	$36
	.byte	$B0
	.byte	$AB
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$A7
	.byte	$B0
	.byte	$A7
	.byte	$B1
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$30
	.byte	$32
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
_leveltng_6:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$B2
	.byte	$50
	.byte	$B2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$40
	.byte	$41
	.byte	$41
	.byte	$41
	.byte	$42
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$49
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$51
	.byte	$45
	.byte	$51
	.byte	$49
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$49
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$49
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$51
	.byte	$44
	.byte	$51
	.byte	$49
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$B0
	.byte	$A7
	.byte	$46
	.byte	$44
	.byte	$44
	.byte	$48
	.byte	$47
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$4F
	.byte	$7E
	.byte	$7F
	.byte	$5F
	.byte	$B0
	.byte	$A7
	.byte	$4F
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B1
	.byte	$A8
	.byte	$A8
	.byte	$B0
	.byte	$AB
	.byte	$B0
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$A7
	.byte	$AA
	.byte	$B1
	.byte	$A8
	.byte	$A8
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$36
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
_leveltng_7:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D6
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D0
	.byte	$D5
	.byte	$D4
	.byte	$D4
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$A7
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$AB
	.byte	$B0
	.byte	$0E
	.byte	$0D
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$A7
	.byte	$AA
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$0E
	.byte	$0D
	.byte	$00
	.byte	$3C
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$0E
	.byte	$09
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$12
	.byte	$02
	.byte	$01
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
_leveltng_8:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D3
	.byte	$50
	.byte	$50
	.byte	$C5
	.byte	$D1
	.byte	$D3
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D5
	.byte	$0E
	.byte	$50
	.byte	$D0
	.byte	$D4
	.byte	$D6
	.byte	$D7
	.byte	$EC
	.byte	$EB
	.byte	$EA
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$D0
	.byte	$D5
	.byte	$D4
	.byte	$D4
	.byte	$00
	.byte	$D2
	.byte	$D4
	.byte	$D4
	.byte	$D6
	.byte	$D9
	.byte	$DA
	.byte	$EE
	.byte	$E9
	.byte	$E9
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$D4
	.byte	$0F
	.byte	$0C
	.byte	$02
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D8
	.byte	$DA
	.byte	$EF
	.byte	$E9
	.byte	$E9
	.byte	$EB
	.byte	$EA
	.byte	$E7
	.byte	$3C
	.byte	$12
	.byte	$3A
	.byte	$0E
	.byte	$07
	.byte	$04
	.byte	$06
	.byte	$04
	.byte	$0C
	.byte	$D8
	.byte	$DB
	.byte	$EE
	.byte	$0E
	.byte	$0C
	.byte	$E9
	.byte	$EB
	.byte	$12
	.byte	$10
	.byte	$12
	.byte	$00
	.byte	$3C
	.byte	$12
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$00
	.byte	$01
	.byte	$AA
	.byte	$B0
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$12
	.byte	$11
	.byte	$B0
	.byte	$B0
	.byte	$A9
	.byte	$02
	.byte	$03
	.byte	$B0
	.byte	$A7
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$00
	.byte	$01
	.byte	$B0
	.byte	$B0
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$3C
	.byte	$10
	.byte	$03
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$02
	.byte	$03
	.byte	$A6
	.byte	$A6
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$38
	.byte	$38
	.byte	$51
	.byte	$51
	.byte	$38
	.byte	$38
	.byte	$37
_leveltng_9:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$E3
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0A
	.byte	$06
	.byte	$0C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D3
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$E4
	.byte	$E2
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$C5
	.byte	$D0
	.byte	$D4
	.byte	$D9
	.byte	$EC
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$0A
	.byte	$06
	.byte	$0D
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D4
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$DB
	.byte	$3B
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$E4
	.byte	$E5
	.byte	$E8
	.byte	$D6
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$D4
	.byte	$D8
	.byte	$12
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$3C
	.byte	$E9
	.byte	$EB
	.byte	$EB
	.byte	$E7
	.byte	$DF
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$D9
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$01
	.byte	$0E
	.byte	$0A
	.byte	$0C
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$A9
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$3A
	.byte	$10
	.byte	$3C
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$AB
	.byte	$B0
	.byte	$B0
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$3C
	.byte	$3C
	.byte	$03
	.byte	$00
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$B0
	.byte	$AB
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$10
	.byte	$3C
	.byte	$12
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$0E
	.byte	$09
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$10
	.byte	$00
_leveltng_10:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$02
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$02
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$3D
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$E1
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3E
	.byte	$0E
	.byte	$05
	.byte	$07
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$E9
	.byte	$EB
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$3C
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$12
	.byte	$02
	.byte	$3C
	.byte	$00
	.byte	$ED
	.byte	$EF
	.byte	$EB
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$02
	.byte	$DB
	.byte	$DB
	.byte	$EB
	.byte	$EB
	.byte	$E3
	.byte	$AC
	.byte	$3D
	.byte	$02
	.byte	$03
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$DA
	.byte	$DB
	.byte	$EF
	.byte	$EB
	.byte	$0F
	.byte	$07
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$A7
	.byte	$B0
	.byte	$AA
	.byte	$AB
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$25
	.byte	$B0
	.byte	$0F
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$12
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$25
	.byte	$20
	.byte	$B0
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$3C
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$25
	.byte	$20
	.byte	$20
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$3C
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$25
	.byte	$21
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$25
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
_leveltng2_0:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3E
	.byte	$3C
	.byte	$02
	.byte	$12
	.byte	$02
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$81
	.byte	$9B
	.byte	$17
	.byte	$C8
	.byte	$1A
	.byte	$3C
	.byte	$11
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$84
	.byte	$C8
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$02
	.byte	$03
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$0C
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$07
	.byte	$3E
	.byte	$0C
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$0E
	.byte	$06
	.byte	$0D
	.byte	$02
	.byte	$03
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$10
	.byte	$3D
	.byte	$14
	.byte	$02
	.byte	$3C
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$3C
	.byte	$02
	.byte	$3C
	.byte	$3A
	.byte	$3B
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9E
	.byte	$3D
	.byte	$9E
	.byte	$9B
	.byte	$82
	.byte	$84
	.byte	$51
	.byte	$C8
	.byte	$1A
	.byte	$3C
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9E
	.byte	$9B
	.byte	$51
	.byte	$C8
	.byte	$1A
	.byte	$02
	.byte	$03
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$9E
	.byte	$9B
	.byte	$51
	.byte	$10
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9E
	.byte	$10
	.byte	$03
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$3D
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$58
	.byte	$58
	.byte	$59
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$04
	.byte	$05
	.byte	$07
	.byte	$08
	.byte	$0C
	.byte	$50
	.byte	$50
	.byte	$3E
	.byte	$05
	.byte	$08
	.byte	$0D
	.byte	$02
	.byte	$03
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$10
	.byte	$02
	.byte	$3C
	.byte	$11
	.byte	$10
	.byte	$50
	.byte	$50
	.byte	$3E
	.byte	$03
	.byte	$3C
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9E
	.byte	$81
	.byte	$81
	.byte	$9E
	.byte	$83
	.byte	$50
	.byte	$50
	.byte	$3E
	.byte	$10
	.byte	$11
	.byte	$3C
	.byte	$02
	.byte	$03
_leveltng3_0:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$59
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$09
	.byte	$3E
	.byte	$07
	.byte	$04
	.byte	$06
	.byte	$04
	.byte	$07
	.byte	$09
	.byte	$0C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$3A
	.byte	$3D
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$01
	.byte	$3C
	.byte	$10
	.byte	$03
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9E
	.byte	$3D
	.byte	$10
	.byte	$3C
	.byte	$3C
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$01
_leveltng3_1:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$58
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$0D
	.byte	$50
	.byte	$50
	.byte	$0F
	.byte	$0C
	.byte	$50
	.byte	$0F
	.byte	$06
	.byte	$09
	.byte	$06
	.byte	$05
	.byte	$05
	.byte	$0C
	.byte	$50
	.byte	$50
	.byte	$11
	.byte	$10
	.byte	$50
	.byte	$50
	.byte	$3C
	.byte	$12
	.byte	$50
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$3C
	.byte	$50
	.byte	$50
	.byte	$83
	.byte	$9E
	.byte	$50
	.byte	$50
	.byte	$81
	.byte	$AF
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$02
	.byte	$03
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
_leveltng3_2:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$95
	.byte	$99
	.byte	$7B
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$7A
	.byte	$8D
	.byte	$7D
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$50
	.byte	$50
	.byte	$58
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$11
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$0C
	.byte	$10
	.byte	$3C
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AF
	.byte	$84
	.byte	$51
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$05
	.byte	$08
	.byte	$0C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AF
	.byte	$03
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$3C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$11
	.byte	$02
	.byte	$10
	.byte	$12
	.byte	$50
	.byte	$59
	.byte	$58
	.byte	$59
	.byte	$01
	.byte	$10
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$81
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$C7
	.byte	$0E
	.byte	$05
	.byte	$0C
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$3F
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
_leveltng3_3:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$C7
	.byte	$C7
	.byte	$C7
	.byte	$0F
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$08
	.byte	$0C
	.byte	$58
	.byte	$59
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$3A
	.byte	$3B
	.byte	$0E
	.byte	$08
	.byte	$3E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
_leveltng4_0:
	.byte	$10
	.byte	$3C
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3D
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$3D
	.byte	$C8
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$12
	.byte	$3C
	.byte	$12
	.byte	$11
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$3D
	.byte	$CE
	.byte	$C8
	.byte	$0E
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$16
	.byte	$15
	.byte	$51
	.byte	$51
	.byte	$CB
	.byte	$1B
	.byte	$02
	.byte	$13
	.byte	$3D
	.byte	$51
	.byte	$51
	.byte	$10
	.byte	$3C
	.byte	$02
	.byte	$03
	.byte	$15
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$11
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$10
	.byte	$12
	.byte	$02
	.byte	$3C
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$0E
	.byte	$0C
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$10
	.byte	$3C
	.byte	$01
	.byte	$51
	.byte	$3E
	.byte	$0E
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0D
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$03
	.byte	$51
	.byte	$3D
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$3C
	.byte	$01
	.byte	$3C
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$14
	.byte	$51
	.byte	$3D
	.byte	$51
	.byte	$51
	.byte	$19
	.byte	$16
	.byte	$17
	.byte	$11
	.byte	$10
	.byte	$12
	.byte	$11
	.byte	$01
	.byte	$17
	.byte	$19
	.byte	$03
	.byte	$15
	.byte	$51
	.byte	$3D
	.byte	$51
	.byte	$C9
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$1A
	.byte	$14
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$10
	.byte	$CF
	.byte	$51
	.byte	$3D
	.byte	$51
	.byte	$CC
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$3C
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$CB
	.byte	$51
	.byte	$51
_leveltng5_0:
	.byte	$3C
	.byte	$CE
	.byte	$51
	.byte	$3D
	.byte	$CB
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$CB
	.byte	$C9
	.byte	$CA
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$12
	.byte	$10
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$19
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$CA
	.byte	$51
	.byte	$3D
	.byte	$51
	.byte	$C9
	.byte	$CE
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$16
	.byte	$10
	.byte	$10
	.byte	$3A
	.byte	$02
	.byte	$0F
	.byte	$0D
	.byte	$3D
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CB
	.byte	$C9
	.byte	$CE
	.byte	$19
	.byte	$18
	.byte	$10
	.byte	$12
	.byte	$10
	.byte	$3C
	.byte	$3D
	.byte	$51
	.byte	$CE
	.byte	$CA
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$3D
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$CD
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$0E
	.byte	$0B
	.byte	$06
	.byte	$05
	.byte	$0D
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$51
	.byte	$C9
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$CC
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$C9
	.byte	$CA
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$CA
	.byte	$26
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$00
	.byte	$12
	.byte	$01
	.byte	$11
	.byte	$CF
	.byte	$20
	.byte	$26
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$10
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$10
	.byte	$03
	.byte	$3C
	.byte	$51
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$10
	.byte	$3C
	.byte	$01
	.byte	$51
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$0E
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$21
	.byte	$26
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
_leveltng5_1:
	.byte	$10
	.byte	$11
	.byte	$1E
	.byte	$1F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3B
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$1F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$1E
	.byte	$1F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$C5
	.byte	$D1
	.byte	$D3
	.byte	$E1
	.byte	$CE
	.byte	$51
	.byte	$1A
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D0
	.byte	$D5
	.byte	$D4
	.byte	$D7
	.byte	$ED
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$1A
	.byte	$11
	.byte	$14
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D5
	.byte	$D6
	.byte	$D4
	.byte	$D9
	.byte	$DB
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CB
	.byte	$C8
	.byte	$E4
	.byte	$E5
	.byte	$D4
	.byte	$D4
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D4
	.byte	$DA
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$C9
	.byte	$CE
	.byte	$C8
	.byte	$51
	.byte	$EB
	.byte	$C8
	.byte	$E7
	.byte	$DF
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D8
	.byte	$CA
	.byte	$CA
	.byte	$51
	.byte	$CB
	.byte	$CE
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$C8
	.byte	$CF
	.byte	$C8
	.byte	$A4
	.byte	$B3
	.byte	$AA
	.byte	$A9
	.byte	$AA
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$EB
	.byte	$A4
	.byte	$A1
	.byte	$B0
	.byte	$7E
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$54
	.byte	$A3
	.byte	$A2
	.byte	$A7
	.byte	$5C
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$0B
	.byte	$07
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$07
	.byte	$09
	.byte	$05
	.byte	$0D
	.byte	$35
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$02
	.byte	$3C
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$14
	.byte	$39
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
_leveltng5_2:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$96
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$95
	.byte	$93
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$92
	.byte	$92
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$90
	.byte	$92
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$92
	.byte	$92
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$85
	.byte	$93
	.byte	$EB
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$85
	.byte	$EF
	.byte	$EB
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D3
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$DB
	.byte	$ED
	.byte	$EB
	.byte	$E4
	.byte	$E5
	.byte	$D5
	.byte	$D9
	.byte	$EF
	.byte	$E3
	.byte	$D1
	.byte	$D3
	.byte	$E4
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$66
	.byte	$DB
	.byte	$DB
	.byte	$EF
	.byte	$E9
	.byte	$EB
	.byte	$E7
	.byte	$E6
	.byte	$D8
	.byte	$EC
	.byte	$E7
	.byte	$E8
	.byte	$EF
	.byte	$EE
	.byte	$E4
	.byte	$E2
	.byte	$58
	.byte	$AA
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$AB
	.byte	$A7
	.byte	$7E
	.byte	$78
	.byte	$5F
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$A7
	.byte	$A8
	.byte	$4D
	.byte	$63
	.byte	$7F
	.byte	$5F
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$5C
	.byte	$8C
	.byte	$5E
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$AB
	.byte	$4A
	.byte	$B4
	.byte	$8C
	.byte	$5E
	.byte	$AB
	.byte	$A7
	.byte	$B0
	.byte	$AA
	.byte	$AA
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$AB
	.byte	$B0
	.byte	$AA
	.byte	$A7
	.byte	$B5
	.byte	$4A
	.byte	$34
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
_leveltng5_3:
	.byte	$92
	.byte	$92
	.byte	$8E
	.byte	$91
	.byte	$99
	.byte	$7B
	.byte	$50
	.byte	$50
	.byte	$1D
	.byte	$1C
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$3A
	.byte	$92
	.byte	$93
	.byte	$92
	.byte	$8F
	.byte	$91
	.byte	$99
	.byte	$50
	.byte	$1D
	.byte	$1C
	.byte	$12
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$91
	.byte	$91
	.byte	$92
	.byte	$8E
	.byte	$93
	.byte	$8E
	.byte	$50
	.byte	$1C
	.byte	$02
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$93
	.byte	$92
	.byte	$92
	.byte	$8F
	.byte	$91
	.byte	$8F
	.byte	$1D
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$92
	.byte	$91
	.byte	$90
	.byte	$8F
	.byte	$93
	.byte	$8E
	.byte	$1C
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$3C
	.byte	$92
	.byte	$91
	.byte	$8E
	.byte	$93
	.byte	$91
	.byte	$8F
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$8B
	.byte	$8B
	.byte	$88
	.byte	$88
	.byte	$8C
	.byte	$8B
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$62
	.byte	$9C
	.byte	$6A
	.byte	$73
	.byte	$9C
	.byte	$9B
	.byte	$1B
	.byte	$3A
	.byte	$3B
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$13
	.byte	$16
	.byte	$CF
	.byte	$51
	.byte	$61
	.byte	$67
	.byte	$68
	.byte	$70
	.byte	$77
	.byte	$50
	.byte	$9B
	.byte	$18
	.byte	$10
	.byte	$16
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$61
	.byte	$58
	.byte	$68
	.byte	$70
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$EB
	.byte	$CE
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$CB
	.byte	$51
	.byte	$51
	.byte	$C3
	.byte	$64
	.byte	$65
	.byte	$68
	.byte	$55
	.byte	$75
	.byte	$51
	.byte	$53
	.byte	$C8
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$C1
	.byte	$C0
	.byte	$55
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$57
	.byte	$51
	.byte	$57
	.byte	$C8
	.byte	$C8
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$C4
	.byte	$B4
	.byte	$55
	.byte	$51
	.byte	$53
	.byte	$57
	.byte	$57
	.byte	$53
	.byte	$51
	.byte	$53
	.byte	$C8
	.byte	$CB
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$33
	.byte	$36
	.byte	$0E
	.byte	$04
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$04
	.byte	$09
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$37
	.byte	$37
	.byte	$39
	.byte	$1A
	.byte	$10
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$11
	.byte	$12
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$11
_leveltng5_4:
	.byte	$3B
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$3D
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$11
	.byte	$02
	.byte	$10
	.byte	$13
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$18
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$3D
	.byte	$02
	.byte	$10
	.byte	$3C
	.byte	$03
	.byte	$3C
	.byte	$01
	.byte	$14
	.byte	$CF
	.byte	$19
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CB
	.byte	$51
	.byte	$1A
	.byte	$3D
	.byte	$14
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$C3
	.byte	$51
	.byte	$51
	.byte	$CB
	.byte	$3D
	.byte	$CA
	.byte	$51
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$51
	.byte	$CF
	.byte	$00
	.byte	$01
	.byte	$18
	.byte	$51
	.byte	$CC
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$C4
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$3D
	.byte	$51
	.byte	$51
	.byte	$02
	.byte	$03
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$3E
	.byte	$0E
	.byte	$07
	.byte	$04
	.byte	$08
	.byte	$04
	.byte	$07
	.byte	$04
	.byte	$0D
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$51
	.byte	$CB
	.byte	$CE
	.byte	$51
	.byte	$3D
	.byte	$12
	.byte	$10
	.byte	$3C
	.byte	$01
	.byte	$10
	.byte	$3C
	.byte	$11
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$15
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$25
	.byte	$C2
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$1A
	.byte	$02
	.byte	$03
	.byte	$25
	.byte	$20
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$20
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CB
	.byte	$3D
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$25
	.byte	$20
	.byte	$20
	.byte	$09
	.byte	$05
	.byte	$09
	.byte	$07
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$08
	.byte	$0D
	.byte	$3C
	.byte	$00
	.byte	$25
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$12
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$03
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$25
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
_leveltng6_0:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$3C
	.byte	$01
	.byte	$51
	.byte	$3D
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$3C
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$51
	.byte	$3D
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$3C
	.byte	$02
	.byte	$10
	.byte	$3C
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$51
	.byte	$3D
	.byte	$11
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$3D
	.byte	$00
	.byte	$10
	.byte	$3C
	.byte	$00
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$18
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$51
	.byte	$C3
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$51
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$51
	.byte	$3D
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$51
	.byte	$51
	.byte	$C4
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$10
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$3C
	.byte	$3B
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$51
	.byte	$51
	.byte	$3D
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$11
	.byte	$10
	.byte	$51
	.byte	$3D
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$51
	.byte	$3D
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$51
	.byte	$3D
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$12
	.byte	$01
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$51
	.byte	$3D
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$3C
	.byte	$10
	.byte	$03
	.byte	$3C
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$51
	.byte	$3D
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
_leveltng7_0:
	.byte	$02
	.byte	$02
	.byte	$3C
	.byte	$03
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$02
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$14
	.byte	$CF
	.byte	$CD
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$CF
	.byte	$1A
	.byte	$00
	.byte	$02
	.byte	$CA
	.byte	$51
	.byte	$CB
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CB
	.byte	$51
	.byte	$CE
	.byte	$02
	.byte	$10
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$C3
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$CB
	.byte	$51
	.byte	$C3
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$00
	.byte	$11
	.byte	$51
	.byte	$CC
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$C9
	.byte	$51
	.byte	$02
	.byte	$12
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$C4
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$C4
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$00
	.byte	$3C
	.byte	$51
	.byte	$CD
	.byte	$CC
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$CB
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$CC
	.byte	$10
	.byte	$02
	.byte	$51
	.byte	$51
	.byte	$CC
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$C9
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$10
	.byte	$10
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$3A
	.byte	$3B
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$CE
	.byte	$3C
	.byte	$12
	.byte	$51
	.byte	$C9
	.byte	$CD
	.byte	$CF
	.byte	$CD
	.byte	$51
	.byte	$CC
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$00
	.byte	$11
	.byte	$51
	.byte	$CC
	.byte	$CD
	.byte	$CB
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$02
	.byte	$10
	.byte	$CE
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$CD
	.byte	$51
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$00
	.byte	$3C
	.byte	$0E
	.byte	$05
	.byte	$06
	.byte	$04
	.byte	$09
	.byte	$0A
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$04
	.byte	$3E
	.byte	$04
	.byte	$08
	.byte	$0D
	.byte	$02
_stage1_levels_list:
	.addr	_leveltng_0
	.addr	_leveltng_1
	.addr	_leveltng_2
	.addr	_leveltng_3
	.addr	_leveltng_4
	.addr	_leveltng_5
	.addr	_leveltng_6
	.addr	_leveltng_7
	.addr	_leveltng_8
	.addr	_leveltng_9
	.addr	_leveltng_10
	.addr	_leveltng2_0
	.addr	_leveltng3_0
	.addr	_leveltng3_1
	.addr	_leveltng3_2
	.addr	_leveltng3_3
	.addr	_leveltng4_0
	.addr	_leveltng5_0
	.addr	_leveltng5_1
	.addr	_leveltng5_2
	.addr	_leveltng5_3
	.addr	_leveltng5_4
	.addr	_leveltng6_0
	.addr	_leveltng7_0
_level_max_rooms:
	.byte	$0B
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$01
	.byte	$01
_level_offsets:
	.byte	$00
	.byte	$0B
	.byte	$0C
	.byte	$10
	.byte	$11
	.byte	$16
	.byte	$17
	.byte	$18
_level_1_enemies:
	.byte	$C0
	.byte	$01
	.byte	$C0
	.byte	$00
	.byte	$80
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$80
	.byte	$04
	.byte	$30
	.byte	$00
	.byte	$FF
_level_2_enemies:
	.byte	$FF
_level_3_enemies:
	.byte	$FF
_level_4_enemies:
	.byte	$FF
_level_5_enemies:
	.byte	$FF
_level_6_enemies:
	.byte	$FF
_level_7_enemies:
	.byte	$FF
_Enemy_list:
	.addr	_level_1_enemies
	.addr	_level_2_enemies
	.addr	_level_3_enemies
	.addr	_level_4_enemies
	.addr	_level_5_enemies
	.addr	_level_6_enemies
	.addr	_level_7_enemies
_level_1_entities:
	.byte	$00
	.byte	$0B
	.byte	$10
	.byte	$03
	.byte	$FF
_level_2_entities:
	.byte	$FF
_level_3_entities:
	.byte	$B0
	.byte	$03
	.byte	$E0
	.byte	$03
	.byte	$FF
_level_4_entities:
	.byte	$FF
_level_5_entities:
	.byte	$FF
_level_6_entities:
	.byte	$FF
_level_7_entities:
	.byte	$FF
_entity_list:
	.addr	_level_1_entities
	.addr	_level_2_entities
	.addr	_level_3_entities
	.addr	_level_4_entities
	.addr	_level_5_entities
	.addr	_level_6_entities
	.addr	_level_7_entities

.segment	"BSS"

.segment	"ZEROPAGE"
_debug:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_short_jump_count:
	.res	1,$00
_map_loaded:
	.res	1,$00
_collision:
	.res	1,$00
_player_in_air:
	.res	1,$00
_player_is_running:
	.res	1,$00
_player_on_ladder:
	.res	1,$00
_player_on_ladder_pose:
	.res	1,$00
_player_in_hitstun:
	.res	1,$00
_player_running:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_multi_jump:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_tempint:
	.res	2,$00
_tempint2:
	.res	2,$00
_temp_playerlocation:
	.res	2,$00
_temp_cmap1:
	.res	1,$00
_temp_cmap2:
	.res	1,$00
_level:
	.res	1,$00
_offset:
	.res	1,$00
_level_up:
	.res	1,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_sprite_frame_counter:
	.res	1,$00
_frame_counter:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_index2:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scroll_count:
	.res	1,$00
_pseudo_scroll_x:
	.res	2,$00
_song:
	.res	1,$00
_game_mode:
	.res	1,$00
_pointer:
	.res	2,$00
_l_scroll_frames:
	.res	1,$00
_r_scroll_frames:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_bright:
	.res	1,$00
_bright_count:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_temp_room:
	.res	1,$00
_player_shooting:
	.res	1,$00
_death:
	.res	1,$00
_invul_frames:
	.res	1,$00
_projectile_cooldown:
	.res	1,$00
_projectile_count:
	.res	1,$00
_projectile_index:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_Generic:
	.res	4,$00
_Generic2:
	.res	4,$00
_max_rooms:
	.res	1,$00
_max_scroll:
	.res	2,$00
_enemy_x:
	.res	16,$00
_enemy_y:
	.res	16,$00
_enemy_active:
	.res	16,$00
_enemy_health:
	.res	16,$00
_enemy_room:
	.res	16,$00
_enemy_actual_x:
	.res	16,$00
_enemy_type:
	.res	16,$00
_enemy_anim:
	.res	32,$00
_enemy_frames:
	.res	1,$00
_entity_x:
	.res	16,$00
_entity_y:
	.res	16,$00
_entity_active:
	.res	16,$00
_entity_room:
	.res	16,$00
_entity_actual_x:
	.res	16,$00
_entity_type:
	.res	16,$00
_entity_anim:
	.res	32,$00
_entity_frames:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; offset = level_offsets[level];
;
	ldy     _level
	lda     _level_offsets,y
	sta     _offset
;
; offset += room_to_load;
;
	lda     _room_to_load
	clc
	adc     _offset
	sta     _offset
;
; set_data_pointer(stage1_levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L3367
	inx
	clc
L3367:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; set_mt_pointer(metatile);
;
	lda     #<(_metatile)
	ldx     #>(_metatile)
	jsr     _set_mt_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L3365:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L3364:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	ldx     #$00
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L3369
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L3364
;
; if (y == 0xe0)
;
L3369:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L336A
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L3365
;
; set_data_pointer(stage1_levels_list[offset + 1]);
;
L336A:	lda     _offset
	clc
	adc     #$01
	bcc     L2DDF
	inx
L2DDF:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_stage1_levels_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L3366:	sta     _y
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; address = get_ppu_addr(1, x, y);
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0);
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (y == 0xe0)
;
	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L2DE1
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L3366
;
; memcpy(c_map, stage1_levels_list[offset], 240);
;
L2DE1:	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L3368
	inx
	clc
L3368:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; temp_cmap1 = 0;
;
	lda     #$00
	sta     _temp_cmap1
;
; max_rooms = level_max_rooms[level] - 1;
;
	ldy     _level
	lda     _level_max_rooms,y
	sec
	sbc     #$01
	sta     _max_rooms
;
; max_scroll = (max_rooms * 0x100) - 1; // 11 rooms makes 0x0AFF as the max
;
	tax
	lda     #$00
	sec
	sbc     #$01
	bcs     L2E07
	dex
L2E07:	sta     _max_scroll
	stx     _max_scroll+1
;
; sprite_obj_init();
;
	jsr     _sprite_obj_init
;
; entity_obj_init();
;
	jmp     _entity_obj_init

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_player_sprites();
;
	jsr     _draw_player_sprites
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	lda     #$00
	sta     _temp1
L336E:	lda     _temp1
	cmp     #$03
	bcs     L2E0E
;
; if (projectiles_list[temp1] != OFF)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	beq     L336F
;
; temp6 = projectiles_y[temp1]; //+ sine_wave[frame_counter % 10];
;
	ldy     _temp1
	lda     #$00
	sta     _temp6+1
	lda     _projectiles_y,y
	sta     _temp6
;
; oam_meta_spr(projectiles_x[temp1], temp6, animate_orb0_data);
;
	jsr     decsp2
	ldy     _temp1
	lda     _projectiles_x,y
	ldy     #$01
	sta     (sp),y
	lda     _temp6
	dey
	sta     (sp),y
	lda     #<(_animate_orb0_data)
	ldx     #>(_animate_orb0_data)
	jsr     _oam_meta_spr
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
L336F:	inc     _temp1
	jmp     L336E
;
; offset = get_frame_count() & 3;
;
L2E0E:	jsr     _get_frame_count
	and     #$03
	sta     _offset
;
; offset = offset << 4; // * 16, the size of the shuffle array
;
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _offset
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
	lda     #$00
	sta     _index
L3370:	lda     _index
	cmp     #$10
	jcs     L2E28
;
; index2 = shuffle_array[offset];
;
	ldy     _offset
	lda     _shuffle_array,y
	sta     _index2
;
; ++offset;
;
	inc     _offset
;
; temp_y = enemy_y[index2];
;
	ldy     _index2
	lda     _enemy_y,y
	sta     _temp_y
;
; if (enemy_health[index2] == 0)
;
	ldy     _index2
	lda     _enemy_health,y
;
; continue;
;
	beq     L3372
;
; if (temp_y == TURN_OFF)
;
	lda     _temp_y
	cmp     #$FF
;
; continue;
;
	beq     L3372
;
; if (!enemy_active[index2])
;
	ldy     _index2
	lda     _enemy_active,y
;
; continue;
;
	beq     L3372
;
; temp_x = enemy_x[index2];
;
	ldy     _index2
	lda     _enemy_x,y
	sta     _temp_x
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L3371
;
; temp_x = 1; // problems with x = 0
;
	lda     #$01
	sta     _temp_x
;
; if (temp_x > 0xf0)
;
L3371:	lda     _temp_x
	cmp     #$F1
;
; continue;
;
	bcs     L3372
;
; if (temp_y < 0xf0)
;
	lda     _temp_y
	cmp     #$F0
	bcs     L3372
;
; oam_meta_spr(temp_x, temp_y, enemy_anim[index2]);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	ldx     #$00
	lda     _index2
	asl     a
	bcc     L336D
	inx
	clc
L336D:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
L3372:	inc     _index
	jmp     L3370
;
; if (debug)
;
L2E28:	lda     _debug
	bne     L3373
;
; }
;
	rts
;
; temp1 = (scroll_x) >> 8;
;
L3373:	lda     _scroll_x+1
	sta     _temp1
;
; oam_spr(28, 10, temp1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; temp1 = (scroll_x & 0xff) >> 4;
;
	lda     _scroll_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; oam_spr(36, 10, temp1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$24
	ldy     #$02
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; temp1 = (scroll_x & 0x0f);
;
	lda     _scroll_x
	and     #$0F
	sta     _temp1
;
; oam_spr(44, 10, temp1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$2C
	ldy     #$02
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; tempint = scroll_x + high_byte(BoxGuy1.x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     _BoxGuy1+1
	bcc     L336B
	inx
L336B:	sta     _tempint
	stx     _tempint+1
;
; temp1 = (tempint >> 8);
;
	lda     _tempint+1
	sta     _temp1
;
; oam_spr(90, 10, temp1 + 0x30, 1);
;
	jsr     decsp3
	lda     #$5A
	ldy     #$02
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = room_to_load;
;
	lda     _room_to_load
	sta     _temp1
;
; oam_spr(100, 10, temp1 + 0x30, 3);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$03
	jsr     _oam_spr
;
; temp1 = (BoxGuy1.x >> 8 & 0xff) >> 4;
;
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; oam_spr(66, 10, temp1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$42
	ldy     #$02
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; temp1 = (BoxGuy1.x >> 8 & 0x0f);
;
	lda     _BoxGuy1+1
	and     #$0F
	sta     _temp1
;
; oam_spr(74, 10, temp1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$4A
	ldy     #$02
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; if (player_in_hitstun > 0)
;
	lda     _player_in_hitstun
	beq     L2EA7
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2E99
;
; BoxGuy1.vel_x += HITSTUN_DECEL;
;
	lda     #$41
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L2E9D
	inc     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x >= MAX_SPEED)
;
L2E9D:	lda     _BoxGuy1+4
	cmp     #$60
	lda     _BoxGuy1+4+1
	sbc     #$01
	bvs     L2EA0
	eor     #$80
L2EA0:	bpl     L2EA7
;
; BoxGuy1.vel_x = MAX_SPEED;
;
	ldx     #$01
	lda     #$60
;
; else
;
	jmp     L33A5
;
; BoxGuy1.vel_x -= HITSTUN_DECEL;
;
L2E99:	lda     _BoxGuy1+4
	sec
	sbc     #$41
	sta     _BoxGuy1+4
	bcs     L2EA6
	dec     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x < -MAX_SPEED)
;
L2EA6:	lda     _BoxGuy1+4
	cmp     #$A0
	lda     _BoxGuy1+4+1
	sbc     #$FE
	bvc     L2EA9
	eor     #$80
L2EA9:	bpl     L2EA7
;
; BoxGuy1.vel_x = -MAX_SPEED;
;
	ldx     #$FE
	lda     #$A0
L33A5:	sta     _BoxGuy1+4
	stx     _BoxGuy1+4+1
;
; old_x = BoxGuy1.x;
;
L2EA7:	lda     _BoxGuy1+1
	sta     _old_x+1
	lda     _BoxGuy1
	sta     _old_x
;
; if (pad1 & PAD_LEFT && !player_in_hitstun)
;
	lda     _pad1
	and     #$02
	beq     L3382
	lda     _player_in_hitstun
	bne     L3382
;
; direction = LEFT;
;
	sta     _direction
;
; player_is_running = 1;
;
	lda     #$01
	sta     _player_is_running
;
; if (!player_on_ladder)
;
	lda     _player_on_ladder
	jne     L2EFC
;
; if (BoxGuy1.vel_x >= DECEL)
;
	lda     _BoxGuy1+4
	cmp     #$32
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L2EBA
	eor     #$80
L2EBA:	bpl     L2EB8
;
; BoxGuy1.vel_x -= DECEL;
;
	lda     _BoxGuy1+4
	sec
	sbc     #$32
	sta     _BoxGuy1+4
	jcs     L2EFC
	dec     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x > 0)
;
	jmp     L2EFC
L2EB8:	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L2EC1
	eor     #$80
L2EC1:	bpl     L2EBF
;
; BoxGuy1.vel_x = 0;
;
	ldx     #$00
	txa
;
; else
;
	jmp     L3389
;
; BoxGuy1.vel_x -= ACCEL;
;
L2EBF:	lda     _BoxGuy1+4
	sec
	sbc     #$1E
	sta     _BoxGuy1+4
	bcs     L2EC7
	dec     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x < -MAX_SPEED)
;
L2EC7:	lda     _BoxGuy1+4
	cmp     #$A0
	lda     _BoxGuy1+4+1
	sbc     #$FE
	bvc     L2ECA
	eor     #$80
L2ECA:	jpl     L2EFC
;
; BoxGuy1.vel_x = -MAX_SPEED;
;
	ldx     #$FE
	lda     #$A0
;
; else if (pad1 & PAD_RIGHT && !player_in_hitstun)
;
	jmp     L3389
L3382:	lda     _pad1
	and     #$01
	beq     L3387
	lda     _player_in_hitstun
	beq     L3385
	lda     #$00
	jmp     L3387
;
; direction = RIGHT;
;
L3385:	lda     #$01
	sta     _direction
;
; player_is_running = 1;
;
	sta     _player_is_running
;
; if (!player_on_ladder)
;
	lda     _player_on_ladder
	jne     L2EFC
;
; if (BoxGuy1.vel_x <= DECEL)
;
	lda     _BoxGuy1+4
	cmp     #$33
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvc     L2EDA
	eor     #$80
L2EDA:	bpl     L2ED8
;
; BoxGuy1.vel_x += DECEL;
;
	lda     #$32
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	jcc     L2EFC
	inc     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x < 0)
;
	jmp     L2EFC
L2ED8:	ldx     _BoxGuy1+4+1
	cpx     #$80
	bcc     L2EDF
;
; BoxGuy1.vel_x = 0;
;
	ldx     #$00
	txa
;
; else
;
	jmp     L3389
;
; BoxGuy1.vel_x += ACCEL;
;
L2EDF:	lda     #$1E
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L2EE6
	inc     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x >= MAX_SPEED)
;
L2EE6:	lda     _BoxGuy1+4
	cmp     #$60
	lda     _BoxGuy1+4+1
	sbc     #$01
	bvs     L2EE9
	eor     #$80
L2EE9:	bpl     L2EFC
;
; BoxGuy1.vel_x = MAX_SPEED;
;
	ldx     #$01
	lda     #$60
;
; else
;
	jmp     L3389
;
; player_is_running = 0;
;
L3387:	sta     _player_is_running
;
; if (BoxGuy1.vel_x >= ACCEL)
;
	lda     _BoxGuy1+4
	cmp     #$1E
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L2EF1
	eor     #$80
L2EF1:	bpl     L2EEF
;
; BoxGuy1.vel_x -= ACCEL;
;
	lda     _BoxGuy1+4
	sec
	sbc     #$1E
	sta     _BoxGuy1+4
	bcs     L2EFC
	dec     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x < -ACCEL)
;
	jmp     L2EFC
L2EEF:	lda     _BoxGuy1+4
	cmp     #$E2
	lda     _BoxGuy1+4+1
	sbc     #$FF
	bvc     L2EF8
	eor     #$80
L2EF8:	asl     a
	lda     #$00
	tax
	bcc     L3389
;
; BoxGuy1.vel_x += ACCEL;
;
	lda     #$1E
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L2EFC
	inc     _BoxGuy1+4+1
;
; else
;
	jmp     L2EFC
;
; BoxGuy1.vel_x = 0;
;
L3389:	sta     _BoxGuy1+4
	stx     _BoxGuy1+4+1
;
; BoxGuy1.x += BoxGuy1.vel_x;
;
L2EFC:	lda     _BoxGuy1+4
	clc
	adc     _BoxGuy1
	sta     _BoxGuy1
	lda     _BoxGuy1+4+1
	adc     _BoxGuy1+1
	sta     _BoxGuy1+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L338C
;
; if (old_x >= 0x8000)
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L338B
;
; BoxGuy1.x = 0xf000; // max right
;
	ldx     #$F0
;
; BoxGuy1.x = 0x0000; // max left
;
L338B:	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; Generic.x = high_byte(BoxGuy1.x); // this is much faster than passing a pointer to BoxGuy1
;
L338C:	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0E
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; if (BoxGuy1.y > 0xf800) // top of screen
;
	lda     _BoxGuy1+2
	cmp     #$01
	lda     _BoxGuy1+2+1
	sbc     #$F8
	bcc     L2F17
;
; level_up = 1;
;
	lda     #$01
	sta     _level_up
;
; else if (BoxGuy1.y > 0xf400) // bottom of screen
;
	jmp     L2F1C
L2F17:	lda     _BoxGuy1+2
	cmp     #$01
	lda     _BoxGuy1+2+1
	sbc     #$F4
	bcc     L2F1C
;
; death = 1;
;
	lda     #$01
	sta     _death
;
; if (BoxGuy1.vel_x < 0)
;
L2F1C:	ldx     _BoxGuy1+4+1
	cpx     #$80
	bcc     L2F20
;
; if (bg_coll_L())
;
	jsr     _bg_coll_L
	tax
	beq     L338D
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_L;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_L
	sta     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L338D
;
; BoxGuy1.x = 0xf000;
;
	ldx     #$F0
;
; else if (BoxGuy1.vel_x > 0)
;
	jmp     L33AA
L2F20:	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L2F31
	eor     #$80
L2F31:	bpl     L338D
;
; if (bg_coll_R())
;
	jsr     _bg_coll_R
	tax
	beq     L338D
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_R;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_R
	sta     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L338D
;
; BoxGuy1.x = 0x0000;
;
	ldx     #$00
L33AA:	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; if (pad1 & PAD_DOWN)
;
L338D:	lda     _pad1
	and     #$04
	beq     L2F42
;
; direction_y = DOWN;
;
	lda     #$00
	sta     _direction_y
;
; if (bg_coll_ladder_top_under_player())
;
	jsr     _bg_coll_ladder_top_under_player
	tax
	beq     L2F42
;
; BoxGuy1.x = (BoxGuy1.x + 0x100) & ~0xF00;
;
	ldx     _BoxGuy1+1
	inx
	ldy     _BoxGuy1
	txa
	and     #$F0
	sta     _BoxGuy1+1
	sty     _BoxGuy1
;
; player_on_ladder = 1;
;
	lda     #$01
	sta     _player_on_ladder
;
; player_on_ladder_pose = 0;
;
	lda     #$00
	sta     _player_on_ladder_pose
;
; player_in_air = 0;
;
	sta     _player_in_air
;
; BoxGuy1.vel_y = 0;
;
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; BoxGuy1.y += 0x800;
;
	clc
	adc     _BoxGuy1+2
	sta     _BoxGuy1+2
	lda     #$08
	adc     _BoxGuy1+2+1
	sta     _BoxGuy1+2+1
;
; if (player_on_ladder && bg_coll_ladder())
;
L2F42:	lda     _player_on_ladder
	beq     L3392
	jsr     _bg_coll_ladder
	tax
	beq     L3392
;
; if (pad1 & PAD_DOWN)
;
	lda     _pad1
	and     #$04
	beq     L338E
;
; direction_y = DOWN;
;
	lda     #$00
	sta     _direction_y
;
; ++player_on_ladder_pose;
;
	inc     _player_on_ladder_pose
;
; BoxGuy1.vel_y += LADDER_ACCEL;
;
	lda     #$14
	clc
	adc     _BoxGuy1+6
	sta     _BoxGuy1+6
	bcc     L2F5E
	inc     _BoxGuy1+6+1
;
; if (BoxGuy1.vel_y > MAX_LADDER_SPEED)
;
L2F5E:	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$01
	bvs     L2F61
	eor     #$80
L2F61:	bpl     L2F7E
;
; BoxGuy1.vel_y = MAX_LADDER_SPEED;
;
	ldx     #$01
;
; else if (pad1 & PAD_UP)
;
	jmp     L33AB
L338E:	lda     _pad1
	and     #$08
	beq     L3390
;
; direction_y = UP;
;
	lda     #$01
	sta     _direction_y
;
; ++player_on_ladder_pose;
;
	inc     _player_on_ladder_pose
;
; BoxGuy1.vel_y -= LADDER_ACCEL;
;
	lda     _BoxGuy1+6
	sec
	sbc     #$14
	sta     _BoxGuy1+6
	bcs     L2F6C
	dec     _BoxGuy1+6+1
;
; if (BoxGuy1.vel_y < -MAX_LADDER_SPEED)
;
L2F6C:	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$FF
	bvc     L2F6F
	eor     #$80
L2F6F:	bpl     L2F7E
;
; BoxGuy1.vel_y = -MAX_LADDER_SPEED;
;
	ldx     #$FF
;
; else
;
	jmp     L33AB
;
; BoxGuy1.vel_y = 0;
;
L3390:	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; else
;
	jmp     L2F7E
;
; player_on_ladder = 0;
;
L3392:	sta     _player_on_ladder
;
; if (BoxGuy1.vel_y < 0x300)
;
	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$03
	bvc     L2F7A
	eor     #$80
L2F7A:	bpl     L2F78
;
; BoxGuy1.vel_y += GRAVITY;
;
	lda     #$3C
	clc
	adc     _BoxGuy1+6
	sta     _BoxGuy1+6
	bcc     L2F7E
	inc     _BoxGuy1+6+1
;
; else
;
	jmp     L2F7E
;
; BoxGuy1.vel_y = 0x300; // consistent
;
L2F78:	ldx     #$03
L33AB:	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; BoxGuy1.y += BoxGuy1.vel_y; // add gravity to y; (make him go up or down)
;
L2F7E:	lda     _BoxGuy1+6
	clc
	adc     _BoxGuy1+2
	sta     _BoxGuy1+2
	lda     _BoxGuy1+6+1
	adc     _BoxGuy1+2+1
	sta     _BoxGuy1+2+1
;
; Generic.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if (BoxGuy1.vel_y > 0) // he's falling
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L2F8B
	eor     #$80
L2F8B:	bpl     L2F89
;
; if (bg_coll_D()) // if he's collising below
;
	jsr     _bg_coll_D
	tax
	beq     L3393
;
; player_in_air = 0;
;
	lda     #$00
	sta     _player_in_air
;
; multi_jump = 0;
;
	sta     _multi_jump
;
; player_on_ladder = 0;
;
	sta     _player_on_ladder
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_D;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_D
	sta     _BoxGuy1+3
;
; BoxGuy1.y &= 0xff00;
;
	ldx     _BoxGuy1+2+1
	lda     #$00
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; if (BoxGuy1.vel_y > 0)
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L2F9C
	eor     #$80
L2F9C:	bpl     L3393
;
; else if (BoxGuy1.vel_y < 0)
;
	jmp     L33AC
L2F89:	ldx     _BoxGuy1+6+1
	cpx     #$80
	bcc     L3393
;
; if (bg_coll_U())
;
	jsr     _bg_coll_U
	tax
	beq     L3393
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_U;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_U
	sta     _BoxGuy1+3
;
; BoxGuy1.vel_y = 0;
;
L33AC:	lda     #$00
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; Generic.y = high_byte(BoxGuy1.y); // the rest should be the same
;
L3393:	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if (projectile_cooldown > 0)
;
	lda     _projectile_cooldown
	beq     L3394
;
; --projectile_cooldown;
;
	dec     _projectile_cooldown
;
; if (pad1_new & PAD_UP)
;
L3394:	lda     _pad1_new
	and     #$08
	beq     L3395
;
; direction_y = UP;
;
	lda     #$01
	sta     _direction_y
;
; if (bg_coll_ladder())
;
	jsr     _bg_coll_ladder
	tax
	beq     L3395
;
; BoxGuy1.x = (BoxGuy1.x + 0x700) & ~0xF00;
;
	lda     _BoxGuy1
	sta     _BoxGuy1
	lda     _BoxGuy1+1
	clc
	adc     #$07
	and     #$F0
	sta     _BoxGuy1+1
;
; player_on_ladder_pose = 0;
;
	lda     #$00
	sta     _player_on_ladder_pose
;
; player_on_ladder = 1;
;
	lda     #$01
	sta     _player_on_ladder
;
; player_in_air = 0;
;
	lda     #$00
	sta     _player_in_air
;
; BoxGuy1.vel_y = 0;
;
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (pad1_new & PAD_A)
;
L3395:	lda     _pad1_new
	and     #$80
	beq     L3397
;
; if (player_on_ladder)
;
	lda     _player_on_ladder
	beq     L2FC5
;
; player_on_ladder = 0;
;
	lda     #$00
	sta     _player_on_ladder
;
; player_in_air = 1;
;
	lda     #$01
;
; else if (bg_coll_D2() || multi_jump < 2)
;
	jmp     L337D
L2FC5:	jsr     _bg_coll_D2
	tax
	bne     L3396
	lda     _multi_jump
	cmp     #$02
	bcs     L3397
;
; ++multi_jump;
;
L3396:	inc     _multi_jump
;
; BoxGuy1.vel_y = JUMP_VEL; // JUMP
;
	ldx     #$FB
	lda     #$80
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; short_jump_count = 1;
;
	lda     #$01
	sta     _short_jump_count
;
; player_in_air = 1;
;
L337D:	sta     _player_in_air
;
; if (pad1_new & PAD_B && projectile_cooldown == 0) // shooting
;
L3397:	lda     _pad1_new
	ldx     #$00
	and     #$40
	beq     L2FE8
	lda     _projectile_cooldown
	bne     L2FE8
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	sta     _temp1
L339B:	lda     _temp1
	cmp     #$03
	bcs     L2FDB
;
; if (projectiles_list[temp1] == OFF)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	bne     L339C
;
; temp2 = 1;
;
	lda     #$01
	sta     _temp2
;
; break;
;
	jmp     L2FDB
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
L339C:	inc     _temp1
	jmp     L339B
;
; if (temp2)
;
L2FDB:	lda     _temp2
	beq     L2FE8
;
; projectile_cooldown = PROJECTILE_COOLDOWN_FRAMES;
;
	lda     #$0A
	sta     _projectile_cooldown
;
; player_shooting = 10;
;
	sta     _player_shooting
;
; projectile_index = temp1;
;
	lda     _temp1
	sta     _projectile_index
;
; if (direction == RIGHT)
;
	lda     _direction
	cmp     #$01
	bne     L2FF0
;
; projectiles_list[projectile_index] = RIGHT;
;
	ldy     _projectile_index
;
; else
;
	jmp     L337E
;
; projectiles_list[projectile_index] = LEFT;
;
L2FF0:	ldy     _projectile_index
	lda     #$00
L337E:	sta     _projectiles_list,y
;
; projectiles_x[projectile_index] = high_byte(BoxGuy1.x) + 10;
;
	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _projectile_index
	bcc     L2FFD
	inx
L2FFD:	sta     ptr1
	stx     ptr1+1
	lda     _BoxGuy1+1
	clc
	adc     #$0A
	ldy     #$00
	sta     (ptr1),y
;
; projectiles_y[projectile_index] = high_byte(BoxGuy1.y);
;
	ldy     _projectile_index
	ldx     #$00
	lda     _BoxGuy1+3
	sta     _projectiles_y,y
;
; if (short_jump_count)
;
L2FE8:	lda     _short_jump_count
	beq     L300A
;
; ++short_jump_count;
;
	inc     _short_jump_count
;
; if (short_jump_count > 30)
;
	lda     _short_jump_count
	cmp     #$1F
	bcc     L300A
;
; short_jump_count = 0;
;
	lda     #$00
	sta     _short_jump_count
;
; if ((short_jump_count) && ((pad1 & PAD_A) == 0) && (BoxGuy1.vel_y < -0x200))
;
L300A:	lda     _short_jump_count
	beq     L33A0
	lda     _pad1
	and     #$80
	bne     L33A0
	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$FE
	bvc     L3016
	eor     #$80
L3016:	bpl     L33A9
;
; BoxGuy1.vel_y = -0x200;
;
	ldx     #$FE
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; short_jump_count = 0;
;
	sta     _short_jump_count
;
; temp5 = low_byte(scroll_x) + high_byte(BoxGuy1.x);
;
L33A9:	ldx     #$00
L33A0:	lda     _scroll_x
	clc
	adc     _BoxGuy1+1
	bcc     L3374
	ldx     #$01
L3374:	sta     _temp5
	stx     _temp5+1
;
; if (temp5 > 0x98 && temp5 < 0xa4) // middle of the screen
;
	cmp     #$99
	txa
	sbc     #$00
	bcc     L3020
	lda     _temp5+1
	cmp     #$00
	bne     L3023
	lda     _temp5
	cmp     #$A4
L3023:	bcs     L3020
;
; map_loaded = 0;
;
	lda     #$00
	sta     _map_loaded
;
; temp5 = BoxGuy1.x; // store his x before we check the scrolling
;
L3020:	lda     _BoxGuy1+1
	sta     _temp5+1
	lda     _BoxGuy1
	sta     _temp5
;
; if (BoxGuy1.x < MAX_LEFT)
;
	ldx     _BoxGuy1+1
	cpx     #$40
	jcs     L3049
;
; if (!map_loaded)
;
	lda     _map_loaded
	bne     L302B
;
; room_to_load = ((scroll_x >> 8) - 1); // high byte = room, one to the left
;
	lda     _scroll_x+1
	sec
	sbc     #$01
	sta     _room_to_load
;
; new_cmap();
;
	jsr     _new_cmap
;
; map_loaded = 1; // only do once
;
	lda     #$01
	sta     _map_loaded
;
; temp1 = (MAX_LEFT - BoxGuy1.x) >> 8;
;
L302B:	lda     #$00
	sec
	sbc     _BoxGuy1
	lda     #$40
	sbc     _BoxGuy1+1
	sta     _temp1
;
; if (temp1 > 3)
;
	cmp     #$04
	bcc     L3038
;
; temp1 = 3; // max scroll change
;
	lda     #$03
	sta     _temp1
;
; tempint = scroll_x + high_byte(BoxGuy1.x);
;
L3038:	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     _BoxGuy1+1
	bcc     L3375
	inx
L3375:	sta     _tempint
	stx     _tempint+1
;
; current_room = (tempint >> 8);
;
	lda     _tempint+1
	sta     _current_room
;
; if (max_rooms > 1) // this is for the multi-room levels
;
	lda     _max_rooms
	cmp     #$02
	bcc     L3049
;
; if ((scroll_x - temp1) > max_scroll) // if subtracting the scroll makes it overflow
;
	lda     _scroll_x
	sec
	sbc     _temp1
	pha
	lda     _scroll_x+1
	sbc     #$00
	tax
	pla
	sec
	sbc     _max_scroll
	sta     tmp1
	txa
	sbc     _max_scroll+1
	ora     tmp1
	bcc     L3044
	beq     L3044
;
; scroll_x = 0; // just go to zero (and move the guy)
;
	lda     #$00
	sta     _scroll_x
	sta     _scroll_x+1
;
; else // otherwise scroll the window and offset the guy's movement
;
	jmp     L3049
;
; scroll_x -= temp1;                  // scroll the window
;
L3044:	lda     _temp1
	eor     #$FF
	sec
	adc     _scroll_x
	sta     _scroll_x
	lda     #$FF
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) + temp1; // add the offset to the guy
;
	lda     _BoxGuy1+1
	clc
	adc     _temp1
	sta     _BoxGuy1+1
;
; if (BoxGuy1.x > MAX_RIGHT)
;
L3049:	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$90
	bcc     L3063
;
; if (!map_loaded) // gets reset whenever the player's in the middle of the level
;
	lda     _map_loaded
	bne     L3052
;
; room_to_load = ((scroll_x >> 8) + 1); // high byte = room, one to the left
;
	lda     _scroll_x+1
	clc
	adc     #$01
	sta     _room_to_load
;
; new_cmap();
;
	jsr     _new_cmap
;
; map_loaded = 1; // only do once
;
	lda     #$01
	sta     _map_loaded
;
; temp1 = (BoxGuy1.x - MAX_RIGHT) >> 8;
;
L3052:	lda     _BoxGuy1+1
	sec
	sbc     #$90
	sta     _temp1
;
; if (temp1 > 3)
;
	cmp     #$04
	bcc     L33A4
;
; temp1 = 3; // max scroll change
;
	lda     #$03
	sta     _temp1
;
; if (max_rooms > 1) // used for single room levels
;
L33A4:	lda     _max_rooms
	cmp     #$02
	bcc     L3063
;
; scroll_x += temp1;                  // scroll the window
;
	lda     _temp1
	clc
	adc     _scroll_x
	sta     _scroll_x
	lda     #$00
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - temp1; // sub the offet from the guy
;
	lda     _BoxGuy1+1
	sec
	sbc     _temp1
	sta     _BoxGuy1+1
;
; if (scroll_x >= max_scroll)
;
L3063:	lda     _scroll_x
	cmp     _max_scroll
	lda     _scroll_x+1
	sbc     _max_scroll+1
	bcc     L3071
;
; scroll_x = max_scroll;      // stop scrolling right, end of level
;
	lda     _max_scroll+1
	sta     _scroll_x+1
	lda     _max_scroll
	sta     _scroll_x
;
; BoxGuy1.x = temp5;        // but allow the x position to go all the way right
;
	lda     _temp5+1
	sta     _BoxGuy1+1
	lda     _temp5
	sta     _BoxGuy1
;
; if (high_byte(BoxGuy1.x) >= 0xe0) // but limit how far right he can go
;
	lda     _BoxGuy1+1
	cmp     #$E0
	bcc     L3071
;
; BoxGuy1.x = 0xe000;
;
	ldx     #$E0
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; }
;
L3071:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if (temp_y >= 0xf0)
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L33AE
;
; return 0;
;
	txa
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0);
;
L33AE:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; map = temp_room & 1; // high byte
;
	lda     _temp_room
	and     #$01
	sta     _map
;
; if (!map)
;
	lda     _map
	bne     L2B14
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
;
; else
;
	jmp     L33AD
;
; collision = c_map2[coordinates];
;
L2B14:	ldy     _coordinates
	lda     _c_map2,y
L33AD:	sta     _collision
;
; return metatile_colision_map[collision];
;
	ldy     _collision
	lda     _metatile_colision_map,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x + 0x120;
;
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$20
	bcc     L30F8
	inx
L30F8:	inx
	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; offset = level_offsets[level];
;
	ldy     _level
	lda     _level_offsets,y
	sta     _offset
;
; offset += temp1; // in place of room?!?
;
	lda     _temp1
	clc
	adc     _offset
	sta     _offset
;
; set_data_pointer(stage1_levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L33B2
	inx
	clc
L33B2:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch (scroll_count)
;
	lda     _scroll_count
;
; }
;
	beq     L310C
	cmp     #$01
	beq     L3125
	cmp     #$02
	jeq     L313F
	jmp     L3158
;
; address = get_ppu_addr(nt, x, 0);
;
L310C:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L33B7
;
; address = get_ppu_addr(nt, x, 0x40);
;
L3125:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L33B7
;
; address = get_ppu_addr(nt, x, 0x80);
;
L313F:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L33B7
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L3158:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L33B7:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_L: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x - 0x20; // Modify the scroll offset for left scroll
;
	lda     _scroll_x
	ldx     _scroll_x+1
	sec
	sbc     #$20
	bcs     L3079
	dex
L3079:	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; offset = level_offsets[level];
;
	ldy     _level
	lda     _level_offsets,y
	sta     _offset
;
; offset += temp1; // in place of room?!?
;
	lda     _temp1
	clc
	adc     _offset
	sta     _offset
;
; set_data_pointer(stage1_levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L33BA
	inx
	clc
L33BA:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch (scroll_count)
;
	lda     _scroll_count
;
; }
;
	beq     L308D
	cmp     #$01
	beq     L30A6
	cmp     #$02
	jeq     L30C0
	jmp     L30D9
;
; address = get_ppu_addr(nt, x, 0);
;
L308D:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L33BF
;
; address = get_ppu_addr(nt, x, 0x40);
;
L30A6:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L33BF
;
; address = get_ppu_addr(nt, x, 0x80);
;
L30C0:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L33BF
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L30D9:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L33BF:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; --scroll_count;   // Reverse the increment to scroll in the opposite direction
;
	dec     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; offset = level_offsets[level];
;
	ldy     _level
	lda     _level_offsets,y
	sta     _offset
;
; offset += room_to_load;
;
	lda     _room_to_load
	clc
	adc     _offset
	sta     _offset
;
; map = room_to_load & 1; // even or odd?
;
	lda     _room_to_load
	and     #$01
	sta     _map
;
; if (!map)
;
	lda     _map
	bne     L317D
;
; memcpy(c_map, stage1_levels_list[offset], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L33C2
	inx
	clc
L33C2:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; temp_cmap1 = room_to_load;
;
	lda     _room_to_load
	sta     _temp_cmap1
;
; else
;
	rts
;
; memcpy(c_map2, stage1_levels_list[offset], 240);
;
L317D:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L33C3
	inx
	clc
L33C3:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; temp_cmap2 = room_to_load;
;
	lda     _room_to_load
	sta     _temp_cmap2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handle_scrolling (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_scrolling: near

.segment	"CODE"

;
; if (!r_scroll_frames && !l_scroll_frames)
;
	lda     _r_scroll_frames
	bne     L2DA3
	lda     _l_scroll_frames
	bne     L2DA3
;
; if (direction == RIGHT)
;
	lda     _direction
	cmp     #$01
	bne     L33C4
;
; r_scroll_frames = 4;
;
	lda     #$04
	sta     _r_scroll_frames
;
; else
;
	jmp     L2DA3
;
; l_scroll_frames = 4;
;
L33C4:	lda     #$04
	sta     _l_scroll_frames
;
; if (r_scroll_frames)
;
L2DA3:	lda     _r_scroll_frames
	beq     L2DA6
;
; draw_screen_R();
;
	jsr     _draw_screen_R
;
; --r_scroll_frames;
;
	dec     _r_scroll_frames
;
; else if (l_scroll_frames)
;
	rts
L2DA6:	lda     _l_scroll_frames
	beq     L2DAB
;
; draw_screen_L();
;
	jsr     _draw_screen_L
;
; --l_scroll_frames;
;
	dec     _l_scroll_frames
;
; }
;
L2DAB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ projectile_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_projectile_movement: near

.segment	"CODE"

;
; for (temp1 = 0; temp1 < 3; ++temp1)
;
	lda     #$00
	sta     _temp1
L33C6:	lda     _temp1
	cmp     #$03
	bcc     L33CD
;
; }
;
	rts
;
; if (projectiles_list[temp1] != TURN_OFF)
;
L33CD:	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	jeq     L33CC
;
; if (projectiles_x[temp1] > 250)
;
	ldy     _temp1
	lda     _projectiles_x,y
	cmp     #$FB
	bcc     L2D69
;
; projectiles_list[temp1] = TURN_OFF;
;
	ldy     _temp1
	lda     #$FF
	sta     _projectiles_list,y
;
; else
;
	jmp     L33CC
;
; if (projectiles_list[temp1] == RIGHT)
;
L2D69:	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$01
	bne     L2D72
;
; if ((BoxGuy1.x <= MAX_LEFT) && (pad1 & PAD_LEFT))
;
	lda     _BoxGuy1+1
	cmp     #$40
	bne     L2D79
	lda     _BoxGuy1
	cmp     #$01
L2D79:	bcs     L2D76
	lda     _pad1
	and     #$02
	beq     L2D76
;
; projectiles_x[temp1] += 3;
;
	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L2D7F
	inx
L2D7F:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$03
;
; else
;
	jmp     L33C5
;
; projectiles_x[temp1] += 2;
;
L2D76:	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L2D84
	inx
L2D84:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$02
;
; else if (projectiles_list[temp1] == LEFT)
;
	jmp     L33C5
L2D72:	ldy     _temp1
	lda     _projectiles_list,y
	bne     L33CC
;
; if ((BoxGuy1.x >= MAX_RIGHT) && (pad1 & PAD_RIGHT))
;
	lda     _BoxGuy1
	cmp     #$00
	lda     _BoxGuy1+1
	sbc     #$90
	bcc     L2D8B
	lda     _pad1
	and     #$01
	beq     L2D8B
;
; projectiles_x[temp1] -= 3;
;
	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L2D93
	inx
L2D93:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$03
;
; else
;
	jmp     L33C5
;
; projectiles_x[temp1] -= 2;
;
L2D8B:	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L2D98
	inx
L2D98:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
L33C5:	sta     (ptr1),y
;
; for (temp1 = 0; temp1 < 3; ++temp1)
;
L33CC:	inc     _temp1
	jmp     L33C6

.endproc

; ---------------------------------------------------------------
; void __near__ check_spr_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_spr_objects: near

.segment	"CODE"

;
; ++enemy_frames;
;
	inc     _enemy_frames
;
; Generic2.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic2
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
	lda     #$00
	sta     _index
L33CE:	lda     _index
	cmp     #$10
	bcs     L319E
;
; enemy_active[index] = 0; // default to zero
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; if (enemy_y[index] != TURN_OFF)
;
	ldy     _index
	lda     _enemy_y,y
	cmp     #$FF
	beq     L33D0
;
; high_byte(temp5) = enemy_room[index];
;
	ldy     _index
	lda     _enemy_room,y
	sta     _temp5+1
;
; low_byte(temp5) = enemy_actual_x[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	sta     _temp5
;
; temp1 = enemy_active[index] = get_position();
;
	lda     #<(_enemy_active)
	ldx     #>(_enemy_active)
	clc
	adc     _index
	bcc     L31BA
	inx
L31BA:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
	sta     _temp1
;
; if (temp1 == 0 || enemy_health[index] == 0)
;
	lda     _temp1
	beq     L33D0
	ldy     _index
	lda     _enemy_health,y
	beq     L33D0
;
; enemy_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _enemy_x,y
;
; enemy_moves(); // if active, do it's moves now
;
	jsr     _enemy_moves
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
L33D0:	inc     _index
	jmp     L33CE
;
; }
;
L319E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_entity_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_entity_objects: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collisions: near

.segment	"CODE"

;
; Generic.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0E
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; for (index = 0; index < MAX_ENTITY; ++index)
;
	lda     #$00
	sta     _index
L33D2:	lda     _index
	cmp     #$10
	jcs     L33DB
;
; if (entity_active[index])
;
	ldy     _index
	lda     _entity_active,y
	beq     L33DA
;
; switch (entity_type[index])
;
	ldy     _index
	lda     _entity_type,y
;
; }
;
	cmp     #$03
	beq     L33D4
	cmp     #$04
	beq     L33D3
	cmp     #$05
	beq     L33D5
	jmp     L33D6
;
; Generic2.width = 400;
;
L33D3:	lda     #$90
	sta     _Generic2+2
;
; Generic2.height = 10;
;
	lda     #$0A
;
; break;
;
	jmp     L33D1
;
; Generic2.width = 16;
;
L33D4:	lda     #$10
;
; break;
;
	jmp     L33DE
;
; Generic2.width = 16;
;
L33D5:	lda     #$10
;
; break;
;
	jmp     L33DE
;
; Generic2.width = 1;
;
L33D6:	lda     #$01
L33DE:	sta     _Generic2+2
;
; Generic2.height = 1;
;
L33D1:	sta     _Generic2+3
;
; Generic2.x = entity_x[index];
;
	ldy     _index
	lda     _entity_x,y
	sta     _Generic2
;
; Generic2.y = entity_y[index];
;
	ldy     _index
	lda     _entity_y,y
	sta     _Generic2+1
;
; if (check_collision(&Generic, &Generic2))
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	beq     L33DA
;
; switch (entity_type[index])
;
	ldy     _index
	lda     _entity_type,y
;
; }
;
	cmp     #$03
	beq     L33D8
	cmp     #$04
	beq     L33D7
	cmp     #$05
	beq     L33D9
	jmp     L33DA
;
; death = 1;
;
L33D7:	lda     #$01
	sta     _death
;
; break;
;
	jmp     L33DA
;
; ++level_up;
;
L33D8:	inc     _level_up
;
; break;
;
	jmp     L33DA
;
; --level_up;
;
L33D9:	dec     _level_up
;
; for (index = 0; index < MAX_ENTITY; ++index)
;
L33DA:	inc     _index
	jmp     L33D2
;
; Generic2.width = ENEMY_WIDTH;
;
L33DB:	lda     #$0D
	sta     _Generic2+2
;
; Generic2.height = ENEMY_HEIGHT;
;
	sta     _Generic2+3
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
	lda     #$00
	sta     _index
L33DC:	lda     _index
	cmp     #$10
	bcs     L3332
;
; if (enemy_active[index])
;
	ldy     _index
	lda     _enemy_active,y
	beq     L33DD
;
; Generic2.x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _Generic2
;
; Generic2.y = enemy_y[index];
;
	ldy     _index
	lda     _enemy_y,y
	sta     _Generic2+1
;
; if (check_collision(&Generic, &Generic2))
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	beq     L33DD
;
; switch (enemy_type[index])
;
	ldy     _index
	lda     _enemy_type,y
;
; }
;
	bne     L33DD
;
; if (invul_frames == 0)
;
	lda     _invul_frames
	bne     L33DD
;
; enemy_health[index] -= 1; // hit the enemy running into it?
;
	lda     #<(_enemy_health)
	ldx     #>(_enemy_health)
	clc
	adc     _index
	bcc     L3354
	inx
L3354:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; BoxGuy1.health -= 2;
;
	lda     _BoxGuy1+8
	sec
	sbc     #$02
	sta     _BoxGuy1+8
;
; player_in_hitstun = 30;
;
	lda     #$1E
	sta     _player_in_hitstun
;
; invul_frames = 60;
;
	lda     #$3C
	sta     _invul_frames
;
; if (BoxGuy1.health == 0)
;
	lda     _BoxGuy1+8
	bne     L33DD
;
; death = 1;
;
	lda     #$01
	sta     _death
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
L33DD:	inc     _index
	jmp     L33DC
;
; }
;
L3332:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_moves (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_moves: near

.segment	"CODE"

;
; if (invul_frames > 0)
;
	lda     _invul_frames
	beq     L33E9
;
; --invul_frames;
;
	dec     _invul_frames
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	lda     #$00
L33E9:	sta     _temp1
L33EA:	lda     _temp1
	cmp     #$03
	jcs     L320F
;
; if (projectiles_list[temp1] != TURN_OFF)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	jeq     L33EF
;
; (enemy_x[index] > projectiles_x[temp1] - 5 && enemy_x[index] < projectiles_x[temp1] + 5) &&
;
	ldy     _index
	lda     _enemy_x,y
	jsr     pusha0
	ldy     _temp1
	lda     _projectiles_x,y
	sec
	sbc     #$05
	bcs     L3221
	ldx     #$FF
L3221:	jsr     tosicmp
	bcc     L33EF
	beq     L33EF
	ldy     _index
	lda     _enemy_x,y
	jsr     pusha0
	ldy     _temp1
	lda     _projectiles_x,y
	clc
	adc     #$05
	bcc     L3227
	ldx     #$01
L3227:	jsr     tosicmp
	bcs     L33EF
;
; (enemy_y[index] > projectiles_y[temp1] - 30 && enemy_y[index] < projectiles_y[temp1] + 30))
;
	ldy     _index
	lda     _enemy_y,y
	jsr     pusha0
	ldy     _temp1
	lda     _projectiles_y,y
	sec
	sbc     #$1E
	bcs     L322F
	ldx     #$FF
L322F:	jsr     tosicmp
	bcc     L33EF
	beq     L33EF
	ldy     _index
	lda     _enemy_y,y
	jsr     pusha0
	ldy     _temp1
	lda     _projectiles_y,y
	clc
	adc     #$1E
	bcc     L3235
	ldx     #$01
L3235:	jsr     tosicmp
	bcs     L33EF
;
; projectiles_list[temp1] = TURN_OFF;
;
	ldy     _temp1
	lda     #$FF
	sta     _projectiles_list,y
;
; --enemy_health[index];
;
	lda     #<(_enemy_health)
	ldx     #>(_enemy_health)
	clc
	adc     _index
	bcc     L323E
	inx
L323E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
L33EF:	inc     _temp1
	jmp     L33EA
;
; if (enemy_type[index] == ENEMY_SNAIL)
;
L320F:	ldy     _index
	lda     _enemy_type,y
	beq     L33F3
;
; }
;
	rts
;
; Generic.x = enemy_x[index];
;
L33F3:	ldy     _index
	lda     _enemy_x,y
	sta     _Generic
;
; Generic.y = enemy_y[index] + 6; // mid point
;
	ldy     _index
	lda     _enemy_y,y
	clc
	adc     #$06
	sta     _Generic+1
;
; Generic.width = 13;
;
	lda     #$0D
	sta     _Generic+2
;
; Generic.height = 15;
;
	lda     #$0F
	sta     _Generic+3
;
; if (enemy_frames < 10)
;
	ldx     #$00
	lda     _enemy_frames
	cmp     #$0A
	bcs     L33F0
;
; enemy_anim[index] = animate_snail1left_data;
;
	lda     _index
	asl     a
	bcc     L33E4
	inx
	clc
L33E4:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail1left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail1left_data)
	sta     (ptr1),y
;
; else if (enemy_frames < 20)
;
	jmp     L3261
L33F0:	lda     _enemy_frames
	cmp     #$14
	bcs     L33F1
;
; enemy_anim[index] = animate_snail2left_data;
;
	lda     _index
	asl     a
	bcc     L33E5
	inx
	clc
L33E5:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail2left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail2left_data)
	sta     (ptr1),y
;
; else if (enemy_frames < 30)
;
	jmp     L3261
L33F1:	lda     _enemy_frames
	cmp     #$1E
	bcs     L33F2
;
; enemy_anim[index] = animate_snail3left_data;
;
	lda     _index
	asl     a
	bcc     L33E6
	inx
	clc
L33E6:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail3left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail3left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3261
;
; enemy_anim[index] = animate_snail3left_data;
;
L33F2:	lda     _index
	asl     a
	bcc     L33E7
	inx
	clc
L33E7:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail3left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail3left_data)
	sta     (ptr1),y
;
; enemy_frames = 0;
;
	lda     #$00
	sta     _enemy_frames
;
; if (frame_counter % 3 == 0)
;
L3261:	lda     _frame_counter
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	cpx     #$00
	beq     L33F4
;
; }
;
	rts
;
; if (frame_counter % 3 == 0)
;
L33F4:	cmp     #$00
	beq     L33F5
;
; }
;
	rts
;
; if (enemy_x[index] > Generic2.x)
;
L33F5:	ldy     _index
	lda     _enemy_x,y
	sec
	sbc     _Generic2
	bcc     L326A
	beq     L326A
;
; Generic.x -= 1;
;
	dec     _Generic
;
; Generic.x -= 1; // test going left
;
	dec     _Generic
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if (collision_L)
;
	lda     _collision_L
;
; return;
;
	beq     L33F6
;
; }
;
	rts
;
; if (enemy_actual_x[index] == 0)
;
L33F6:	ldy     _index
	lda     _enemy_actual_x,y
	bne     L3275
;
; --enemy_room[index];
;
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L327B
	inx
L327B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; --enemy_actual_x[index];
;
L3275:	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L327E
	inx
L327E:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
;
; else if (enemy_x[index] < Generic2.x)
;
	jmp     L33E3
L326A:	ldy     _index
	lda     _enemy_x,y
	cmp     _Generic2
	bcs     L328C
;
; Generic.x += 1; // test going right
;
	inc     _Generic
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if (collision_R)
;
	lda     _collision_R
;
; return;
;
	bne     L328C
;
; ++enemy_actual_x[index];
;
	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L328B
	inx
L328B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (enemy_actual_x[index] == 0)
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L328C
;
; ++enemy_room[index];
;
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L3292
	inx
L3292:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
L33E3:	sta     (ptr1),y
;
; }
;
L328C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; ppu_off();   // screen off
;
	jsr     _ppu_off
;
; pal_bright(4); // back to normal brightness
;
	lda     #$04
	jsr     _pal_bright
;
; scroll_x = 0;
;
	lda     #$00
	sta     _scroll_x
	sta     _scroll_x+1
;
; scroll_y = 0;
;
	sta     _scroll_y
	sta     _scroll_y+1
;
; map_loaded = 0;
;
	sta     _map_loaded
;
; player_in_air = 0;
;
	sta     _player_in_air
;
; player_on_ladder = 0;
;
	sta     _player_on_ladder
;
; player_running = 0;
;
	sta     _player_running
;
; short_jump_count = 0;
;
	sta     _short_jump_count
;
; multi_jump = 0;
;
	sta     _multi_jump
;
; projectile_cooldown = 0;
;
	sta     _projectile_cooldown
;
; projectile_count = 0;
;
	sta     _projectile_count
;
; projectile_index = 0;
;
	sta     _projectile_index
;
; player_shooting = 0;
;
	sta     _player_shooting
;
; direction = 1;
;
	lda     #$01
	sta     _direction
;
; direction_y = 0; // down default?
;
	lda     #$00
	sta     _direction_y
;
; frame_counter = 0;
;
	sta     _frame_counter
;
; sprite_frame_counter = 0;
;
	sta     _sprite_frame_counter
;
; r_scroll_frames = 0;
;
	sta     _r_scroll_frames
;
; l_scroll_frames = 0;
;
	sta     _l_scroll_frames
;
; collision = 0;
;
	sta     _collision
;
; death = 0;
;
	sta     _death
;
; BoxGuy1.x = 0x4000;
;
	ldx     #$40
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.y = 0x8400;
;
	ldx     #$84
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy1.health = 28;
;
	lda     #$1C
	sta     _BoxGuy1+8
;
; invul_frames = 0;
;
	lda     #$00
	sta     _invul_frames
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; level = 0;    // debug, change starting level
;
	lda     #$00
	sta     _level
;
; room_to_load = 0; // debug, hacky, change starting room
;
	sta     _room_to_load
;
; debug = 0;
;
	sta     _debug
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	sta     _temp1
L33F7:	lda     _temp1
	cmp     #$03
	bcs     L2D42
;
; projectiles_list[temp1] = OFF;
;
	ldy     _temp1
	lda     #$FF
	sta     _projectiles_list,y
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	inc     _temp1
	jmp     L33F7
;
; ppu_mask(0); // grayscale mode
;
L2D42:	lda     #$00
	jsr     _ppu_mask
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; load_room();
;
	jsr     _load_room
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_obj_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_obj_init: near

.segment	"CODE"

;
; pointer = Enemy_list[level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L33FE
	inx
	clc
L33FE:	adc     #<(_Enemy_list)
	sta     ptr1
	txa
	adc     #>(_Enemy_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _pointer+1
	dey
	lda     (ptr1),y
	sta     _pointer
;
; for (index = 0, index2 = 0; index < MAX_ENEMY; ++index)
;
	tya
	sta     _index
	sta     _index2
L33FF:	lda     _index
	cmp     #$10
	jcs     L3401
;
; enemy_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_y,y
;
; if (temp1 == TURN_OFF)
;
	lda     _temp1
	cmp     #$FF
;
; break;
;
	beq     L3401
;
; ++index2;
;
	inc     _index2
;
; enemy_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_type[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_type,y
;
; if (enemy_type[index] == ENEMY_SNAIL)
;
	ldy     _index
	lda     _enemy_type,y
	bne     L3400
;
; enemy_health[index] = 2; // set enemy health here
;
	ldy     _index
	lda     #$02
	sta     _enemy_health,y
;
; ++index2;
;
L3400:	inc     _index2
;
; for (index = 0, index2 = 0; index < MAX_ENEMY; ++index)
;
	inc     _index
	jmp     L33FF
;
; for (++index; index < MAX_ENEMY; ++index)
;
L3401:	inc     _index
	lda     _index
	cmp     #$10
	bcs     L32D4
;
; enemy_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _enemy_y,y
;
; for (++index; index < MAX_ENEMY; ++index)
;
	jmp     L3401
;
; }
;
L32D4:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ entity_obj_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_entity_obj_init: near

.segment	"CODE"

;
; pointer = entity_list[level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L3408
	inx
	clc
L3408:	adc     #<(_entity_list)
	sta     ptr1
	txa
	adc     #>(_entity_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _pointer+1
	dey
	lda     (ptr1),y
	sta     _pointer
;
; for (index = 0, index2 = 0; index < MAX_ENTITY; ++index)
;
	tya
	sta     _index
	sta     _index2
L3409:	lda     _index
	cmp     #$10
	jcs     L340A
;
; entity_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _entity_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; entity_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _entity_y,y
;
; if (temp1 == TURN_OFF)
;
	lda     _temp1
	cmp     #$FF
;
; break;
;
	beq     L340A
;
; ++index2;
;
	inc     _index2
;
; entity_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _entity_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; entity_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _entity_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; entity_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _entity_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; entity_type[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _entity_type,y
;
; ++index2;
;
	inc     _index2
;
; for (index = 0, index2 = 0; index < MAX_ENTITY; ++index)
;
	inc     _index
	jmp     L3409
;
; for (++index; index < MAX_ENTITY; ++index)
;
L340A:	inc     _index
	lda     _index
	cmp     #$10
	bcs     L31FF
;
; entity_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _entity_y,y
;
; for (++index; index < MAX_ENTITY; ++index)
;
	jmp     L340A
;
; }
;
L31FF:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; eject_L = temp_x | 0xf0;
;
	lda     _temp_x
	ora     #$F0
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L340C
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L340C:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L340E
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L340E:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + Generic.width;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L340F
	inx
L340F:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; eject_R = (temp_x + 1) & 0x0f;
;
	lda     _temp_x
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L3411
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L3411:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L3413
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L3413:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L2AAD
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2AAD:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L3415
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L3415:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L3414
	inx
L3414:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L2ABD
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2ABD:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L3417
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L3417:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L2ACB
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2ACB:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; if ((temp_y & 0x0f) > 3)
;
	and     #$0F
	cmp     #$04
	lda     #$00
	bcc     L341B
;
; return 0; // bug fix
;
	tax
	rts
;
; eject_D = (temp_y + 1) & 0x0f;
;
L341B:	lda     _temp_y
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if (bg_collision_sub() & COL_ALL || bg_collision_sub() & COL_LADDER_TOP)
;
	jsr     _bg_collision_sub
	and     #$40
	bne     L341C
	jsr     _bg_collision_sub
	and     #$02
	beq     L341D
;
; return 1;
;
L341C:	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L341D:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L3419
	inx
L3419:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L2AE2
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2AE2:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub() & COL_ALL || bg_collision_sub() & COL_LADDER_TOP)
;
	jsr     _bg_collision_sub
	and     #$40
	bne     L341E
	jsr     _bg_collision_sub
	and     #$02
	bne     L341E
	tax
	rts
;
; return 1;
;
L341E:	ldx     #$00
	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D2: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L2AF1
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2AF1:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y += 2;
;
	lda     #$02
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L3422
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L3422:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	txa
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L3421
	inx
L3421:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L2B01
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2B01:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L3424
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L3424:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_position (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_position: near

.segment	"CODE"

;
; temp5 -= scroll_x;
;
	lda     _scroll_x
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_x+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff;
;
	lda     _temp5
	ldx     #$00
	sta     _temp_x
;
; if (high_byte(temp5))
;
	lda     _temp5+1
	beq     L3425
;
; return 0;
;
	txa
	rts
;
; return 1;
;
L3425:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_fast (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_fast: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; if (Generic.y >= 0xf0)
;
	lda     _Generic+1
	cmp     #$F0
;
; return;
;
	bcs     L2A58
;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
	pla
	sta     _temp5
;
; temp_x = temp5 & 0xff;  // low byte x
;
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + 6; // y middle
;
	lda     _Generic+1
	clc
	adc     #$06
	sta     _temp_y
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L3426
;
; ++collision_L;
;
	inc     _collision_L
;
; temp5 += Generic.width;
;
L3426:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff;  // low byte x
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp_room
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L2A58
;
; ++collision_R;
;
	inc     _collision_R
;
; }
;
L2A58:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_ladder (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_ladder: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + 7;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     #$07
	bcc     L2A8E
	inx
L2A8E:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_LADDER || bg_collision_sub() & COL_LADDER_TOP)
;
	jsr     _bg_collision_sub
	and     #$01
	bne     L3428
	jsr     _bg_collision_sub
	and     #$02
	bne     L3428
	tax
	rts
;
; return temp5;
;
L3428:	ldx     #$00
	lda     _temp5
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_ladder_top_under_player (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_ladder_top_under_player: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + 7;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     #$07
	bcc     L2A9D
	inx
L2A9D:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y += 4;
;
	lda     #$04
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (bg_collision_sub() & COL_LADDER_TOP)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$02
	beq     L342D
;
; return temp_x;
;
	lda     _temp_x
	rts
;
; }
;
L342D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_health_meter (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_health_meter: near

.segment	"CODE"

;
; switch (BoxGuy1.health)
;
	lda     _BoxGuy1+8
;
; }
;
	cmp     #$01
	jeq     L2B93
	cmp     #$02
	jeq     L2B8F
	cmp     #$03
	jeq     L2B8B
	cmp     #$04
	jeq     L2B87
	cmp     #$05
	jeq     L2B83
	cmp     #$06
	jeq     L2B7F
	cmp     #$07
	jeq     L2B7B
	cmp     #$08
	jeq     L2B77
	cmp     #$09
	jeq     L2B73
	cmp     #$0A
	jeq     L2B6F
	cmp     #$0B
	jeq     L2B6B
	cmp     #$0C
	jeq     L2B67
	cmp     #$0D
	jeq     L2B63
	cmp     #$0E
	jeq     L2B5F
	cmp     #$0F
	jeq     L2B5B
	cmp     #$10
	jeq     L2B57
	cmp     #$11
	jeq     L2B53
	cmp     #$12
	jeq     L2B4F
	cmp     #$13
	jeq     L2B4B
	cmp     #$14
	beq     L2B47
	cmp     #$15
	beq     L2B43
	cmp     #$16
	beq     L2B3F
	cmp     #$17
	beq     L2B3B
	cmp     #$18
	beq     L2B37
	cmp     #$19
	beq     L2B33
	cmp     #$1A
	beq     L2B2F
	cmp     #$1B
	beq     L2B2B
	cmp     #$1C
	jne     L2B96
;
; tempint2 = animate_meter28_data;
;
	lda     #>(_animate_meter28_data)
	sta     _tempint2+1
	lda     #<(_animate_meter28_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter27_data;
;
L2B2B:	lda     #>(_animate_meter27_data)
	sta     _tempint2+1
	lda     #<(_animate_meter27_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter26_data;
;
L2B2F:	lda     #>(_animate_meter26_data)
	sta     _tempint2+1
	lda     #<(_animate_meter26_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter25_data;
;
L2B33:	lda     #>(_animate_meter25_data)
	sta     _tempint2+1
	lda     #<(_animate_meter25_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter24_data;
;
L2B37:	lda     #>(_animate_meter24_data)
	sta     _tempint2+1
	lda     #<(_animate_meter24_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter23_data;
;
L2B3B:	lda     #>(_animate_meter23_data)
	sta     _tempint2+1
	lda     #<(_animate_meter23_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter22_data;
;
L2B3F:	lda     #>(_animate_meter22_data)
	sta     _tempint2+1
	lda     #<(_animate_meter22_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter21_data;
;
L2B43:	lda     #>(_animate_meter21_data)
	sta     _tempint2+1
	lda     #<(_animate_meter21_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter20_data;
;
L2B47:	lda     #>(_animate_meter20_data)
	sta     _tempint2+1
	lda     #<(_animate_meter20_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter19_data;
;
L2B4B:	lda     #>(_animate_meter19_data)
	sta     _tempint2+1
	lda     #<(_animate_meter19_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter18_data;
;
L2B4F:	lda     #>(_animate_meter18_data)
	sta     _tempint2+1
	lda     #<(_animate_meter18_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter17_data;
;
L2B53:	lda     #>(_animate_meter17_data)
	sta     _tempint2+1
	lda     #<(_animate_meter17_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter16_data;
;
L2B57:	lda     #>(_animate_meter16_data)
	sta     _tempint2+1
	lda     #<(_animate_meter16_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter15_data;
;
L2B5B:	lda     #>(_animate_meter15_data)
	sta     _tempint2+1
	lda     #<(_animate_meter15_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter14_data;
;
L2B5F:	lda     #>(_animate_meter14_data)
	sta     _tempint2+1
	lda     #<(_animate_meter14_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter13_data;
;
L2B63:	lda     #>(_animate_meter13_data)
	sta     _tempint2+1
	lda     #<(_animate_meter13_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter12_data;
;
L2B67:	lda     #>(_animate_meter12_data)
	sta     _tempint2+1
	lda     #<(_animate_meter12_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter11_data;
;
L2B6B:	lda     #>(_animate_meter11_data)
	sta     _tempint2+1
	lda     #<(_animate_meter11_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter10_data;
;
L2B6F:	lda     #>(_animate_meter10_data)
	sta     _tempint2+1
	lda     #<(_animate_meter10_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter9_data;
;
L2B73:	lda     #>(_animate_meter9_data)
	sta     _tempint2+1
	lda     #<(_animate_meter9_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter8_data;
;
L2B77:	lda     #>(_animate_meter8_data)
	sta     _tempint2+1
	lda     #<(_animate_meter8_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter7_data;
;
L2B7B:	lda     #>(_animate_meter7_data)
	sta     _tempint2+1
	lda     #<(_animate_meter7_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter6_data;
;
L2B7F:	lda     #>(_animate_meter6_data)
	sta     _tempint2+1
	lda     #<(_animate_meter6_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter5_data;
;
L2B83:	lda     #>(_animate_meter5_data)
	sta     _tempint2+1
	lda     #<(_animate_meter5_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter4_data;
;
L2B87:	lda     #>(_animate_meter4_data)
	sta     _tempint2+1
	lda     #<(_animate_meter4_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter3_data;
;
L2B8B:	lda     #>(_animate_meter3_data)
	sta     _tempint2+1
	lda     #<(_animate_meter3_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter2_data;
;
L2B8F:	lda     #>(_animate_meter2_data)
	sta     _tempint2+1
	lda     #<(_animate_meter2_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter1_data;
;
L2B93:	lda     #>(_animate_meter1_data)
	sta     _tempint2+1
	lda     #<(_animate_meter1_data)
;
; break;
;
	jmp     L342E
;
; tempint2 = animate_meter0_data;
;
L2B96:	lda     #>(_animate_meter0_data)
	sta     _tempint2+1
	lda     #<(_animate_meter0_data)
L342E:	sta     _tempint2
;
; oam_meta_spr(0x16, 0x16, tempint2);
;
	jsr     decsp2
	lda     #$16
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     _tempint2
	ldx     _tempint2+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_sprites: near

.segment	"CODE"

;
; draw_player_health_meter();
;
	jsr     _draw_player_health_meter
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L3438
;
; temp_x = 1;
;
	lda     #$01
	sta     _temp_x
;
; if (temp_y == 0)
;
L3438:	lda     _temp_y
	bne     L3439
;
; temp_y = 1;
;
	lda     #$01
	sta     _temp_y
;
; ++sprite_frame_counter;
;
L3439:	inc     _sprite_frame_counter
;
; if (player_shooting > 0)
;
	lda     _player_shooting
	beq     L2BAC
;
; --player_shooting;
;
	dec     _player_shooting
;
; if (player_in_hitstun)
;
L2BAC:	lda     _player_in_hitstun
	beq     L2BAF
;
; --player_in_hitstun;
;
	dec     _player_in_hitstun
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2BB2
;
; tempint = animate_recoilleft_data;
;
	lda     #>(_animate_recoilleft_data)
	sta     _tempint+1
	lda     #<(_animate_recoilleft_data)
;
; else
;
	jmp     L342F
;
; tempint = animate_recoilright_data;
;
L2BB2:	lda     #>(_animate_recoilright_data)
	sta     _tempint+1
	lda     #<(_animate_recoilright_data)
L342F:	sta     _tempint
;
; oam_meta_spr(temp_x, temp_y, tempint);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _tempint
	ldx     _tempint+1
	jmp     _oam_meta_spr
;
; else if (player_in_air)
;
L2BAF:	lda     _player_in_air
	beq     L2BBE
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2BC0
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2BC2
;
; tempint = animate_playerjumpleftshoot_data;
;
	lda     #>(_animate_playerjumpleftshoot_data)
	sta     _tempint+1
	lda     #<(_animate_playerjumpleftshoot_data)
;
; else
;
	jmp     L3430
;
; tempint = animate_playerjumpleft_data;
;
L2BC2:	lda     #>(_animate_playerjumpleft_data)
	sta     _tempint+1
	lda     #<(_animate_playerjumpleft_data)
;
; else
;
	jmp     L3430
;
; if (player_shooting)
;
L2BC0:	lda     _player_shooting
	beq     L2BCA
;
; tempint = animate_playerjumprightshoot_data;
;
	lda     #>(_animate_playerjumprightshoot_data)
	sta     _tempint+1
	lda     #<(_animate_playerjumprightshoot_data)
;
; else
;
	jmp     L3430
;
; tempint = animate_playerjumpright_data;
;
L2BCA:	lda     #>(_animate_playerjumpright_data)
	sta     _tempint+1
	lda     #<(_animate_playerjumpright_data)
L3430:	sta     _tempint
;
; oam_meta_spr(temp_x, temp_y, tempint);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _tempint
	ldx     _tempint+1
	jmp     _oam_meta_spr
;
; else if (player_on_ladder)
;
L2BBE:	lda     _player_on_ladder
	jeq     L2BD6
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2BD8
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2BDA
;
; tempint = animate_playerclimbshootleft_data;
;
	lda     #>(_animate_playerclimbshootleft_data)
	sta     _tempint+1
	lda     #<(_animate_playerclimbshootleft_data)
	sta     _tempint
;
; player_on_ladder_pose = 0;
;
	lda     #$00
;
; else
;
	jmp     L3431
;
; tempint = animate_playerclimbshootright_data;
;
L2BDA:	lda     #>(_animate_playerclimbshootright_data)
	sta     _tempint+1
	lda     #<(_animate_playerclimbshootright_data)
	sta     _tempint
;
; player_on_ladder_pose = PLAYER_LADDER_1_FRAMES;
;
	lda     #$0F
L3431:	sta     _player_on_ladder_pose
;
; oam_meta_spr(temp_x, temp_y, tempint);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _tempint
	ldx     _tempint+1
	jmp     _oam_meta_spr
;
; if (player_on_ladder_pose < PLAYER_LADDER_1_FRAMES)
;
L2BD8:	lda     _player_on_ladder_pose
	cmp     #$0F
	bcs     L343A
;
; oam_meta_spr(temp_x, temp_y, animate_playerclimb1_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerclimb1_data)
	ldx     #>(_animate_playerclimb1_data)
	jmp     _oam_meta_spr
;
; else if (player_on_ladder_pose < PLAYER_LADDER_2_FRAMES)
;
L343A:	lda     _player_on_ladder_pose
	cmp     #$1E
	bcs     L2BF0
;
; oam_meta_spr(temp_x, temp_y, animate_playerclimb2_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerclimb2_data)
	ldx     #>(_animate_playerclimb2_data)
	jmp     _oam_meta_spr
;
; oam_meta_spr(temp_x, temp_y, animate_playerclimb1_data);
;
L2BF0:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerclimb1_data)
	ldx     #>(_animate_playerclimb1_data)
	jsr     _oam_meta_spr
;
; player_on_ladder_pose = 0;
;
	lda     #$00
	sta     _player_on_ladder_pose
;
; return;
;
	rts
;
; else if (player_is_running) // running
;
L2BD6:	lda     _player_is_running
	jeq     L2BFE
;
; if (sprite_frame_counter < PLAYER_RUN_1_FRAMES)
;
	lda     _sprite_frame_counter
	cmp     #$0F
	bcs     L343B
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2C02
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2C04
;
; tempint = animate_playerrunshoot2left_data;
;
	lda     #>(_animate_playerrunshoot2left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot2left_data)
;
; else
;
	jmp     L3433
;
; tempint = animate_playerrun2left_data;
;
L2C04:	lda     #>(_animate_playerrun2left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun2left_data)
;
; else
;
	jmp     L3433
;
; if (player_shooting)
;
L2C02:	lda     _player_shooting
	beq     L2C0C
;
; tempint = animate_playerrunshoot2right_data;
;
	lda     #>(_animate_playerrunshoot2right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot2right_data)
;
; else
;
	jmp     L3433
;
; tempint = animate_playerrun2right_data;
;
L2C0C:	lda     #>(_animate_playerrun2right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun2right_data)
;
; else if (sprite_frame_counter < PLAYER_RUN_2_FRAMES)
;
	jmp     L3433
L343B:	lda     _sprite_frame_counter
	cmp     #$1E
	bcs     L343C
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2C16
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2C18
;
; tempint = animate_playerrunshoot3left_data;
;
	lda     #>(_animate_playerrunshoot3left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot3left_data)
;
; else
;
	jmp     L3433
;
; tempint = animate_playerrun3left_data;
;
L2C18:	lda     #>(_animate_playerrun3left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun3left_data)
;
; else
;
	jmp     L3433
;
; if (player_shooting)
;
L2C16:	lda     _player_shooting
	beq     L2C20
;
; tempint = animate_playerrunshoot3right_data;
;
	lda     #>(_animate_playerrunshoot3right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot3right_data)
;
; else
;
	jmp     L3433
;
; tempint = animate_playerrun3right_data;
;
L2C20:	lda     #>(_animate_playerrun3right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun3right_data)
;
; else if (sprite_frame_counter < PLAYER_RUN_3_FRAMES)
;
	jmp     L3433
L343C:	lda     _sprite_frame_counter
	cmp     #$2D
	bcs     L343D
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2C2A
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2C2C
;
; tempint = animate_playerrunshoot2left_data;
;
	lda     #>(_animate_playerrunshoot2left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot2left_data)
;
; else
;
	jmp     L3433
;
; tempint = animate_playerrun2left_data;
;
L2C2C:	lda     #>(_animate_playerrun2left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun2left_data)
;
; else
;
	jmp     L3433
;
; if (player_shooting)
;
L2C2A:	lda     _player_shooting
	beq     L2C34
;
; tempint = animate_playerrunshoot2right_data;
;
	lda     #>(_animate_playerrunshoot2right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot2right_data)
;
; else
;
	jmp     L3433
;
; tempint = animate_playerrun2right_data;
;
L2C34:	lda     #>(_animate_playerrun2right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun2right_data)
;
; else if (sprite_frame_counter < PLAYER_RUN_4_FRAMES)
;
	jmp     L3433
L343D:	lda     _sprite_frame_counter
	cmp     #$3C
	bcs     L343E
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2C3E
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2C40
;
; tempint = animate_playerrunshoot1left_data;
;
	lda     #>(_animate_playerrunshoot1left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot1left_data)
;
; else
;
	jmp     L3433
;
; tempint = animate_playerrun1left_data;
;
L2C40:	lda     #>(_animate_playerrun1left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun1left_data)
;
; else
;
	jmp     L3433
;
; if (player_shooting)
;
L2C3E:	lda     _player_shooting
	beq     L2C5C
;
; tempint = animate_playerrunshoot1right_data;
;
	lda     #>(_animate_playerrunshoot1right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot1right_data)
;
; else
;
	jmp     L3433
;
; sprite_frame_counter = 0;
;
L343E:	lda     #$00
	sta     _sprite_frame_counter
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2C52
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2C54
;
; tempint = animate_playerrunshoot1left_data;
;
	lda     #>(_animate_playerrunshoot1left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot1left_data)
;
; else
;
	jmp     L3433
;
; tempint = animate_playerrun1left_data;
;
L2C54:	lda     #>(_animate_playerrun1left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun1left_data)
;
; else
;
	jmp     L3433
;
; if (player_shooting)
;
L2C52:	lda     _player_shooting
	beq     L2C5C
;
; tempint = animate_playerrunshoot1right_data;
;
	lda     #>(_animate_playerrunshoot1right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot1right_data)
;
; else
;
	jmp     L3433
;
; tempint = animate_playerrun1right_data;
;
L2C5C:	lda     #>(_animate_playerrun1right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun1right_data)
L3433:	sta     _tempint
;
; oam_meta_spr(temp_x, temp_y, tempint);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _tempint
	ldx     _tempint+1
	jmp     _oam_meta_spr
;
; if (player_shooting)
;
L2BFE:	lda     _player_shooting
	beq     L2C68
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2C6A
;
; tempint = animate_playerstandshootleft_data;
;
	lda     #>(_animate_playerstandshootleft_data)
	sta     _tempint+1
	lda     #<(_animate_playerstandshootleft_data)
;
; else
;
	jmp     L3437
;
; tempint = animate_playerstandshootright_data;
;
L2C6A:	lda     #>(_animate_playerstandshootright_data)
	sta     _tempint+1
	lda     #<(_animate_playerstandshootright_data)
;
; else
;
	jmp     L3437
;
; if (direction == LEFT)
;
L2C68:	lda     _direction
	bne     L2C72
;
; tempint = animate_playerstandleft_data;
;
	lda     #>(_animate_playerstandleft_data)
	sta     _tempint+1
	lda     #<(_animate_playerstandleft_data)
;
; else
;
	jmp     L3437
;
; tempint = animate_playerstandright_data;
;
L2C72:	lda     #>(_animate_playerstandright_data)
	sta     _tempint+1
	lda     #<(_animate_playerstandright_data)
L3437:	sta     _tempint
;
; oam_meta_spr(temp_x, temp_y, tempint);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _tempint
	ldx     _tempint+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; reset();
;
	jsr     _reset
;
; while (game_mode == MODE_TITLE)
;
	jmp     L3443
;
; ppu_wait_nmi();
;
L2C83:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L3443
;
; pal_fade_to(4, 0); // fade to black
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; ppu_off();
;
	jsr     _ppu_off
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; pal_bright(4); // back to normal brightness
;
	lda     #$04
	jsr     _pal_bright
;
; while (game_mode == MODE_TITLE)
;
L3443:	lda     _game_mode
	beq     L2C83
;
; while (game_mode == MODE_GAME)
;
	jmp     L3445
;
; ++frame_counter;
;
L3444:	inc     _frame_counter
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L2CA5
;
; game_mode = MODE_PAUSE;
;
	lda     #$02
	sta     _game_mode
;
; ppu_mask(0b00011001); // grayscale mode
;
	lda     #$19
;
; break; // out of the game loop
;
	jmp     L3441
;
; movement();
;
L2CA5:	jsr     _movement
;
; check_spr_objects();
;
	jsr     _check_spr_objects
;
; projectile_movement();
;
	jsr     _projectile_movement
;
; sprite_collisions();
;
	jsr     _sprite_collisions
;
; set_scroll_x(scroll_x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; handle_scrolling();
;
	jsr     _handle_scrolling
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if (level_up)
;
	lda     _level_up
	beq     L2CB5
;
; pal_fade_to(4, 0); // fade to black
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; game_mode = MODE_SWITCH;
;
	lda     #$03
	sta     _game_mode
;
; level_up = 0;
;
	lda     #$00
	sta     _level_up
;
; room_to_load = 0;
;
	sta     _room_to_load
;
; scroll_x = 0;
;
	sta     _scroll_x
	sta     _scroll_x+1
;
; ++level;
;
	inc     _level
;
; if (direction_y == DOWN)
;
	lda     _direction_y
	bne     L2CC3
;
; BoxGuy1.y = 0x0400; // put the user near the top of screen
;
	ldx     #$04
;
; else
;
	jmp     L3448
;
; BoxGuy1.y = 0xE000; // put the user above the bottom of the screen.
;
L2CC3:	ldx     #$E0
	lda     #$00
L3448:	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; ppu_off();
;
	jsr     _ppu_off
;
; else if (death)
;
	jmp     L3445
L2CB5:	lda     _death
	beq     L3445
;
; pal_fade_to(4, 0); // fade to black
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; reset();
;
	jsr     _reset
;
; while (game_mode == MODE_GAME)
;
L3445:	lda     _game_mode
	cmp     #$01
	jeq     L3444
;
; while (game_mode == MODE_PAUSE)
;
	jmp     L3446
;
; ppu_wait_nmi();
;
L2CD2:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L3446
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; ppu_mask(0b00011000); // grayscale mode
;
	lda     #$18
L3441:	jsr     _ppu_mask
;
; while (game_mode == MODE_PAUSE)
;
L3446:	lda     _game_mode
	cmp     #$02
	beq     L2CD2
;
; while (game_mode == MODE_SWITCH)
;
	jmp     L3447
;
; ppu_wait_nmi();
;
L2CE3:	jsr     _ppu_wait_nmi
;
; ++bright_count;
;
	inc     _bright_count
;
; if (bright_count >= 0x10)
;
	lda     _bright_count
	cmp     #$10
	bcc     L2CEE
;
; bright_count = 0;
;
	lda     #$00
	sta     _bright_count
;
; --bright;
;
	dec     _bright
;
; if (bright != 0xff)
;
	lda     _bright
	cmp     #$FF
	beq     L2CEE
;
; pal_bright(bright); // fade out
;
	jsr     _pal_bright
;
; set_scroll_x(scroll_x);
;
L2CEE:	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; if (bright == 0xff)
;
	lda     _bright
	cmp     #$FF
	bne     L3447
;
; ppu_off();
;
	jsr     _ppu_off
;
; oam_clear();
;
	jsr     _oam_clear
;
; scroll_x = 0;
;
	ldx     #$00
	txa
	sta     _scroll_x
	sta     _scroll_x+1
;
; set_scroll_x(scroll_x);
;
	jsr     _set_scroll_x
;
; if (level < 9)
;
	lda     _level
	cmp     #$09
	bcs     L3447
;
; load_room();
;
	jsr     _load_room
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; pal_bright(4); // back to normal brighness
;
	lda     #$04
	jsr     _pal_bright
;
; while (game_mode == MODE_SWITCH)
;
L3447:	lda     _game_mode
	cmp     #$03
	beq     L2CE3
;
; while (1)
;
	jmp     L3443

.endproc

