;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_bank_bg
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_get_pad_new
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.export		_orb
	.export		_orb1
	.export		_orb2
	.export		_orb3
	.export		_orb4
	.export		_orb5
	.export		_orb6
	.export		_orb7
	.export		_mosesclimb1
	.export		_mosesclimb2
	.export		_mosesclimb3
	.export		_mosesstandright
	.export		_mosesstandleft
	.export		_mosesstandshootleft
	.export		_mosesstandshootright
	.export		_mosesrun1left
	.export		_mosesrun2left
	.export		_mosesrun3left
	.export		_mosesrun4left
	.export		_mosesrun5left
	.export		_mosesrun1right
	.export		_mosesrun2right
	.export		_mosesrun3right
	.export		_mosesrun4right
	.export		_mosesrun5right
	.export		_mosesrunshoot1left
	.export		_mosesrunshoot2left
	.export		_mosesrunshoot3left
	.export		_mosesrunshoot4left
	.export		_mosesrunshoot5left
	.export		_mosesrunshoot1right
	.export		_mosesrunshoot2right
	.export		_mosesrunshoot3right
	.export		_mosesrunshoot4right
	.export		_mosesrunshoot5right
	.export		_mosesjumpleft
	.export		_mosesjumpleftshoot
	.export		_mosesjumpright
	.export		_mosesjumprightshoot
	.export		_mosesfallwiggle1left
	.export		_mosesfallwiggle2left
	.export		_mosesfallwiggle1leftshoot
	.export		_mosesfallwiggle2leftshoot
	.export		_mosesfallwiggle1right
	.export		_mosesfallwiggle2right
	.export		_mosesfallwiggle1rightshoot
	.export		_mosesfallwiggle2rightshoot
	.export		_debug
	.export		_pad1
	.export		_pad1_new
	.export		_short_jump_count
	.export		_map_loaded
	.export		_collision
	.export		_player_in_air
	.export		_player_jumping
	.export		_player_falling
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_temp_playerlocation
	.export		_temp_cmap1
	.export		_temp_cmap2
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_sprite_frame_counter
	.export		_frame_counter
	.export		_address
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_room
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_l_scroll_frames
	.export		_r_scroll_frames
	.export		_old_x
	.export		_old_y
	.export		_temp_x
	.export		_temp_y
	.export		_temp_room
	.export		_player_shooting
	.export		_projectile_cooldown
	.export		_projectile_count
	.export		_projectile_index
	.export		_projectiles_list
	.export		_projectiles_x
	.export		_projectiles_y
	.export		_sine_wave
	.export		_c_map
	.export		_c_map2
	.export		_Generic
	.export		_BoxGuy1
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles1
	.export		_busylevel_0
	.export		_busylevel_1
	.export		_busylevel_2
	.export		_busylevel_3
	.export		_busylevel_4
	.export		_busylevel_5
	.export		_busylevel_6
	.export		_busylevel_7
	.export		_busylevel_8
	.export		_busylevel_9
	.export		_busylevel_10
	.export		_busylevel_11
	.export		_busylevel_12
	.export		_busylevel_13
	.export		_busylevel_14
	.export		_busylevel_15
	.export		_busylevel_16
	.export		_busylevel_17
	.export		_busylevel_18
	.export		_busylevel_list
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision_sub
	.export		_draw_screen_R
	.export		_draw_screen_L
	.export		_new_cmap
	.export		_handle_scrolling
	.export		_projectile_movement
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_bg_coll_D2
	.export		_is_solid
	.export		_bg_collision_fast
	.export		_bg_coll_ladder
	.export		_draw_player_sprites
	.export		_main

.segment	"DATA"

_direction:
	.byte	$01
_room:
	.byte	$00
_projectiles_list:
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
_projectiles_x:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_projectiles_y:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_sine_wave:
	.byte	$05
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$08
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
_BoxGuy1:
	.word	$4000
	.word	$8400
	.res	4,$00

.segment	"RODATA"

_orb:
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$80
_orb1:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$80
_orb2:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$80
_orb3:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$80
_orb4:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$80
_orb5:
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$80
_orb6:
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$80
_orb7:
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$80
_mosesclimb1:
	.byte	$08
	.byte	$F8
	.byte	$06
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$26
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$80
_mosesclimb2:
	.byte	$08
	.byte	$F8
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$80
_mosesclimb3:
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$17
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$27
	.byte	$00
	.byte	$80
_mosesstandright:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$20
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_mosesstandleft:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_mosesstandshootleft:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_mosesstandshootright:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$20
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_mosesrun1left:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$18
	.byte	$08
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$80
_mosesrun2left:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$43
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$80
_mosesrun3left:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$80
_mosesrun4left:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$39
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$48
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$49
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$80
_mosesrun5left:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$3B
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$4B
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$4C
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$4D
	.byte	$00
	.byte	$80
_mosesrun1right:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$35
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$36
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$45
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$40
	.byte	$18
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$80
_mosesrun2right:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$32
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$42
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$80
_mosesrun3right:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$40
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$80
_mosesrun4right:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$38
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$39
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$48
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$49
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$80
_mosesrun5right:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$3B
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$4B
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$40
	.byte	$80
_mosesrunshoot1left:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$18
	.byte	$08
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_mosesrunshoot2left:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$43
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_mosesrunshoot3left:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_mosesrunshoot4left:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$39
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$48
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$49
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_mosesrunshoot5left:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$4B
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$4C
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$18
	.byte	$08
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_mosesrunshoot1right:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$36
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$45
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$40
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_mosesrunshoot2right:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$36
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$42
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_mosesrunshoot3right:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$40
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_mosesrunshoot4right:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$39
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$48
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$49
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_mosesrunshoot5right:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$4B
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$40
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_mosesjumpleft:
	.byte	$08
	.byte	$F8
	.byte	$55
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_mosesjumpleftshoot:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_mosesjumpright:
	.byte	$10
	.byte	$F8
	.byte	$55
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$56
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$65
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$75
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_mosesjumprightshoot:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$56
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$75
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_mosesfallwiggle1left:
	.byte	$08
	.byte	$F8
	.byte	$55
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$58
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$78
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_mosesfallwiggle2left:
	.byte	$08
	.byte	$F8
	.byte	$57
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$77
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_mosesfallwiggle1leftshoot:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$58
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$78
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_mosesfallwiggle2leftshoot:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$77
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_mosesfallwiggle1right:
	.byte	$10
	.byte	$F8
	.byte	$55
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$58
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$65
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$75
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_mosesfallwiggle2right:
	.byte	$10
	.byte	$F8
	.byte	$57
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$56
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$67
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$77
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_mosesfallwiggle1rightshoot:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$58
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$75
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_mosesfallwiggle2rightshoot:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$77
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_palette_bg:
	.byte	$21
	.byte	$10
	.byte	$00
	.byte	$0F
	.byte	$21
	.byte	$0F
	.byte	$1A
	.byte	$2A
	.byte	$21
	.byte	$0F
	.byte	$16
	.byte	$27
	.byte	$21
	.byte	$30
	.byte	$27
	.byte	$2A
_palette_sp:
	.byte	$0F
	.byte	$06
	.byte	$24
	.byte	$36
	.byte	$0F
	.byte	$21
	.byte	$2A
	.byte	$1A
	.byte	$0F
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$0F
	.byte	$21
	.byte	$20
	.byte	$10
_metatiles1:
	.byte	$10
	.byte	$11
	.byte	$20
	.byte	$21
	.byte	$00
	.byte	$12
	.byte	$13
	.byte	$22
	.byte	$23
	.byte	$00
	.byte	$6A
	.byte	$6B
	.byte	$7A
	.byte	$7B
	.byte	$00
	.byte	$6C
	.byte	$6D
	.byte	$7C
	.byte	$7D
	.byte	$00
	.byte	$6E
	.byte	$6F
	.byte	$7E
	.byte	$7F
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$16
	.byte	$15
	.byte	$01
	.byte	$05
	.byte	$07
	.byte	$15
	.byte	$17
	.byte	$01
	.byte	$24
	.byte	$25
	.byte	$5B
	.byte	$5C
	.byte	$02
	.byte	$26
	.byte	$27
	.byte	$5D
	.byte	$5E
	.byte	$02
	.byte	$5E
	.byte	$5B
	.byte	$5B
	.byte	$5C
	.byte	$02
	.byte	$5D
	.byte	$5C
	.byte	$5C
	.byte	$26
	.byte	$02
	.byte	$5C
	.byte	$5B
	.byte	$5B
	.byte	$5C
	.byte	$02
	.byte	$A8
	.byte	$5E
	.byte	$B8
	.byte	$5C
	.byte	$02
	.byte	$5D
	.byte	$A9
	.byte	$5C
	.byte	$B9
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$18
	.byte	$2A
	.byte	$19
	.byte	$2A
	.byte	$01
	.byte	$2B
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$01
	.byte	$0C
	.byte	$19
	.byte	$00
	.byte	$28
	.byte	$01
	.byte	$1D
	.byte	$2D
	.byte	$2D
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$0E
	.byte	$0F
	.byte	$0E
	.byte	$0F
	.byte	$02
	.byte	$A8
	.byte	$A9
	.byte	$B8
	.byte	$B9
	.byte	$02
	.byte	$98
	.byte	$99
	.byte	$A8
	.byte	$A9
	.byte	$02
	.byte	$00
	.byte	$88
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$89
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$2A
	.byte	$2B
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$2C
	.byte	$2A
	.byte	$29
	.byte	$3A
	.byte	$01
	.byte	$2A
	.byte	$2C
	.byte	$29
	.byte	$3C
	.byte	$01
	.byte	$2D
	.byte	$00
	.byte	$3D
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$28
	.byte	$01
	.byte	$19
	.byte	$1A
	.byte	$29
	.byte	$2A
	.byte	$01
	.byte	$1B
	.byte	$1C
	.byte	$2B
	.byte	$2C
	.byte	$01
	.byte	$1B
	.byte	$19
	.byte	$2B
	.byte	$2C
	.byte	$01
	.byte	$2B
	.byte	$1D
	.byte	$2C
	.byte	$2A
	.byte	$01
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$01
	.byte	$2B
	.byte	$1D
	.byte	$1C
	.byte	$2D
	.byte	$01
	.byte	$5F
	.byte	$5F
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$2F
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$2F
	.byte	$1F
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$2F
	.byte	$2F
	.byte	$03
	.byte	$2E
	.byte	$3E
	.byte	$03
	.byte	$2E
	.byte	$01
	.byte	$3E
	.byte	$3E
	.byte	$3E
	.byte	$3E
	.byte	$01
	.byte	$3F
	.byte	$01
	.byte	$3E
	.byte	$3F
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$FB
	.byte	$FB
	.byte	$EF
	.byte	$01
	.byte	$FF
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$EC
	.byte	$FB
	.byte	$EF
	.byte	$01
	.byte	$EE
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$01
	.byte	$ED
	.byte	$E2
	.byte	$FC
	.byte	$FE
	.byte	$01
	.byte	$DA
	.byte	$D9
	.byte	$EB
	.byte	$EB
	.byte	$01
	.byte	$D9
	.byte	$D9
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$C5
	.byte	$C5
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$FE
	.byte	$EA
	.byte	$03
	.byte	$FE
	.byte	$01
	.byte	$EF
	.byte	$EF
	.byte	$EB
	.byte	$FC
	.byte	$01
	.byte	$EA
	.byte	$FC
	.byte	$FC
	.byte	$EB
	.byte	$01
	.byte	$EF
	.byte	$EF
	.byte	$EF
	.byte	$EA
	.byte	$01
	.byte	$FC
	.byte	$03
	.byte	$03
	.byte	$EB
	.byte	$01
	.byte	$03
	.byte	$FE
	.byte	$03
	.byte	$EB
	.byte	$01
	.byte	$EB
	.byte	$FE
	.byte	$FD
	.byte	$EB
	.byte	$01
	.byte	$87
	.byte	$87
	.byte	$97
	.byte	$97
	.byte	$01
	.byte	$03
	.byte	$F0
	.byte	$F0
	.byte	$EF
	.byte	$01
	.byte	$F4
	.byte	$03
	.byte	$FE
	.byte	$F4
	.byte	$01
	.byte	$D9
	.byte	$E5
	.byte	$F0
	.byte	$EF
	.byte	$01
	.byte	$F5
	.byte	$D9
	.byte	$FE
	.byte	$F4
	.byte	$01
	.byte	$C6
	.byte	$C7
	.byte	$D6
	.byte	$D7
	.byte	$01
	.byte	$C8
	.byte	$03
	.byte	$D8
	.byte	$03
	.byte	$01
	.byte	$A6
	.byte	$A7
	.byte	$B6
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$C9
	.byte	$C9
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$C9
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$DE
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$DE
	.byte	$DE
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$DE
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$BE
	.byte	$01
	.byte	$CA
	.byte	$03
	.byte	$03
	.byte	$CA
	.byte	$01
	.byte	$EB
	.byte	$BE
	.byte	$EB
	.byte	$FE
	.byte	$01
	.byte	$CA
	.byte	$CA
	.byte	$EB
	.byte	$03
	.byte	$01
	.byte	$C2
	.byte	$FE
	.byte	$D2
	.byte	$D3
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$D3
	.byte	$D4
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$D3
	.byte	$D3
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$D5
	.byte	$C2
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$B7
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BB
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$CD
	.byte	$CE
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DD
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$CF
	.byte	$CE
	.byte	$DF
	.byte	$00
	.byte	$CB
	.byte	$E2
	.byte	$EB
	.byte	$EB
	.byte	$01
	.byte	$03
	.byte	$E1
	.byte	$F0
	.byte	$EF
	.byte	$01
	.byte	$E3
	.byte	$03
	.byte	$FE
	.byte	$F4
	.byte	$01
	.byte	$F7
	.byte	$FB
	.byte	$FB
	.byte	$EF
	.byte	$01
	.byte	$FF
	.byte	$F7
	.byte	$FE
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$BC
	.byte	$BC
	.byte	$01
	.byte	$D3
	.byte	$D3
	.byte	$EB
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$EB
	.byte	$D3
	.byte	$D3
	.byte	$01
	.byte	$03
	.byte	$FE
	.byte	$D3
	.byte	$D3
	.byte	$01
	.byte	$C3
	.byte	$D2
	.byte	$FE
	.byte	$EB
	.byte	$01
	.byte	$D3
	.byte	$D3
	.byte	$03
	.byte	$FC
	.byte	$01
	.byte	$D5
	.byte	$FE
	.byte	$C3
	.byte	$D2
	.byte	$01
	.byte	$03
	.byte	$FE
	.byte	$D5
	.byte	$03
	.byte	$01
	.byte	$B4
	.byte	$C4
	.byte	$C4
	.byte	$B5
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$8A
	.byte	$8A
	.byte	$01
	.byte	$00
	.byte	$E7
	.byte	$E7
	.byte	$F7
	.byte	$01
	.byte	$F9
	.byte	$F9
	.byte	$F9
	.byte	$F9
	.byte	$01
	.byte	$E9
	.byte	$00
	.byte	$F7
	.byte	$E9
	.byte	$01
	.byte	$F7
	.byte	$E7
	.byte	$E7
	.byte	$F7
	.byte	$01
	.byte	$E8
	.byte	$E8
	.byte	$F7
	.byte	$F7
	.byte	$01
	.byte	$F7
	.byte	$F7
	.byte	$F7
	.byte	$F7
	.byte	$01
	.byte	$E9
	.byte	$F7
	.byte	$F7
	.byte	$E9
	.byte	$01
	.byte	$D9
	.byte	$C5
	.byte	$03
	.byte	$E6
	.byte	$03
	.byte	$C5
	.byte	$C5
	.byte	$F1
	.byte	$F2
	.byte	$03
	.byte	$C5
	.byte	$C5
	.byte	$F1
	.byte	$F8
	.byte	$03
	.byte	$C5
	.byte	$C5
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$F5
	.byte	$C5
	.byte	$03
	.byte	$E4
	.byte	$03
	.byte	$E4
	.byte	$03
	.byte	$03
	.byte	$E4
	.byte	$03
	.byte	$E6
	.byte	$F2
	.byte	$EA
	.byte	$E6
	.byte	$03
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F2
	.byte	$03
	.byte	$F2
	.byte	$F1
	.byte	$F1
	.byte	$F2
	.byte	$03
	.byte	$F2
	.byte	$F2
	.byte	$F3
	.byte	$F2
	.byte	$03
	.byte	$F8
	.byte	$FE
	.byte	$F3
	.byte	$F8
	.byte	$03
	.byte	$EF
	.byte	$EA
	.byte	$EB
	.byte	$EA
	.byte	$03
	.byte	$EA
	.byte	$EA
	.byte	$FC
	.byte	$FE
	.byte	$03
	.byte	$EF
	.byte	$FC
	.byte	$FE
	.byte	$EB
	.byte	$03
	.byte	$EA
	.byte	$EA
	.byte	$EF
	.byte	$EA
	.byte	$03
	.byte	$03
	.byte	$FC
	.byte	$03
	.byte	$EB
	.byte	$03
	.byte	$00
	.byte	$FB
	.byte	$FB
	.byte	$EF
	.byte	$02
	.byte	$FF
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$02
	.byte	$00
	.byte	$EC
	.byte	$FB
	.byte	$EF
	.byte	$02
	.byte	$EE
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$02
	.byte	$ED
	.byte	$E2
	.byte	$03
	.byte	$FE
	.byte	$02
	.byte	$E2
	.byte	$ED
	.byte	$EF
	.byte	$EF
	.byte	$02
	.byte	$DA
	.byte	$ED
	.byte	$EF
	.byte	$FC
	.byte	$02
	.byte	$FC
	.byte	$EF
	.byte	$FD
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$FE
	.byte	$03
	.byte	$EB
	.byte	$02
	.byte	$FC
	.byte	$EF
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$E7
	.byte	$E7
	.byte	$F7
	.byte	$02
	.byte	$E8
	.byte	$E8
	.byte	$F7
	.byte	$F9
	.byte	$02
	.byte	$F7
	.byte	$F7
	.byte	$F7
	.byte	$00
	.byte	$02
	.byte	$E9
	.byte	$00
	.byte	$F9
	.byte	$E9
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$F1
	.byte	$F1
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$F3
	.byte	$F3
	.byte	$03
	.byte	$EF
	.byte	$F0
	.byte	$F0
	.byte	$EF
	.byte	$02
	.byte	$F4
	.byte	$FE
	.byte	$FE
	.byte	$F4
	.byte	$02
	.byte	$EF
	.byte	$E1
	.byte	$F0
	.byte	$EF
	.byte	$02
	.byte	$E3
	.byte	$EA
	.byte	$FE
	.byte	$F4
	.byte	$02
	.byte	$EA
	.byte	$FC
	.byte	$FC
	.byte	$EB
	.byte	$02
	.byte	$EF
	.byte	$EF
	.byte	$EB
	.byte	$EF
	.byte	$02
	.byte	$FC
	.byte	$03
	.byte	$FE
	.byte	$FE
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$EB
	.byte	$FC
	.byte	$02
	.byte	$F3
	.byte	$E0
	.byte	$E0
	.byte	$FC
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$DB
	.byte	$DC
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$CA
	.byte	$02
	.byte	$C9
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$F9
	.byte	$F9
	.byte	$00
	.byte	$F9
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$8A
	.byte	$8A
	.byte	$02
	.byte	$F1
	.byte	$02
	.byte	$F1
	.byte	$F3
	.byte	$03
	.byte	$02
	.byte	$F1
	.byte	$F1
	.byte	$F2
	.byte	$03
	.byte	$EB
	.byte	$03
	.byte	$9A
	.byte	$9B
	.byte	$01
	.byte	$FE
	.byte	$EB
	.byte	$9C
	.byte	$AD
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$AD
	.byte	$9E
	.byte	$01
	.byte	$EB
	.byte	$03
	.byte	$9E
	.byte	$9D
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$9B
	.byte	$AD
	.byte	$01
	.byte	$03
	.byte	$AB
	.byte	$03
	.byte	$AC
	.byte	$01
	.byte	$AE
	.byte	$03
	.byte	$AF
	.byte	$03
	.byte	$01
	.byte	$C0
	.byte	$C1
	.byte	$D0
	.byte	$D1
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$C0
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$C0
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$BF
	.byte	$BF
	.byte	$01
	.byte	$02
	.byte	$AA
	.byte	$02
	.byte	$BA
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$EB
	.byte	$F6
	.byte	$F6
	.byte	$00
	.byte	$01
	.byte	$D5
	.byte	$C2
	.byte	$00
	.byte	$FA
	.byte	$01
	.byte	$70
	.byte	$00
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$00
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$90
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$61
	.byte	$62
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$60
	.byte	$61
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$C3
	.byte	$00
	.byte	$FE
	.byte	$C3
	.byte	$01
	.byte	$00
	.byte	$8A
	.byte	$B5
	.byte	$B5
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$66
	.byte	$67
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$67
	.byte	$66
	.byte	$00
	.byte	$66
	.byte	$67
	.byte	$76
	.byte	$77
	.byte	$00
	.byte	$68
	.byte	$69
	.byte	$78
	.byte	$79
	.byte	$00
	.byte	$78
	.byte	$79
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$79
	.byte	$78
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$A3
	.byte	$A2
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$B3
	.byte	$00
	.byte	$03
	.byte	$A3
	.byte	$B2
	.byte	$B3
	.byte	$00
	.byte	$A3
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$A2
	.byte	$B3
	.byte	$03
	.byte	$B3
	.byte	$00
	.byte	$03
	.byte	$A2
	.byte	$A2
	.byte	$03
	.byte	$00
	.byte	$A2
	.byte	$A3
	.byte	$B2
	.byte	$B3
	.byte	$00
	.byte	$84
	.byte	$85
	.byte	$94
	.byte	$95
	.byte	$02
	.byte	$83
	.byte	$01
	.byte	$93
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$86
	.byte	$01
	.byte	$96
	.byte	$02
	.byte	$74
	.byte	$75
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$A4
	.byte	$A5
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$A5
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$96
	.byte	$02
	.byte	$01
	.byte	$75
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
_busylevel_0:
	.byte	$00
	.byte	$C3
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$C3
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$C2
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$C3
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$C3
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$C0
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$79
	.byte	$7D
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$78
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$79
	.byte	$7E
	.byte	$7F
	.byte	$7E
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$44
	.byte	$44
	.byte	$46
	.byte	$46
	.byte	$47
	.byte	$47
	.byte	$47
	.byte	$46
	.byte	$45
	.byte	$08
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$60
	.byte	$61
	.byte	$72
	.byte	$63
	.byte	$8F
	.byte	$57
	.byte	$4F
	.byte	$13
	.byte	$13
	.byte	$0C
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$4D
	.byte	$A9
	.byte	$4C
	.byte	$73
	.byte	$70
	.byte	$70
	.byte	$74
	.byte	$75
	.byte	$77
	.byte	$0B
	.byte	$0C
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$13
	.byte	$B0
	.byte	$B1
	.byte	$B1
	.byte	$B4
	.byte	$0C
	.byte	$0C
	.byte	$0B
	.byte	$09
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$B8
	.byte	$BB
	.byte	$B8
	.byte	$0C
	.byte	$0B
	.byte	$0C
	.byte	$0B
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$02
	.byte	$08
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0B
	.byte	$0C
	.byte	$0B
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$09
	.byte	$0C
	.byte	$09
	.byte	$0C
	.byte	$09
_busylevel_1:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$78
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$79
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7B
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$7D
	.byte	$7D
	.byte	$7B
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$79
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7B
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7B
	.byte	$10
	.byte	$79
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7B
	.byte	$10
	.byte	$66
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$47
	.byte	$47
	.byte	$45
	.byte	$45
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$46
	.byte	$47
	.byte	$46
	.byte	$45
	.byte	$5A
	.byte	$13
	.byte	$13
	.byte	$6B
	.byte	$44
	.byte	$44
	.byte	$6C
	.byte	$13
	.byte	$13
	.byte	$59
	.byte	$13
	.byte	$5F
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$4F
	.byte	$70
	.byte	$74
	.byte	$75
	.byte	$63
	.byte	$5D
	.byte	$13
	.byte	$54
	.byte	$55
	.byte	$4C
	.byte	$77
	.byte	$74
	.byte	$70
	.byte	$75
	.byte	$76
	.byte	$83
	.byte	$83
	.byte	$13
	.byte	$4F
	.byte	$13
	.byte	$73
	.byte	$75
	.byte	$61
	.byte	$61
	.byte	$62
	.byte	$77
	.byte	$56
	.byte	$13
	.byte	$8F
	.byte	$59
	.byte	$73
	.byte	$75
	.byte	$63
	.byte	$B6
	.byte	$B0
	.byte	$B4
	.byte	$B3
	.byte	$B4
	.byte	$B1
	.byte	$B2
	.byte	$B4
	.byte	$B3
	.byte	$B3
	.byte	$B1
	.byte	$B4
	.byte	$B3
	.byte	$B4
	.byte	$13
	.byte	$73
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$09
	.byte	$09
_busylevel_2:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$10
	.byte	$10
	.byte	$68
	.byte	$69
	.byte	$64
	.byte	$64
	.byte	$66
	.byte	$67
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$10
	.byte	$42
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$43
	.byte	$10
	.byte	$44
	.byte	$45
	.byte	$47
	.byte	$47
	.byte	$6A
	.byte	$44
	.byte	$45
	.byte	$45
	.byte	$46
	.byte	$52
	.byte	$4B
	.byte	$4A
	.byte	$13
	.byte	$4D
	.byte	$48
	.byte	$53
	.byte	$13
	.byte	$56
	.byte	$13
	.byte	$85
	.byte	$13
	.byte	$4F
	.byte	$13
	.byte	$56
	.byte	$13
	.byte	$56
	.byte	$48
	.byte	$5F
	.byte	$4C
	.byte	$4C
	.byte	$4A
	.byte	$4A
	.byte	$80
	.byte	$81
	.byte	$81
	.byte	$82
	.byte	$84
	.byte	$80
	.byte	$81
	.byte	$81
	.byte	$81
	.byte	$81
	.byte	$82
	.byte	$80
	.byte	$81
	.byte	$81
	.byte	$82
	.byte	$85
	.byte	$13
	.byte	$86
	.byte	$88
	.byte	$87
	.byte	$8A
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$87
	.byte	$87
	.byte	$8A
	.byte	$86
	.byte	$87
	.byte	$87
	.byte	$8A
	.byte	$75
	.byte	$71
	.byte	$71
	.byte	$63
	.byte	$13
	.byte	$B0
	.byte	$B2
	.byte	$B4
	.byte	$B1
	.byte	$B1
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$A9
	.byte	$A9
	.byte	$13
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$08
_busylevel_3:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$64
	.byte	$6F
	.byte	$10
	.byte	$65
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$64
	.byte	$10
	.byte	$42
	.byte	$44
	.byte	$45
	.byte	$44
	.byte	$44
	.byte	$43
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$42
	.byte	$44
	.byte	$45
	.byte	$52
	.byte	$4B
	.byte	$4B
	.byte	$4D
	.byte	$4C
	.byte	$4C
	.byte	$49
	.byte	$41
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$40
	.byte	$4A
	.byte	$4C
	.byte	$50
	.byte	$4B
	.byte	$4B
	.byte	$4C
	.byte	$4E
	.byte	$5A
	.byte	$13
	.byte	$4D
	.byte	$49
	.byte	$41
	.byte	$10
	.byte	$10
	.byte	$40
	.byte	$4A
	.byte	$4B
	.byte	$49
	.byte	$4A
	.byte	$13
	.byte	$48
	.byte	$45
	.byte	$6A
	.byte	$45
	.byte	$4A
	.byte	$4D
	.byte	$4D
	.byte	$49
	.byte	$41
	.byte	$52
	.byte	$4B
	.byte	$4B
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4C
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$48
	.byte	$49
	.byte	$49
	.byte	$49
	.byte	$48
	.byte	$4C
	.byte	$5E
	.byte	$4D
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$4A
	.byte	$49
	.byte	$5D
	.byte	$4F
	.byte	$4B
	.byte	$4C
	.byte	$4A
	.byte	$48
	.byte	$4B
	.byte	$4C
	.byte	$13
	.byte	$8F
	.byte	$13
	.byte	$4D
	.byte	$4A
	.byte	$4B
	.byte	$4B
	.byte	$4A
	.byte	$85
	.byte	$5D
	.byte	$4C
	.byte	$4A
	.byte	$4C
	.byte	$49
	.byte	$49
	.byte	$49
	.byte	$4B
	.byte	$4B
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$4C
	.byte	$56
	.byte	$13
	.byte	$13
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$83
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
_busylevel_4:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$29
	.byte	$1A
	.byte	$2A
	.byte	$2B
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$39
	.byte	$2B
	.byte	$2A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$1C
	.byte	$2A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$23
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$79
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$79
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$79
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$10
	.byte	$78
	.byte	$78
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$79
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$06
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$53
	.byte	$46
	.byte	$45
	.byte	$45
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$44
	.byte	$45
	.byte	$44
	.byte	$06
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$4A
	.byte	$4F
	.byte	$58
	.byte	$54
	.byte	$55
	.byte	$5A
	.byte	$5D
	.byte	$4C
	.byte	$06
	.byte	$05
	.byte	$09
	.byte	$0B
	.byte	$0A
	.byte	$03
	.byte	$02
	.byte	$0C
	.byte	$4F
	.byte	$4C
	.byte	$56
	.byte	$57
	.byte	$4C
	.byte	$4C
	.byte	$06
	.byte	$05
	.byte	$09
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$02
	.byte	$0A
	.byte	$0A
	.byte	$5A
	.byte	$4C
	.byte	$4C
	.byte	$4C
	.byte	$4D
	.byte	$06
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$03
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0A
	.byte	$85
	.byte	$59
	.byte	$06
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0C
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0A
	.byte	$05
	.byte	$07
	.byte	$0A
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0C
	.byte	$04
	.byte	$09
	.byte	$09
	.byte	$0B
	.byte	$0B
	.byte	$0A
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0A
	.byte	$0B
	.byte	$0B
	.byte	$0C
	.byte	$0A
	.byte	$0A
	.byte	$01
_busylevel_5:
	.byte	$2D
	.byte	$2B
	.byte	$2B
	.byte	$2F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$2B
	.byte	$27
	.byte	$2B
	.byte	$2E
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$26
	.byte	$27
	.byte	$1D
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$22
	.byte	$24
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$21
	.byte	$7B
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$40
	.byte	$21
	.byte	$7E
	.byte	$7B
	.byte	$10
	.byte	$C2
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$40
	.byte	$4B
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$C3
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$40
	.byte	$4B
	.byte	$4B
	.byte	$09
	.byte	$04
	.byte	$09
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$45
	.byte	$52
	.byte	$4A
	.byte	$49
	.byte	$4F
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$48
	.byte	$4B
	.byte	$4C
	.byte	$13
	.byte	$5A
	.byte	$4A
	.byte	$13
	.byte	$03
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$4D
	.byte	$4F
	.byte	$49
	.byte	$09
	.byte	$03
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$4C
	.byte	$4C
	.byte	$4D
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$13
	.byte	$4C
	.byte	$0B
	.byte	$0C
	.byte	$0A
	.byte	$01
	.byte	$03
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$0A
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$00
_busylevel_6:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$64
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$10
	.byte	$6F
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$42
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$43
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$40
	.byte	$4B
	.byte	$4B
	.byte	$4A
	.byte	$49
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$48
	.byte	$48
	.byte	$41
	.byte	$79
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$4B
	.byte	$4B
	.byte	$4B
	.byte	$49
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$13
	.byte	$4D
	.byte	$49
	.byte	$48
	.byte	$6E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$4B
	.byte	$4B
	.byte	$4A
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$4E
	.byte	$13
	.byte	$5B
	.byte	$4C
	.byte	$13
	.byte	$48
	.byte	$6E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$4B
	.byte	$49
	.byte	$4A
	.byte	$49
	.byte	$13
	.byte	$6B
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$6C
	.byte	$4D
	.byte	$4D
	.byte	$48
	.byte	$6E
	.byte	$7E
	.byte	$7E
	.byte	$4C
	.byte	$4C
	.byte	$4A
	.byte	$13
	.byte	$4D
	.byte	$13
	.byte	$4C
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$48
	.byte	$48
	.byte	$53
	.byte	$45
	.byte	$4A
	.byte	$4C
	.byte	$4A
	.byte	$13
	.byte	$4A
	.byte	$4A
	.byte	$4D
	.byte	$4C
	.byte	$4D
	.byte	$4D
	.byte	$48
	.byte	$4B
	.byte	$4A
	.byte	$4F
	.byte	$48
	.byte	$51
	.byte	$49
	.byte	$56
	.byte	$4A
	.byte	$4C
	.byte	$4C
	.byte	$4C
	.byte	$13
	.byte	$4D
	.byte	$4C
	.byte	$4C
	.byte	$4C
	.byte	$4F
	.byte	$4C
	.byte	$48
	.byte	$49
	.byte	$49
	.byte	$4F
	.byte	$49
	.byte	$4F
	.byte	$4B
	.byte	$4A
	.byte	$4F
	.byte	$13
	.byte	$4D
	.byte	$8F
	.byte	$4F
	.byte	$13
	.byte	$49
	.byte	$4A
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$4C
	.byte	$13
	.byte	$8F
	.byte	$4A
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$49
	.byte	$4A
	.byte	$4A
	.byte	$4A
	.byte	$49
	.byte	$4A
	.byte	$13
	.byte	$13
	.byte	$A9
	.byte	$4C
	.byte	$4C
	.byte	$13
	.byte	$13
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$4C
	.byte	$13
	.byte	$4D
	.byte	$13
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$13
	.byte	$4C
	.byte	$4C
	.byte	$48
	.byte	$49
	.byte	$49
	.byte	$4A
	.byte	$13
	.byte	$4D
	.byte	$13
	.byte	$13
	.byte	$01
	.byte	$00
	.byte	$02
_busylevel_7:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$79
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7D
	.byte	$7B
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$10
	.byte	$10
	.byte	$79
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7B
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$7D
	.byte	$7B
	.byte	$79
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7B
	.byte	$10
	.byte	$10
	.byte	$7E
	.byte	$7E
	.byte	$7F
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7B
	.byte	$64
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7F
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$6D
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$46
	.byte	$44
	.byte	$44
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$7F
	.byte	$7E
	.byte	$7E
	.byte	$7E
	.byte	$6D
	.byte	$4B
	.byte	$4B
	.byte	$4A
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$52
	.byte	$4B
	.byte	$4A
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$8F
	.byte	$49
	.byte	$13
	.byte	$54
	.byte	$55
	.byte	$4F
	.byte	$4F
	.byte	$48
	.byte	$49
	.byte	$4B
	.byte	$49
	.byte	$13
	.byte	$4C
	.byte	$4C
	.byte	$13
	.byte	$51
	.byte	$48
	.byte	$13
	.byte	$6B
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$6C
	.byte	$48
	.byte	$4B
	.byte	$4C
	.byte	$13
	.byte	$48
	.byte	$13
	.byte	$13
	.byte	$50
	.byte	$4A
	.byte	$4C
	.byte	$4C
	.byte	$4C
	.byte	$13
	.byte	$4C
	.byte	$4C
	.byte	$48
	.byte	$51
	.byte	$13
	.byte	$48
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$13
	.byte	$4D
	.byte	$4D
	.byte	$13
	.byte	$4D
	.byte	$4C
	.byte	$4D
	.byte	$A9
	.byte	$13
	.byte	$4C
	.byte	$4C
	.byte	$4C
	.byte	$4C
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$4C
	.byte	$13
	.byte	$4C
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$4C
	.byte	$13
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$4C
	.byte	$4D
	.byte	$48
	.byte	$4B
	.byte	$4B
	.byte	$4B
	.byte	$4A
	.byte	$01
_busylevel_8:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$AD
	.byte	$AD
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$C1
	.byte	$03
	.byte	$20
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$C0
	.byte	$92
	.byte	$95
	.byte	$94
	.byte	$96
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$31
	.byte	$20
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$90
	.byte	$A4
	.byte	$A5
	.byte	$99
	.byte	$A0
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$20
	.byte	$10
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$90
	.byte	$A4
	.byte	$A5
	.byte	$97
	.byte	$A0
	.byte	$A4
	.byte	$43
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$20
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$90
	.byte	$A5
	.byte	$A5
	.byte	$96
	.byte	$94
	.byte	$A5
	.byte	$A5
	.byte	$4B
	.byte	$41
	.byte	$10
	.byte	$78
	.byte	$20
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$90
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A7
	.byte	$9E
	.byte	$98
	.byte	$48
	.byte	$4B
	.byte	$53
	.byte	$45
	.byte	$20
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$86
	.byte	$A4
	.byte	$AF
	.byte	$A5
	.byte	$A6
	.byte	$AA
	.byte	$A5
	.byte	$A6
	.byte	$4D
	.byte	$4B
	.byte	$49
	.byte	$8F
	.byte	$20
	.byte	$5E
	.byte	$8D
	.byte	$8F
	.byte	$8E
	.byte	$86
	.byte	$87
	.byte	$AF
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A5
	.byte	$4B
	.byte	$4B
	.byte	$4A
	.byte	$4D
	.byte	$20
	.byte	$8F
	.byte	$8F
	.byte	$5C
	.byte	$8E
	.byte	$8E
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$AF
	.byte	$87
	.byte	$A6
	.byte	$4A
	.byte	$4A
	.byte	$8F
	.byte	$58
	.byte	$20
	.byte	$8F
	.byte	$5D
	.byte	$8F
	.byte	$8D
	.byte	$8B
	.byte	$8E
	.byte	$8E
	.byte	$86
	.byte	$87
	.byte	$87
	.byte	$87
	.byte	$13
	.byte	$4C
	.byte	$58
	.byte	$8F
	.byte	$20
	.byte	$8D
	.byte	$A9
	.byte	$8D
	.byte	$8F
	.byte	$5E
	.byte	$8B
	.byte	$8E
	.byte	$8E
	.byte	$8E
	.byte	$8E
	.byte	$8B
	.byte	$13
	.byte	$4C
	.byte	$4D
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$8F
	.byte	$8F
	.byte	$8E
	.byte	$02
	.byte	$04
	.byte	$4C
	.byte	$13
	.byte	$4C
	.byte	$48
	.byte	$4B
	.byte	$4B
	.byte	$4B
	.byte	$4B
	.byte	$4B
	.byte	$4B
	.byte	$4A
	.byte	$8F
	.byte	$13
	.byte	$8F
	.byte	$8B
	.byte	$0E
_busylevel_9:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$65
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$96
	.byte	$96
	.byte	$93
	.byte	$65
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$9A
	.byte	$9B
	.byte	$9B
	.byte	$9D
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$95
	.byte	$95
	.byte	$95
	.byte	$96
	.byte	$93
	.byte	$10
	.byte	$10
	.byte	$9A
	.byte	$9C
	.byte	$9C
	.byte	$AC
	.byte	$AC
	.byte	$9D
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$A5
	.byte	$A4
	.byte	$99
	.byte	$98
	.byte	$91
	.byte	$9A
	.byte	$9C
	.byte	$9C
	.byte	$9C
	.byte	$AC
	.byte	$AC
	.byte	$AC
	.byte	$9D
	.byte	$10
	.byte	$10
	.byte	$A5
	.byte	$A4
	.byte	$98
	.byte	$98
	.byte	$99
	.byte	$98
	.byte	$91
	.byte	$9C
	.byte	$9C
	.byte	$9C
	.byte	$9C
	.byte	$AC
	.byte	$AC
	.byte	$AC
	.byte	$9D
	.byte	$9A
	.byte	$14
	.byte	$98
	.byte	$99
	.byte	$14
	.byte	$99
	.byte	$98
	.byte	$98
	.byte	$93
	.byte	$9C
	.byte	$9C
	.byte	$9C
	.byte	$9C
	.byte	$AC
	.byte	$AC
	.byte	$AC
	.byte	$9D
	.byte	$A7
	.byte	$A7
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$98
	.byte	$A4
	.byte	$98
	.byte	$95
	.byte	$95
	.byte	$96
	.byte	$94
	.byte	$94
	.byte	$94
	.byte	$94
	.byte	$95
	.byte	$A5
	.byte	$A5
	.byte	$9E
	.byte	$AB
	.byte	$A7
	.byte	$A4
	.byte	$14
	.byte	$98
	.byte	$A5
	.byte	$A4
	.byte	$98
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$98
	.byte	$14
	.byte	$A7
	.byte	$14
	.byte	$A5
	.byte	$A5
	.byte	$A4
	.byte	$98
	.byte	$14
	.byte	$9F
	.byte	$14
	.byte	$A5
	.byte	$14
	.byte	$14
	.byte	$A7
	.byte	$14
	.byte	$14
	.byte	$A7
	.byte	$87
	.byte	$A5
	.byte	$A4
	.byte	$A5
	.byte	$A4
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A6
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$99
	.byte	$14
	.byte	$8E
	.byte	$86
	.byte	$87
	.byte	$87
	.byte	$87
	.byte	$A5
	.byte	$98
	.byte	$99
	.byte	$99
	.byte	$A5
	.byte	$9E
	.byte	$A5
	.byte	$9E
	.byte	$A5
	.byte	$14
	.byte	$9E
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$8B
	.byte	$86
	.byte	$9F
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$09
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$8E
	.byte	$8E
	.byte	$8D
	.byte	$8B
	.byte	$8B
	.byte	$01
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$0A
	.byte	$03
	.byte	$0A
	.byte	$0C
	.byte	$0A
	.byte	$0C
	.byte	$01
_busylevel_10:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$9A
	.byte	$9B
	.byte	$9B
	.byte	$9B
	.byte	$9B
	.byte	$9D
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$9C
	.byte	$9C
	.byte	$9C
	.byte	$9C
	.byte	$AC
	.byte	$AC
	.byte	$9D
	.byte	$10
	.byte	$10
	.byte	$65
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$9C
	.byte	$9C
	.byte	$9C
	.byte	$9C
	.byte	$AC
	.byte	$AC
	.byte	$AC
	.byte	$9D
	.byte	$92
	.byte	$96
	.byte	$94
	.byte	$94
	.byte	$93
	.byte	$AD
	.byte	$10
	.byte	$AD
	.byte	$96
	.byte	$96
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$94
	.byte	$94
	.byte	$94
	.byte	$A4
	.byte	$A6
	.byte	$A7
	.byte	$14
	.byte	$A7
	.byte	$94
	.byte	$95
	.byte	$94
	.byte	$9E
	.byte	$AB
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$AA
	.byte	$A5
	.byte	$A6
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$99
	.byte	$A7
	.byte	$14
	.byte	$A7
	.byte	$A7
	.byte	$14
	.byte	$9F
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$A7
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$99
	.byte	$99
	.byte	$14
	.byte	$14
	.byte	$A5
	.byte	$AA
	.byte	$14
	.byte	$AA
	.byte	$99
	.byte	$14
	.byte	$A7
	.byte	$14
	.byte	$14
	.byte	$9E
	.byte	$0D
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$0E
	.byte	$14
	.byte	$14
	.byte	$A5
	.byte	$9E
	.byte	$14
	.byte	$9E
	.byte	$14
	.byte	$0D
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$0C
	.byte	$0A
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0C
	.byte	$0A
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$0A
	.byte	$0A
	.byte	$0C
	.byte	$0C
	.byte	$0A
	.byte	$0C
	.byte	$0A
	.byte	$01
_busylevel_11:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$9A
	.byte	$9B
	.byte	$9B
	.byte	$9D
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$AD
	.byte	$AD
	.byte	$AD
	.byte	$10
	.byte	$10
	.byte	$92
	.byte	$95
	.byte	$94
	.byte	$94
	.byte	$95
	.byte	$95
	.byte	$94
	.byte	$94
	.byte	$95
	.byte	$95
	.byte	$96
	.byte	$94
	.byte	$94
	.byte	$94
	.byte	$96
	.byte	$94
	.byte	$A4
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$A7
	.byte	$14
	.byte	$14
	.byte	$A7
	.byte	$14
	.byte	$A5
	.byte	$9E
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$A7
	.byte	$A7
	.byte	$14
	.byte	$14
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$A7
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$AB
	.byte	$A7
	.byte	$9F
	.byte	$AF
	.byte	$A6
	.byte	$9E
	.byte	$14
	.byte	$A7
	.byte	$A7
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$A5
	.byte	$14
	.byte	$A7
	.byte	$14
	.byte	$9F
	.byte	$89
	.byte	$89
	.byte	$A8
	.byte	$14
	.byte	$14
	.byte	$AA
	.byte	$14
	.byte	$A7
	.byte	$A5
	.byte	$A7
	.byte	$A5
	.byte	$A4
	.byte	$A7
	.byte	$9F
	.byte	$89
	.byte	$A8
	.byte	$8E
	.byte	$8E
	.byte	$8E
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$A7
	.byte	$A5
	.byte	$A5
	.byte	$A5
	.byte	$A7
	.byte	$14
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$05
	.byte	$0F
	.byte	$05
	.byte	$0F
	.byte	$0A
	.byte	$0A
	.byte	$0E
	.byte	$A5
	.byte	$A5
	.byte	$14
	.byte	$A5
	.byte	$A5
	.byte	$0D
	.byte	$0A
	.byte	$08
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$08
	.byte	$01
_busylevel_12:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$33
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$65
	.byte	$10
	.byte	$AD
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$94
	.byte	$94
	.byte	$94
	.byte	$95
	.byte	$93
	.byte	$10
	.byte	$64
	.byte	$6F
	.byte	$6F
	.byte	$10
	.byte	$78
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$14
	.byte	$14
	.byte	$A7
	.byte	$98
	.byte	$A8
	.byte	$45
	.byte	$44
	.byte	$45
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$45
	.byte	$46
	.byte	$A7
	.byte	$98
	.byte	$AF
	.byte	$A8
	.byte	$8D
	.byte	$8F
	.byte	$5F
	.byte	$8F
	.byte	$58
	.byte	$4D
	.byte	$4A
	.byte	$58
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$4C
	.byte	$89
	.byte	$89
	.byte	$A8
	.byte	$8D
	.byte	$8F
	.byte	$58
	.byte	$54
	.byte	$55
	.byte	$8F
	.byte	$5A
	.byte	$13
	.byte	$4C
	.byte	$13
	.byte	$13
	.byte	$13
	.byte	$49
	.byte	$8E
	.byte	$8E
	.byte	$8D
	.byte	$B3
	.byte	$B2
	.byte	$B3
	.byte	$B2
	.byte	$B4
	.byte	$B4
	.byte	$B2
	.byte	$B4
	.byte	$13
	.byte	$5A
	.byte	$13
	.byte	$4C
	.byte	$13
	.byte	$8C
	.byte	$8D
	.byte	$B5
	.byte	$12
	.byte	$BA
	.byte	$BA
	.byte	$12
	.byte	$BB
	.byte	$B8
	.byte	$B7
	.byte	$B9
	.byte	$B6
	.byte	$13
	.byte	$4C
	.byte	$13
	.byte	$A9
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$0A
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$08
	.byte	$0B
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$08
	.byte	$0B
	.byte	$0A
_busylevel_13:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$1C
	.byte	$2B
	.byte	$27
	.byte	$2A
	.byte	$26
	.byte	$2B
	.byte	$26
	.byte	$2E
	.byte	$1A
	.byte	$26
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$29
	.byte	$2A
	.byte	$2A
	.byte	$2C
	.byte	$2C
	.byte	$26
	.byte	$2D
	.byte	$1B
	.byte	$2B
	.byte	$26
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$3A
	.byte	$1C
	.byte	$26
	.byte	$26
	.byte	$2D
	.byte	$2A
	.byte	$27
	.byte	$2F
	.byte	$39
	.byte	$25
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$29
	.byte	$2C
	.byte	$2D
	.byte	$2B
	.byte	$2C
	.byte	$26
	.byte	$1D
	.byte	$3A
	.byte	$23
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$3A
	.byte	$1C
	.byte	$27
	.byte	$27
	.byte	$27
	.byte	$1D
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$3A
	.byte	$23
	.byte	$22
	.byte	$24
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$32
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$68
	.byte	$10
	.byte	$64
	.byte	$10
	.byte	$78
	.byte	$10
	.byte	$78
	.byte	$21
	.byte	$64
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$47
	.byte	$46
	.byte	$45
	.byte	$6A
	.byte	$47
	.byte	$45
	.byte	$45
	.byte	$46
	.byte	$45
	.byte	$46
	.byte	$21
	.byte	$45
	.byte	$45
	.byte	$44
	.byte	$46
	.byte	$47
	.byte	$13
	.byte	$4C
	.byte	$58
	.byte	$13
	.byte	$4F
	.byte	$13
	.byte	$4C
	.byte	$13
	.byte	$4F
	.byte	$4C
	.byte	$21
	.byte	$58
	.byte	$4C
	.byte	$13
	.byte	$56
	.byte	$4D
	.byte	$13
	.byte	$4F
	.byte	$BE
	.byte	$BF
	.byte	$5C
	.byte	$4C
	.byte	$4F
	.byte	$4D
	.byte	$4C
	.byte	$13
	.byte	$21
	.byte	$13
	.byte	$59
	.byte	$13
	.byte	$4C
	.byte	$57
	.byte	$4C
	.byte	$5D
	.byte	$CE
	.byte	$CF
	.byte	$74
	.byte	$70
	.byte	$70
	.byte	$74
	.byte	$70
	.byte	$75
	.byte	$21
	.byte	$77
	.byte	$70
	.byte	$70
	.byte	$75
	.byte	$72
	.byte	$A9
	.byte	$13
	.byte	$A9
	.byte	$4C
	.byte	$13
	.byte	$4C
	.byte	$A9
	.byte	$A9
	.byte	$13
	.byte	$4D
	.byte	$21
	.byte	$4C
	.byte	$13
	.byte	$56
	.byte	$4C
	.byte	$13
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$0B
	.byte	$08
	.byte	$0A
	.byte	$08
	.byte	$0B
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$0A
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$08
	.byte	$0B
	.byte	$0A
_busylevel_14:
	.byte	$2B
	.byte	$26
	.byte	$2B
	.byte	$27
	.byte	$1A
	.byte	$2B
	.byte	$2E
	.byte	$1A
	.byte	$2A
	.byte	$26
	.byte	$2E
	.byte	$1C
	.byte	$2B
	.byte	$2C
	.byte	$2A
	.byte	$2A
	.byte	$2B
	.byte	$2B
	.byte	$26
	.byte	$2B
	.byte	$26
	.byte	$25
	.byte	$26
	.byte	$2B
	.byte	$27
	.byte	$26
	.byte	$2C
	.byte	$2E
	.byte	$1C
	.byte	$2A
	.byte	$25
	.byte	$25
	.byte	$26
	.byte	$26
	.byte	$27
	.byte	$2B
	.byte	$2B
	.byte	$27
	.byte	$26
	.byte	$2A
	.byte	$2A
	.byte	$1A
	.byte	$26
	.byte	$2F
	.byte	$3A
	.byte	$23
	.byte	$22
	.byte	$24
	.byte	$22
	.byte	$24
	.byte	$1C
	.byte	$26
	.byte	$26
	.byte	$2E
	.byte	$1A
	.byte	$27
	.byte	$2A
	.byte	$2C
	.byte	$2B
	.byte	$1D
	.byte	$10
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$3A
	.byte	$23
	.byte	$21
	.byte	$24
	.byte	$1C
	.byte	$25
	.byte	$2C
	.byte	$25
	.byte	$1D
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$21
	.byte	$34
	.byte	$33
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$3A
	.byte	$23
	.byte	$22
	.byte	$24
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$21
	.byte	$78
	.byte	$10
	.byte	$10
	.byte	$21
	.byte	$10
	.byte	$65
	.byte	$6F
	.byte	$21
	.byte	$10
	.byte	$10
	.byte	$78
	.byte	$64
	.byte	$10
	.byte	$21
	.byte	$C2
	.byte	$21
	.byte	$46
	.byte	$46
	.byte	$45
	.byte	$21
	.byte	$46
	.byte	$45
	.byte	$44
	.byte	$21
	.byte	$45
	.byte	$44
	.byte	$45
	.byte	$44
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$21
	.byte	$4D
	.byte	$4D
	.byte	$4C
	.byte	$21
	.byte	$4F
	.byte	$56
	.byte	$4F
	.byte	$21
	.byte	$5D
	.byte	$77
	.byte	$70
	.byte	$60
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$21
	.byte	$4C
	.byte	$5C
	.byte	$59
	.byte	$21
	.byte	$70
	.byte	$70
	.byte	$75
	.byte	$21
	.byte	$77
	.byte	$4F
	.byte	$4C
	.byte	$4F
	.byte	$13
	.byte	$21
	.byte	$4D
	.byte	$21
	.byte	$72
	.byte	$72
	.byte	$77
	.byte	$21
	.byte	$5F
	.byte	$59
	.byte	$4F
	.byte	$21
	.byte	$5C
	.byte	$13
	.byte	$13
	.byte	$4C
	.byte	$4C
	.byte	$21
	.byte	$5D
	.byte	$21
	.byte	$4C
	.byte	$4C
	.byte	$4C
	.byte	$21
	.byte	$A9
	.byte	$4D
	.byte	$13
	.byte	$21
	.byte	$13
	.byte	$A9
	.byte	$A9
	.byte	$4C
	.byte	$5D
	.byte	$21
	.byte	$4C
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$0B
	.byte	$09
	.byte	$09
	.byte	$08
	.byte	$08
	.byte	$0A
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$08
	.byte	$0A
	.byte	$09
	.byte	$0A
	.byte	$09
	.byte	$0B
	.byte	$01
_busylevel_15:
	.byte	$2C
	.byte	$2A
	.byte	$2F
	.byte	$C4
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$2D
	.byte	$1D
	.byte	$C4
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$D6
	.byte	$3D
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$D8
	.byte	$11
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$C4
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$D8
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DD
	.byte	$C4
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$D9
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$D6
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$E4
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$DA
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$E2
	.byte	$E0
	.byte	$E1
	.byte	$35
	.byte	$36
	.byte	$36
	.byte	$36
	.byte	$36
	.byte	$37
	.byte	$D7
	.byte	$D7
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$E3
	.byte	$11
	.byte	$4C
	.byte	$35
	.byte	$36
	.byte	$36
	.byte	$36
	.byte	$36
	.byte	$37
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$56
	.byte	$5D
	.byte	$35
	.byte	$36
	.byte	$36
	.byte	$36
	.byte	$36
	.byte	$37
	.byte	$11
	.byte	$D3
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$02
	.byte	$09
	.byte	$04
	.byte	$0B
	.byte	$01
	.byte	$09
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$0A
	.byte	$04
_busylevel_16:
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DE
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DE
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DE
	.byte	$DA
	.byte	$DD
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DD
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$D3
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$D9
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$D7
	.byte	$D8
	.byte	$D8
	.byte	$03
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$D7
	.byte	$D7
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$03
	.byte	$03
	.byte	$11
	.byte	$11
	.byte	$DB
	.byte	$DE
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$11
	.byte	$11
	.byte	$D5
	.byte	$03
	.byte	$02
	.byte	$D3
	.byte	$11
	.byte	$11
	.byte	$D9
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DC
	.byte	$11
	.byte	$20
	.byte	$D9
	.byte	$11
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$D3
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$DC
	.byte	$11
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$D3
	.byte	$D3
	.byte	$11
	.byte	$DE
	.byte	$11
	.byte	$DA
	.byte	$DB
	.byte	$11
	.byte	$20
	.byte	$11
	.byte	$D3
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$D3
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$20
	.byte	$D4
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$D4
	.byte	$D4
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$04
_busylevel_17:
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DD
	.byte	$DC
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DA
	.byte	$D9
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$03
	.byte	$DA
	.byte	$DE
	.byte	$11
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$D7
	.byte	$D7
	.byte	$D7
	.byte	$D7
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$D7
	.byte	$D8
	.byte	$D7
	.byte	$11
	.byte	$DA
	.byte	$DC
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$D9
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$D9
	.byte	$11
	.byte	$11
	.byte	$E4
	.byte	$11
	.byte	$DE
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DE
	.byte	$11
	.byte	$11
	.byte	$DF
	.byte	$11
	.byte	$E2
	.byte	$E0
	.byte	$E1
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$D9
	.byte	$DC
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DD
	.byte	$11
	.byte	$E2
	.byte	$11
	.byte	$DC
	.byte	$11
	.byte	$E3
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DC
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DD
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DE
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D3
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D3
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$01
_busylevel_18:
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$04
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$20
	.byte	$D6
	.byte	$D6
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$DA
	.byte	$11
	.byte	$D6
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$03
	.byte	$11
	.byte	$DE
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DD
	.byte	$11
	.byte	$20
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$D7
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$DC
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$DC
	.byte	$DE
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$20
	.byte	$11
	.byte	$11
	.byte	$DC
	.byte	$11
	.byte	$D5
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DE
	.byte	$20
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$04
	.byte	$02
	.byte	$04
	.byte	$02
	.byte	$E0
	.byte	$E1
	.byte	$11
	.byte	$DC
	.byte	$11
	.byte	$11
	.byte	$DE
	.byte	$20
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$D5
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$E3
	.byte	$11
	.byte	$D9
	.byte	$11
	.byte	$11
	.byte	$DC
	.byte	$11
	.byte	$20
	.byte	$11
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$20
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$D4
	.byte	$D3
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$20
	.byte	$D4
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$03
	.byte	$0A
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$0A
	.byte	$0A
	.byte	$04
	.byte	$0A
	.byte	$01
_busylevel_list:
	.addr	_busylevel_0
	.addr	_busylevel_1
	.addr	_busylevel_2
	.addr	_busylevel_3
	.addr	_busylevel_4
	.addr	_busylevel_5
	.addr	_busylevel_6
	.addr	_busylevel_7
	.addr	_busylevel_8
	.addr	_busylevel_9
	.addr	_busylevel_10
	.addr	_busylevel_11
	.addr	_busylevel_12
	.addr	_busylevel_13
	.addr	_busylevel_14
	.addr	_busylevel_15
	.addr	_busylevel_16
	.addr	_busylevel_17
	.addr	_busylevel_18
_is_solid:
	.byte	$40
	.byte	$40
	.byte	$C0
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

_debug:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_short_jump_count:
	.res	1,$00
_map_loaded:
	.res	1,$00
_collision:
	.res	1,$00
_player_in_air:
	.res	1,$00
_player_jumping:
	.res	1,$00
_player_falling:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_temp_playerlocation:
	.res	2,$00
_temp_cmap1:
	.res	1,$00
_temp_cmap2:
	.res	1,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_sprite_frame_counter:
	.res	1,$00
_frame_counter:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scroll_count:
	.res	1,$00
_pseudo_scroll_x:
	.res	2,$00
_l_scroll_frames:
	.res	1,$00
_r_scroll_frames:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_temp_room:
	.res	1,$00
_player_shooting:
	.res	1,$00
_projectile_cooldown:
	.res	1,$00
_projectile_count:
	.res	1,$00
_projectile_index:
	.res	1,$00
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_Generic:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; set_data_pointer(busylevel_list[0]);
;
	lda     _busylevel_list
	ldx     _busylevel_list+1
	jsr     _set_data_pointer
;
; set_mt_pointer(metatiles1);
;
	lda     #<(_metatiles1)
	ldx     #>(_metatiles1)
	jsr     _set_mt_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L22C3:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L22C2:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L22C5
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L22C2
;
; if (y == 0xe0)
;
L22C5:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L1F86
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L22C3
;
; set_data_pointer(busylevel_list[1]);
;
L1F86:	lda     _busylevel_list+2
	ldx     _busylevel_list+2+1
	jsr     _set_data_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L22C4:	sta     _y
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; address = get_ppu_addr(1, x, y);
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0);
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (y == 0xe0)
;
	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L1FAA
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L22C4
;
; memcpy(c_map, busylevel_0, 240);
;
L1FAA:	ldy     #$00
L1FC5:	lda     _busylevel_0,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L1FC5
;
; temp_cmap1 = 0;
;
	lda     #$00
	sta     _temp_cmap1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_player_sprites();
;
	jsr     _draw_player_sprites
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	lda     #$00
	sta     _temp1
L22C6:	lda     _temp1
	cmp     #$03
	bcs     L1FCC
;
; if (projectiles_list[temp1] != OFF)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	beq     L22C7
;
; temp6 = projectiles_y[temp1] + sine_wave[frame_counter % 10];
;
	ldy     _temp1
	lda     _projectiles_y,y
	jsr     pusha0
	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	sta     ptr1
	txa
	clc
	adc     #>(_sine_wave)
	sta     ptr1+1
	ldy     #<(_sine_wave)
	lda     (ptr1),y
	jsr     tosadda0
	sta     _temp6
	stx     _temp6+1
;
; oam_meta_spr(projectiles_x[temp1], temp6, orb1);
;
	jsr     decsp2
	ldy     _temp1
	lda     _projectiles_x,y
	ldy     #$01
	sta     (sp),y
	lda     _temp6
	dey
	sta     (sp),y
	lda     #<(_orb1)
	ldx     #>(_orb1)
	jsr     _oam_meta_spr
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
L22C7:	inc     _temp1
	jmp     L22C6
;
; if (debug)
;
L1FCC:	lda     _debug
	bne     L22C8
;
; }
;
	rts
;
; oam_spr(20, 010, 0x58, 1); // 0xfe = X
;
L22C8:	jsr     decsp3
	lda     #$14
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$58
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = (scroll_x) >> 8;
;
	lda     _scroll_x+1
	sta     _temp1
;
; oam_spr(28, 010, temp1 + 0x30, 1);
;
	jsr     decsp3
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = (scroll_x & 0xff) >> 4;
;
	lda     _scroll_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; oam_spr(36, 010, temp1 + 0x30, 1);
;
	jsr     decsp3
	lda     #$24
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = (scroll_x & 0x0f);
;
	lda     _scroll_x
	and     #$0F
	sta     _temp1
;
; oam_spr(44, 010, temp1 + 0x30, 1);
;
	jsr     decsp3
	lda     #$2C
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = room;
;
	lda     _room
	sta     _temp1
;
; oam_spr(58, 010, 0x52, 1); // 0xfd = R
;
	jsr     decsp3
	lda     #$3A
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$52
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(66, 010, temp1 + 0x30, 1);
;
	jsr     decsp3
	lda     #$42
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(20, 20, 0x58, 2); // 0xfe = X
;
	jsr     decsp3
	lda     #$14
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$58
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; temp1 = (BoxGuy1.x >> 8 & 0xff) >> 4;
;
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; oam_spr(28, 20, temp1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; temp1 = (BoxGuy1.x >> 8 & 0x0f);
;
	lda     _BoxGuy1+1
	and     #$0F
	sta     _temp1
;
; oam_spr(36, 20, temp1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$24
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(50, 20, 0xff, 2); // 0xff = Y
;
	jsr     decsp3
	lda     #$32
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #$FF
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(58, 20, temp_cmap1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$3A
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp_cmap1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(80, 20, temp_cmap2 + 0x30, 2);
;
	jsr     decsp3
	lda     #$50
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp_cmap2
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = BoxGuy1.x;
;
	lda     _BoxGuy1+1
	sta     _old_x+1
	lda     _BoxGuy1
	sta     _old_x
;
; if (pad1 & PAD_LEFT)
;
	lda     _pad1
	and     #$02
	beq     L22D1
;
; direction = LEFT;
;
	lda     #$00
	sta     _direction
;
; if (BoxGuy1.vel_x >= DECEL)
;
	lda     _BoxGuy1+4
	cmp     #$32
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L2042
	eor     #$80
L2042:	bpl     L2040
;
; BoxGuy1.vel_x -= DECEL;
;
	lda     _BoxGuy1+4
	sec
	sbc     #$32
	sta     _BoxGuy1+4
	jcs     L207C
	dec     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x > 0)
;
	jmp     L207C
L2040:	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L2049
	eor     #$80
L2049:	bpl     L2047
;
; BoxGuy1.vel_x = 0;
;
	ldx     #$00
	txa
;
; else
;
	jmp     L22D3
;
; BoxGuy1.vel_x -= ACCEL;
;
L2047:	lda     _BoxGuy1+4
	sec
	sbc     #$1E
	sta     _BoxGuy1+4
	bcs     L204F
	dec     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x < -MAX_SPEED)
;
L204F:	lda     _BoxGuy1+4
	cmp     #$C0
	lda     _BoxGuy1+4+1
	sbc     #$FD
	bvc     L2052
	eor     #$80
L2052:	jpl     L207C
;
; BoxGuy1.vel_x = -MAX_SPEED;
;
	ldx     #$FD
	lda     #$C0
;
; else if (pad1 & PAD_RIGHT)
;
	jmp     L22D3
L22D1:	lda     _pad1
	and     #$01
	beq     L2056
;
; direction = RIGHT;
;
	lda     #$01
	sta     _direction
;
; if (BoxGuy1.vel_x <= DECEL)
;
	lda     _BoxGuy1+4
	cmp     #$33
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvc     L205C
	eor     #$80
L205C:	bpl     L205A
;
; BoxGuy1.vel_x += DECEL;
;
	lda     #$32
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	jcc     L207C
	inc     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x < 0)
;
	jmp     L207C
L205A:	ldx     _BoxGuy1+4+1
	cpx     #$80
	bcc     L2061
;
; BoxGuy1.vel_x = 0;
;
	ldx     #$00
	txa
;
; else
;
	jmp     L22D3
;
; BoxGuy1.vel_x += ACCEL;
;
L2061:	lda     #$1E
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L2068
	inc     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x >= MAX_SPEED)
;
L2068:	lda     _BoxGuy1+4
	cmp     #$40
	lda     _BoxGuy1+4+1
	sbc     #$02
	bvs     L206B
	eor     #$80
L206B:	bpl     L207C
;
; BoxGuy1.vel_x = MAX_SPEED;
;
	ldx     #$02
	lda     #$40
;
; else
;
	jmp     L22D3
;
; if (BoxGuy1.vel_x >= ACCEL)
;
L2056:	lda     _BoxGuy1+4
	cmp     #$1E
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L2071
	eor     #$80
L2071:	bpl     L206F
;
; BoxGuy1.vel_x -= ACCEL;
;
	lda     _BoxGuy1+4
	sec
	sbc     #$1E
	sta     _BoxGuy1+4
	bcs     L207C
	dec     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x < -ACCEL)
;
	jmp     L207C
L206F:	lda     _BoxGuy1+4
	cmp     #$E2
	lda     _BoxGuy1+4+1
	sbc     #$FF
	bvc     L2078
	eor     #$80
L2078:	asl     a
	lda     #$00
	tax
	bcc     L22D3
;
; BoxGuy1.vel_x += ACCEL;
;
	lda     #$1E
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L207C
	inc     _BoxGuy1+4+1
;
; else
;
	jmp     L207C
;
; BoxGuy1.vel_x = 0;
;
L22D3:	sta     _BoxGuy1+4
	stx     _BoxGuy1+4+1
;
; BoxGuy1.x += BoxGuy1.vel_x;
;
L207C:	lda     _BoxGuy1+4
	clc
	adc     _BoxGuy1
	sta     _BoxGuy1
	lda     _BoxGuy1+4+1
	adc     _BoxGuy1+1
	sta     _BoxGuy1+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L22D6
;
; if (old_x >= 0x8000)
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L22D5
;
; BoxGuy1.x = 0xf000; // max right
;
	ldx     #$F0
;
; BoxGuy1.x = 0x0000; // max left
;
L22D5:	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; Generic.x = high_byte(BoxGuy1.x); // this is much faster than passing a pointer to BoxGuy1
;
L22D6:	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$13
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	lda     #$0E
	sta     _Generic+3
;
; if (BoxGuy1.vel_x < 0)
;
	ldx     _BoxGuy1+4+1
	cpx     #$80
	bcc     L2097
;
; if (bg_coll_L())
;
	jsr     _bg_coll_L
	tax
	beq     L20B1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_L;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_L
	sta     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L20B1
;
; BoxGuy1.x = 0xf000;
;
	ldx     #$F0
;
; else if (BoxGuy1.vel_x > 0)
;
	jmp     L22F2
L2097:	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L20A8
	eor     #$80
L20A8:	bpl     L20B1
;
; if (bg_coll_R())
;
	jsr     _bg_coll_R
	tax
	beq     L20B1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_R;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_R
	sta     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L20B1
;
; BoxGuy1.x = 0x0000;
;
	ldx     #$00
L22F2:	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; if (BoxGuy1.vel_y < 0x300)
;
L20B1:	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$03
	bvc     L20B7
	eor     #$80
L20B7:	bpl     L20B5
;
; if (BoxGuy1.vel_y < 0)
;
	ldx     _BoxGuy1+6+1
	cpx     #$80
	lda     #$00
	bcc     L22D8
;
; player_jumping = 1;
;
	lda     #$01
	sta     _player_jumping
;
; player_falling = 0;
;
	lda     #$00
;
; else
;
	jmp     L22CF
;
; player_jumping = 0;
;
L22D8:	sta     _player_jumping
;
; player_falling = 1;
;
	lda     #$01
L22CF:	sta     _player_falling
;
; BoxGuy1.vel_y += GRAVITY;
;
	lda     #$3C
	clc
	adc     _BoxGuy1+6
	sta     _BoxGuy1+6
	bcc     L20C6
	inc     _BoxGuy1+6+1
;
; else
;
	jmp     L20C6
;
; BoxGuy1.vel_y = 0x300; // consistent
;
L20B5:	ldx     #$03
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; BoxGuy1.y += BoxGuy1.vel_y;
;
L20C6:	lda     _BoxGuy1+6
	clc
	adc     _BoxGuy1+2
	sta     _BoxGuy1+2
	lda     _BoxGuy1+6+1
	adc     _BoxGuy1+2+1
	sta     _BoxGuy1+2+1
;
; Generic.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if (BoxGuy1.vel_y > 0)
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L20D3
	eor     #$80
L20D3:	bpl     L20D1
;
; if (bg_coll_D())
;
	jsr     _bg_coll_D
	tax
	beq     L22DB
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_D;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_D
	sta     _BoxGuy1+3
;
; BoxGuy1.y &= 0xff00;
;
	ldx     _BoxGuy1+2+1
	lda     #$00
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; if (BoxGuy1.vel_y > 0)
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L20DE
	eor     #$80
L20DE:	asl     a
	lda     #$00
	bcc     L22DA
;
; BoxGuy1.vel_y = 0;
;
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; player_in_air = 0;
;
L22DA:	sta     _player_in_air
;
; else if (BoxGuy1.vel_y < 0)
;
	jmp     L22DB
L20D1:	ldx     _BoxGuy1+6+1
	cpx     #$80
	bcc     L22DB
;
; if (bg_coll_U())
;
	jsr     _bg_coll_U
	tax
	beq     L22DB
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_U;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_U
	sta     _BoxGuy1+3
;
; BoxGuy1.vel_y = 0;
;
	lda     #$00
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; Generic.y = high_byte(BoxGuy1.y); // the rest should be the same
;
L22DB:	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if (projectile_cooldown > 0)
;
	lda     _projectile_cooldown
	beq     L22DC
;
; --projectile_cooldown;
;
	dec     _projectile_cooldown
;
; if (pad1_new & PAD_UP)
;
L22DC:	lda     _pad1_new
	and     #$08
	beq     L22DD
;
; if (bg_coll_ladder())
;
	jsr     _bg_coll_ladder
	tax
	beq     L22DD
;
; ppu_off();
;
	jsr     _ppu_off
;
; if (pad1_new & PAD_A)
;
L22DD:	lda     _pad1_new
	and     #$80
	beq     L22DE
;
; if (bg_coll_D2())
;
	jsr     _bg_coll_D2
	tax
	beq     L22DE
;
; BoxGuy1.vel_y = JUMP_VEL; // JUMP
;
	ldx     #$FA
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; short_jump_count = 1;
;
	lda     #$01
	sta     _short_jump_count
;
; player_in_air = 1;
;
	sta     _player_in_air
;
; player_jumping = 1;
;
	sta     _player_jumping
;
; if (pad1_new & PAD_B && projectile_cooldown == 0) // shooting
;
L22DE:	lda     _pad1_new
	ldx     #$00
	and     #$40
	jeq     L2117
	lda     _projectile_cooldown
	jne     L2117
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	sta     _temp1
L22E2:	lda     _temp1
	cmp     #$03
	bcs     L210A
;
; if (projectiles_list[temp1] == OFF)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	bne     L22E3
;
; temp2 = 1;
;
	lda     #$01
	sta     _temp2
;
; break;
;
	jmp     L210A
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
L22E3:	inc     _temp1
	jmp     L22E2
;
; if (temp2)
;
L210A:	lda     _temp2
	beq     L2117
;
; projectile_cooldown = PROJECTILE_COOLDOWN_FRAMES;
;
	lda     #$0A
	sta     _projectile_cooldown
;
; player_shooting = 1;
;
	lda     #$01
	sta     _player_shooting
;
; projectile_index = temp1;
;
	lda     _temp1
	sta     _projectile_index
;
; if (direction == RIGHT)
;
	lda     _direction
	cmp     #$01
	bne     L211F
;
; projectiles_list[projectile_index] = RIGHT;
;
	ldy     _projectile_index
;
; else
;
	jmp     L22D0
;
; projectiles_list[projectile_index] = LEFT;
;
L211F:	ldy     _projectile_index
	lda     #$00
L22D0:	sta     _projectiles_list,y
;
; projectiles_x[projectile_index] = high_byte(BoxGuy1.x) + 10;
;
	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _projectile_index
	bcc     L212C
	inx
L212C:	sta     ptr1
	stx     ptr1+1
	lda     _BoxGuy1+1
	clc
	adc     #$0A
	ldy     #$00
	sta     (ptr1),y
;
; projectiles_y[projectile_index] = high_byte(BoxGuy1.y) - 8;
;
	lda     #<(_projectiles_y)
	ldx     #>(_projectiles_y)
	clc
	adc     _projectile_index
	bcc     L2132
	inx
L2132:	sta     ptr1
	stx     ptr1+1
	lda     _BoxGuy1+3
	sec
	sbc     #$08
	ldx     #$00
	sta     (ptr1),y
;
; if (short_jump_count)
;
L2117:	lda     _short_jump_count
	beq     L213A
;
; ++short_jump_count;
;
	inc     _short_jump_count
;
; if (short_jump_count > 30)
;
	lda     _short_jump_count
	cmp     #$1F
	bcc     L213A
;
; short_jump_count = 0;
;
	lda     #$00
	sta     _short_jump_count
;
; if ((short_jump_count) && ((pad1 & PAD_A) == 0) && (BoxGuy1.vel_y < -0x200))
;
L213A:	lda     _short_jump_count
	beq     L22E7
	lda     _pad1
	and     #$80
	bne     L22E7
	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$FE
	bvc     L2146
	eor     #$80
L2146:	bpl     L22F1
;
; BoxGuy1.vel_y = -0x200;
;
	ldx     #$FE
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; short_jump_count = 0;
;
	sta     _short_jump_count
;
; temp5 = low_byte(scroll_x) + high_byte(BoxGuy1.x);
;
L22F1:	ldx     #$00
L22E7:	lda     _scroll_x
	clc
	adc     _BoxGuy1+1
	bcc     L22C9
	ldx     #$01
L22C9:	sta     _temp5
	stx     _temp5+1
;
; if (temp5 > 0x98 && temp5 < 0xa4) // middle of the screen
;
	cmp     #$99
	txa
	sbc     #$00
	bcc     L2150
	lda     _temp5+1
	cmp     #$00
	bne     L2153
	lda     _temp5
	cmp     #$A4
L2153:	bcs     L2150
;
; map_loaded = 0;
;
	lda     #$00
	sta     _map_loaded
;
; temp5 = BoxGuy1.x; // store his x before we check the scrolling
;
L2150:	lda     _BoxGuy1+1
	sta     _temp5+1
	lda     _BoxGuy1
	sta     _temp5
;
; if (BoxGuy1.x < MAX_LEFT)
;
	ldx     _BoxGuy1+1
	cpx     #$40
	jcs     L2181
;
; if (!map_loaded)
;
	lda     _map_loaded
	bne     L215B
;
; if (room >= 1)
;
	lda     _room
	beq     L215D
;
; room = ((scroll_x >> 8) - 1); // high byte = room, one to the left
;
	lda     _scroll_x+1
	sec
	sbc     #$01
	sta     _room
;
; new_cmap();
;
L215D:	jsr     _new_cmap
;
; map_loaded = 1; // only do once
;
	lda     #$01
	sta     _map_loaded
;
; if (room == 0)
;
L215B:	lda     _room
	bne     L22EC
;
; if (scroll_x > 0)
;
	lda     _scroll_x
	ora     _scroll_x+1
	beq     L2169
;
; temp1 = (MAX_LEFT - BoxGuy1.x) >> 8;
;
	lda     #$00
	sec
	sbc     _BoxGuy1
	lda     #$40
	sbc     _BoxGuy1+1
	sta     _temp1
;
; if (temp1 > 3)
;
	cmp     #$04
	bcc     L216F
;
; temp1 = 3; // max scroll change
;
	lda     #$03
	sta     _temp1
;
; if (scroll_x < 3)
;
L216F:	lda     _scroll_x+1
	cmp     #$00
	bne     L2175
	lda     _scroll_x
	cmp     #$03
L2175:	bcs     L22EB
;
; temp1 = scroll_x;
;
	lda     _scroll_x
	sta     _temp1
;
; scroll_x -= temp1;                  // scroll the window
;
L22EB:	lda     _temp1
	eor     #$FF
	sec
	adc     _scroll_x
	sta     _scroll_x
	lda     #$FF
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) + temp1; // add the offset to the guy
;
	lda     _BoxGuy1+1
	clc
	adc     _temp1
	sta     _BoxGuy1+1
;
; else
;
	jmp     L22EC
;
; BoxGuy1.x = temp5;
;
L2169:	lda     _temp5+1
	sta     _BoxGuy1+1
	lda     _temp5
	sta     _BoxGuy1
;
; if (room >= 1)
;
L22EC:	lda     _room
	beq     L2181
;
; temp1 = (MAX_LEFT - BoxGuy1.x) >> 8;
;
	lda     #$00
	sec
	sbc     _BoxGuy1
	lda     #$40
	sbc     _BoxGuy1+1
	sta     _temp1
;
; if (temp1 > 3)
;
	cmp     #$04
	bcc     L22ED
;
; temp1 = 3;                     // max scroll change
;
	lda     #$03
	sta     _temp1
;
; scroll_x -= temp1;                  // scroll the window
;
L22ED:	lda     _temp1
	eor     #$FF
	sec
	adc     _scroll_x
	sta     _scroll_x
	lda     #$FF
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) + temp1; // add the offset to the guy
;
	lda     _BoxGuy1+1
	clc
	adc     _temp1
	sta     _BoxGuy1+1
;
; if (BoxGuy1.x > MAX_RIGHT)
;
L2181:	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$90
	bcc     L219C
;
; if (!map_loaded)
;
	lda     _map_loaded
	bne     L22EE
;
; room = ((scroll_x >> 8) + 1); // high byte = room, one to the right
;
	lda     _scroll_x+1
	clc
	adc     #$01
	sta     _room
;
; new_cmap();
;
	jsr     _new_cmap
;
; map_loaded = 1; // only do once
;
	lda     #$01
	sta     _map_loaded
;
; if (room <= MAX_ROOMS)
;
L22EE:	lda     _room
	cmp     #$14
	bcs     L219C
;
; temp1 = (BoxGuy1.x - MAX_RIGHT) >> 8;
;
	lda     _BoxGuy1+1
	sec
	sbc     #$90
	sta     _temp1
;
; if (temp1 > 3)
;
	cmp     #$04
	bcc     L22EF
;
; temp1 = 3;                     // max scroll change
;
	lda     #$03
	sta     _temp1
;
; scroll_x += temp1;                  // scroll the window
;
L22EF:	lda     _temp1
	clc
	adc     _scroll_x
	sta     _scroll_x
	lda     #$00
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - temp1; // sub the offet from the guy
;
	lda     _BoxGuy1+1
	sec
	sbc     _temp1
	sta     _BoxGuy1+1
;
; if (scroll_x >= MAX_SCROLL)
;
L219C:	lda     _scroll_x
	cmp     #$FF
	lda     _scroll_x+1
	sbc     #$12
	bcc     L21B6
;
; scroll_x = MAX_SCROLL; // stop scrolling right, end of level
;
	ldx     #$12
	lda     #$FF
	sta     _scroll_x
	stx     _scroll_x+1
;
; BoxGuy1.x = temp5;   // but allow the x position to go all the way right
;
	lda     _temp5+1
	sta     _BoxGuy1+1
	lda     _temp5
	sta     _BoxGuy1
;
; if (high_byte(BoxGuy1.x) >= 0xe0)
;
	lda     _BoxGuy1+1
	cmp     #$E0
	bcc     L21B6
;
; BoxGuy1.x = 0xe000;
;
	ldx     #$E0
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; }
;
L21B6:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if (temp_y >= 0xf0)
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L22F4
;
; return 0;
;
	txa
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0);
;
L22F4:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; map = temp_room & 1; // high byte
;
	lda     _temp_room
	and     #$01
	sta     _map
;
; if (!map)
;
	lda     _map
	bne     L1DA6
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
;
; else
;
	jmp     L22F3
;
; collision = c_map2[coordinates];
;
L1DA6:	ldy     _coordinates
	lda     _c_map2,y
L22F3:	sta     _collision
;
; return is_solid[collision];
;
	ldy     _collision
	lda     _is_solid,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x + 0x120;
;
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$20
	bcc     L2237
	inx
L2237:	inx
	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; set_data_pointer(busylevel_list[temp1]);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L22F8
	inx
	clc
L22F8:	adc     #<(_busylevel_list)
	sta     ptr1
	txa
	adc     #>(_busylevel_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch (scroll_count)
;
	lda     _scroll_count
;
; }
;
	beq     L2245
	cmp     #$01
	beq     L225E
	cmp     #$02
	jeq     L2278
	jmp     L2291
;
; address = get_ppu_addr(nt, x, 0);
;
L2245:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L22FD
;
; address = get_ppu_addr(nt, x, 0x40);
;
L225E:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L22FD
;
; address = get_ppu_addr(nt, x, 0x80);
;
L2278:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L22FD
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L2291:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L22FD:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_L: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x - 0x20; // Modify the scroll offset for left scroll
;
	lda     _scroll_x
	ldx     _scroll_x+1
	sec
	sbc     #$20
	bcs     L21BE
	dex
L21BE:	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; set_data_pointer(busylevel_list[temp1]);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L2300
	inx
	clc
L2300:	adc     #<(_busylevel_list)
	sta     ptr1
	txa
	adc     #>(_busylevel_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch (scroll_count)
;
	lda     _scroll_count
;
; }
;
	beq     L21CC
	cmp     #$01
	beq     L21E5
	cmp     #$02
	jeq     L21FF
	jmp     L2218
;
; address = get_ppu_addr(nt, x, 0);
;
L21CC:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L2305
;
; address = get_ppu_addr(nt, x, 0x40);
;
L21E5:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L2305
;
; address = get_ppu_addr(nt, x, 0x80);
;
L21FF:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L2305
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L2218:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L2305:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; --scroll_count;   // Reverse the increment to scroll in the opposite direction
;
	dec     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; map = room & 1; // even or odd?
;
	lda     _room
	and     #$01
	sta     _map
;
; if (!map)
;
	lda     _map
	bne     L22B0
;
; memcpy(c_map, busylevel_list[room], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _room
	asl     a
	bcc     L2308
	inx
	clc
L2308:	adc     #<(_busylevel_list)
	sta     ptr1
	txa
	adc     #>(_busylevel_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; temp_cmap1 = room;
;
	lda     _room
	sta     _temp_cmap1
;
; else
;
	rts
;
; memcpy(c_map2, busylevel_list[room], 240);
;
L22B0:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	jsr     pushax
	ldx     #$00
	lda     _room
	asl     a
	bcc     L2309
	inx
	clc
L2309:	adc     #<(_busylevel_list)
	sta     ptr1
	txa
	adc     #>(_busylevel_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; temp_cmap2 = room;
;
	lda     _room
	sta     _temp_cmap2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handle_scrolling (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_scrolling: near

.segment	"CODE"

;
; if (!r_scroll_frames && !l_scroll_frames)
;
	lda     _r_scroll_frames
	bne     L1F73
	lda     _l_scroll_frames
	bne     L1F73
;
; if (direction == RIGHT)
;
	lda     _direction
	cmp     #$01
	bne     L230A
;
; r_scroll_frames = 4;
;
	lda     #$04
	sta     _r_scroll_frames
;
; else
;
	jmp     L1F73
;
; l_scroll_frames = 4;
;
L230A:	lda     #$04
	sta     _l_scroll_frames
;
; if (r_scroll_frames)
;
L1F73:	lda     _r_scroll_frames
	beq     L1F76
;
; draw_screen_R();
;
	jsr     _draw_screen_R
;
; --r_scroll_frames;
;
	dec     _r_scroll_frames
;
; else if (l_scroll_frames)
;
	rts
L1F76:	lda     _l_scroll_frames
	beq     L1F7B
;
; draw_screen_L();
;
	jsr     _draw_screen_L
;
; --l_scroll_frames;
;
	dec     _l_scroll_frames
;
; }
;
L1F7B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ projectile_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_projectile_movement: near

.segment	"CODE"

;
; for (temp1 = 0; temp1 < 3; ++temp1)
;
	lda     #$00
	sta     _temp1
L230D:	lda     _temp1
	cmp     #$03
	bcc     L231C
;
; }
;
	rts
;
; if (projectiles_list[temp1] != OFF)
;
L231C:	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	jeq     L231B
;
; if (projectiles_x[temp1] > 250)
;
	ldy     _temp1
	lda     _projectiles_x,y
	cmp     #$FB
	bcc     L230E
;
; projectiles_list[temp1] = OFF;
;
	ldy     _temp1
	lda     #$FF
	sta     _projectiles_list,y
;
; else
;
	jmp     L231B
;
; temp2 = 2; // projectile speed
;
L230E:	lda     #$02
	sta     _temp2
;
; if (projectiles_list[temp1] == RIGHT)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$01
	jne     L1F2C
;
; if (BoxGuy1.x > (MAX_RIGHT - 4) && pad1_new & PAD_RIGHT)
;
	lda     _BoxGuy1
	cmp     #$FD
	lda     _BoxGuy1+1
	sbc     #$8F
	bcc     L1F30
	lda     _pad1_new
	and     #$01
	beq     L1F30
;
; temp3 = (BoxGuy1.x - MAX_RIGHT - 4) >> 8;
;
	lda     _BoxGuy1
	pha
	lda     _BoxGuy1+1
	sec
	sbc     #$90
	tax
	pla
	sec
	sbc     #$04
	bcs     L1F38
	dex
L1F38:	txa
	sta     _temp3
;
; if (temp3 > 3)
;
	cmp     #$04
	bcc     L2312
;
; temp3 = 3; // max scroll change
;
	lda     #$03
	sta     _temp3
;
; temp2 += temp3;
;
L2312:	lda     _temp3
	clc
	adc     _temp2
	sta     _temp2
;
; if (BoxGuy1.x < (MAX_LEFT + 4) && pad1_new & PAD_LEFT)
;
L1F30:	lda     _BoxGuy1+1
	cmp     #$40
	bne     L1F42
	lda     _BoxGuy1
	cmp     #$04
L1F42:	bcs     L1F3F
	lda     _pad1_new
	and     #$02
	beq     L1F3F
;
; temp3 = (MAX_LEFT + 4 - BoxGuy1.x) >> 8;
;
	lda     #$04
	sec
	sbc     _BoxGuy1
	lda     #$40
	sbc     _BoxGuy1+1
	sta     _temp3
;
; if (temp3 > 3)
;
	cmp     #$04
	bcc     L2315
;
; temp3 = 3;
;
	lda     #$03
	sta     _temp3
;
; temp2 += temp3;
;
L2315:	lda     _temp3
	clc
	adc     _temp2
	sta     _temp2
;
; projectiles_x[temp1] += temp2;
;
L1F3F:	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L1F50
	inx
L1F50:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp2
;
; else if (projectiles_list[temp1] == LEFT)
;
	jmp     L230C
L1F2C:	ldy     _temp1
	lda     _projectiles_list,y
	bne     L231B
;
; if (BoxGuy1.x > (MAX_RIGHT - 4) && pad1_new & PAD_RIGHT)
;
	lda     _BoxGuy1
	cmp     #$FD
	lda     _BoxGuy1+1
	sbc     #$8F
	bcc     L1F57
	lda     _pad1_new
	and     #$01
	beq     L1F57
;
; temp2 += 3;
;
	lda     #$03
	clc
	adc     _temp2
	sta     _temp2
;
; if (BoxGuy1.x < (MAX_LEFT + 4) && pad1_new & PAD_LEFT)
;
L1F57:	lda     _BoxGuy1+1
	cmp     #$40
	bne     L1F61
	lda     _BoxGuy1
	cmp     #$04
L1F61:	bcs     L1F5E
	lda     _pad1_new
	and     #$02
	beq     L1F5E
;
; temp2 -= 1;
;
	dec     _temp2
;
; projectiles_x[temp1] -= temp2;
;
L1F5E:	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L1F68
	inx
L1F68:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     _temp2
L230C:	jsr     staspidx
;
; for (temp1 = 0; temp1 < 3; ++temp1)
;
L231B:	inc     _temp1
	jmp     L230D

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; eject_L = temp_x | 0xf0;
;
	lda     _temp_x
	ora     #$F0
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L231E
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L231E:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L2320
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L2320:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + Generic.width;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L2321
	inx
L2321:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; eject_R = (temp_x + 1) & 0x0f;
;
	lda     _temp_x
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L2323
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L2323:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L2325
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L2325:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L1D41
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1D41:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L2327
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L2327:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L2326
	inx
L2326:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L1D51
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1D51:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L2329
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L2329:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L1D5F
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1D5F:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; if ((temp_y & 0x0f) > 3)
;
	and     #$0F
	cmp     #$04
	lda     #$00
	bcc     L232D
;
; return 0; // bug fix
;
	tax
	rts
;
; eject_D = (temp_y + 1) & 0x0f;
;
L232D:	lda     _temp_y
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L232E
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L232E:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	txa
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L232B
	inx
L232B:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L1D75
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1D75:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L232F
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L232F:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D2: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L1D83
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1D83:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y += 2;
;
	lda     #$02
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L2332
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L2332:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	txa
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L2331
	inx
L2331:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L1D93
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1D93:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L2334
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L2334:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_fast (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_fast: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; if (Generic.y >= 0xf0)
;
	lda     _Generic+1
	cmp     #$F0
;
; return;
;
	bcs     L1CFC
;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
	pla
	sta     _temp5
;
; temp_x = temp5 & 0xff;  // low byte x
;
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + 6; // y middle
;
	lda     _Generic+1
	clc
	adc     #$06
	sta     _temp_y
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L2335
;
; ++collision_L;
;
	inc     _collision_L
;
; temp5 += Generic.width;
;
L2335:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff;  // low byte x
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp_room
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L1CFC
;
; ++collision_R;
;
	inc     _collision_R
;
; }
;
L1CFC:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_ladder (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_ladder: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + Generic.width;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L2336
	inx
L2336:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_LADDER)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$01
	beq     L2339
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L2339:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_sprites: near

.segment	"CODE"

;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L233E
;
; temp_x = 1;
;
	lda     #$01
	sta     _temp_x
;
; if (temp_y == 0)
;
L233E:	lda     _temp_y
	bne     L233F
;
; temp_y = 1;
;
	lda     #$01
	sta     _temp_y
;
; ++sprite_frame_counter;
;
L233F:	inc     _sprite_frame_counter
;
; if (player_shooting)
;
	lda     _player_shooting
	jeq     L1DC2
;
; ++player_shooting;
;
	inc     _player_shooting
;
; if (player_shooting < 20)
;
	lda     _player_shooting
	cmp     #$14
	jcs     L2344
;
; if (direction == LEFT)
;
	lda     _direction
	jne     L1DC7
;
; if (player_in_air)
;
	lda     _player_in_air
	beq     L1DC9
;
; oam_meta_spr(temp_x, temp_y, mosesjumpleftshoot);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesjumpleftshoot)
	ldx     #>(_mosesjumpleftshoot)
;
; else
;
	jmp     _oam_meta_spr
;
; if (BoxGuy1.vel_x)
;
L1DC9:	lda     _BoxGuy1+4
	ora     _BoxGuy1+4+1
	beq     L1DD0
;
; if (sprite_frame_counter < 8)
;
	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L2340
;
; oam_meta_spr(temp_x, temp_y, mosesrunshoot1left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrunshoot1left)
	ldx     #>(_mosesrunshoot1left)
;
; else if (sprite_frame_counter < 15)
;
	jmp     _oam_meta_spr
L2340:	lda     _sprite_frame_counter
	cmp     #$0F
	bcs     L2341
;
; oam_meta_spr(temp_x, temp_y, mosesrunshoot2left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrunshoot2left)
	ldx     #>(_mosesrunshoot2left)
;
; else
;
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L2341:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, mosesrunshoot2left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrunshoot2left)
	ldx     #>(_mosesrunshoot2left)
;
; else
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(temp_x, temp_y, mosesstandshootleft);
;
L1DD0:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesstandshootleft)
	ldx     #>(_mosesstandshootleft)
	jmp     _oam_meta_spr
;
; if (player_in_air)
;
L1DC7:	lda     _player_in_air
	beq     L1DEC
;
; oam_meta_spr(temp_x, temp_y, mosesjumprightshoot);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesjumprightshoot)
	ldx     #>(_mosesjumprightshoot)
	jmp     _oam_meta_spr
;
; if (BoxGuy1.vel_x)
;
L1DEC:	lda     _BoxGuy1+4
	ora     _BoxGuy1+4+1
	beq     L1DF3
;
; if (sprite_frame_counter < 8)
;
	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L2342
;
; oam_meta_spr(temp_x, temp_y, mosesrunshoot1right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrunshoot1right)
	ldx     #>(_mosesrunshoot1right)
;
; else if (sprite_frame_counter < 15)
;
	jmp     _oam_meta_spr
L2342:	lda     _sprite_frame_counter
	cmp     #$0F
	bcs     L2343
;
; oam_meta_spr(temp_x, temp_y, mosesrunshoot2right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrunshoot2right)
	ldx     #>(_mosesrunshoot2right)
;
; else
;
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L2343:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, mosesrunshoot2right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrunshoot2right)
	ldx     #>(_mosesrunshoot2right)
	jmp     _oam_meta_spr
;
; oam_meta_spr(temp_x, temp_y, mosesstandshootright);
;
L1DF3:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesstandshootright)
	ldx     #>(_mosesstandshootright)
	jmp     _oam_meta_spr
;
; player_shooting = 0;
;
L2344:	lda     #$00
	sta     _player_shooting
;
; else
;
	rts
;
; if (player_in_air) // aka, falling
;
L1DC2:	lda     _player_in_air
	jeq     L1E12
;
; if (player_jumping)
;
	lda     _player_jumping
	beq     L1E14
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L1E16
;
; oam_meta_spr(temp_x, temp_y, mosesjumpleft);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesjumpleft)
	ldx     #>(_mosesjumpleft)
;
; else
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(temp_x, temp_y, mosesjumpright);
;
L1E16:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesjumpright)
	ldx     #>(_mosesjumpright)
	jmp     _oam_meta_spr
;
; if (direction == LEFT)
;
L1E14:	lda     _direction
	bne     L2347
;
; if (sprite_frame_counter < 8)
;
	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L2345
;
; oam_meta_spr(temp_x, temp_y, mosesfallwiggle1left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesfallwiggle1left)
	ldx     #>(_mosesfallwiggle1left)
;
; else if (sprite_frame_counter < 15)
;
	jmp     _oam_meta_spr
L2345:	lda     _sprite_frame_counter
	cmp     #$0F
	bcs     L2346
;
; oam_meta_spr(temp_x, temp_y, mosesfallwiggle2left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesfallwiggle2left)
	ldx     #>(_mosesfallwiggle2left)
;
; else
;
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L2346:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, mosesfallwiggle2left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesfallwiggle2left)
	ldx     #>(_mosesfallwiggle2left)
	jmp     _oam_meta_spr
;
; if (sprite_frame_counter < 8)
;
L2347:	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L2348
;
; oam_meta_spr(temp_x, temp_y, mosesfallwiggle1right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesfallwiggle1right)
	ldx     #>(_mosesfallwiggle1right)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 15)
;
L2348:	lda     _sprite_frame_counter
	cmp     #$0F
	bcs     L2349
;
; oam_meta_spr(temp_x, temp_y, mosesfallwiggle2right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesfallwiggle2right)
	ldx     #>(_mosesfallwiggle2right)
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L2349:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, mosesfallwiggle2right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesfallwiggle2right)
	ldx     #>(_mosesfallwiggle2right)
	jmp     _oam_meta_spr
;
; else if (direction == LEFT) // not jumping
;
L1E12:	lda     _direction
	jne     L1E4E
;
; if (BoxGuy1.vel_x)
;
	lda     _BoxGuy1+4
	ora     _BoxGuy1+4+1
	jeq     L2354
;
; if (sprite_frame_counter < 4)
;
	lda     _sprite_frame_counter
	cmp     #$04
	bcs     L234A
;
; oam_meta_spr(temp_x, temp_y, mosesrun1left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun1left)
	ldx     #>(_mosesrun1left)
;
; else if (sprite_frame_counter < 8)
;
	jmp     _oam_meta_spr
L234A:	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L234B
;
; oam_meta_spr(temp_x, temp_y, mosesrun2left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun2left)
	ldx     #>(_mosesrun2left)
;
; else if (sprite_frame_counter < 12)
;
	jmp     _oam_meta_spr
L234B:	lda     _sprite_frame_counter
	cmp     #$0C
	bcs     L234C
;
; oam_meta_spr(temp_x, temp_y, mosesrun3left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun3left)
	ldx     #>(_mosesrun3left)
;
; else if (sprite_frame_counter < 16)
;
	jmp     _oam_meta_spr
L234C:	lda     _sprite_frame_counter
	cmp     #$10
	bcs     L234D
;
; oam_meta_spr(temp_x, temp_y, mosesrun4left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun4left)
	ldx     #>(_mosesrun4left)
;
; else if (sprite_frame_counter < 20)
;
	jmp     _oam_meta_spr
L234D:	lda     _sprite_frame_counter
	cmp     #$14
	bcs     L234E
;
; oam_meta_spr(temp_x, temp_y, mosesrun5left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun5left)
	ldx     #>(_mosesrun5left)
;
; else if (sprite_frame_counter < 24)
;
	jmp     _oam_meta_spr
L234E:	lda     _sprite_frame_counter
	cmp     #$18
	bcs     L234F
;
; oam_meta_spr(temp_x, temp_y, mosesrun4left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun4left)
	ldx     #>(_mosesrun4left)
;
; else if (sprite_frame_counter < 28)
;
	jmp     _oam_meta_spr
L234F:	lda     _sprite_frame_counter
	cmp     #$1C
	bcs     L2350
;
; oam_meta_spr(temp_x, temp_y, mosesrun3left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun3left)
	ldx     #>(_mosesrun3left)
;
; else if (sprite_frame_counter < 32)
;
	jmp     _oam_meta_spr
L2350:	lda     _sprite_frame_counter
	cmp     #$20
	bcs     L2351
;
; oam_meta_spr(temp_x, temp_y, mosesrun2left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun2left)
	ldx     #>(_mosesrun2left)
;
; else if (sprite_frame_counter < 35)
;
	jmp     _oam_meta_spr
L2351:	lda     _sprite_frame_counter
	cmp     #$23
	bcs     L2352
;
; oam_meta_spr(temp_x, temp_y, mosesrun1left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun1left)
	ldx     #>(_mosesrun1left)
;
; else
;
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L2352:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, mosesrun1left);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun1left)
	ldx     #>(_mosesrun1left)
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L2354:	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, mosesstandleft);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesstandleft)
	ldx     #>(_mosesstandleft)
	jmp     _oam_meta_spr
;
; if (BoxGuy1.vel_x)
;
L1E4E:	lda     _BoxGuy1+4
	ora     _BoxGuy1+4+1
	jeq     L235E
;
; if (sprite_frame_counter < 4)
;
	lda     _sprite_frame_counter
	cmp     #$04
	bcs     L2355
;
; oam_meta_spr(temp_x, temp_y, mosesrun1right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun1right)
	ldx     #>(_mosesrun1right)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 8)
;
L2355:	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L2356
;
; oam_meta_spr(temp_x, temp_y, mosesrun2right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun2right)
	ldx     #>(_mosesrun2right)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 12)
;
L2356:	lda     _sprite_frame_counter
	cmp     #$0C
	bcs     L2357
;
; oam_meta_spr(temp_x, temp_y, mosesrun3right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun3right)
	ldx     #>(_mosesrun3right)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 16)
;
L2357:	lda     _sprite_frame_counter
	cmp     #$10
	bcs     L2358
;
; oam_meta_spr(temp_x, temp_y, mosesrun4right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun4right)
	ldx     #>(_mosesrun4right)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 20)
;
L2358:	lda     _sprite_frame_counter
	cmp     #$14
	bcs     L2359
;
; oam_meta_spr(temp_x, temp_y, mosesrun5right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun5right)
	ldx     #>(_mosesrun5right)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 24)
;
L2359:	lda     _sprite_frame_counter
	cmp     #$18
	bcs     L235A
;
; oam_meta_spr(temp_x, temp_y, mosesrun4right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun4right)
	ldx     #>(_mosesrun4right)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 28)
;
L235A:	lda     _sprite_frame_counter
	cmp     #$1C
	bcs     L235B
;
; oam_meta_spr(temp_x, temp_y, mosesrun3right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun3right)
	ldx     #>(_mosesrun3right)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 32)
;
L235B:	lda     _sprite_frame_counter
	cmp     #$20
	bcs     L235C
;
; oam_meta_spr(temp_x, temp_y, mosesrun2right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun2right)
	ldx     #>(_mosesrun2right)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 35)
;
L235C:	lda     _sprite_frame_counter
	cmp     #$23
	bcs     L235D
;
; oam_meta_spr(temp_x, temp_y, mosesrun1right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun1right)
	ldx     #>(_mosesrun1right)
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L235D:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, mosesrun1right);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesrun1right)
	ldx     #>(_mosesrun1right)
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L235E:	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, mosesstandright);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_mosesstandright)
	ldx     #>(_mosesstandright)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; ppu_mask(0); // grayscale mode
;
	lda     #$00
	jsr     _ppu_mask
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; load_room();
;
	jsr     _load_room
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; room = 0;
;
	lda     #$00
	sta     _room
;
; ++frame_counter;
;
L1F00:	inc     _frame_counter
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; movement();
;
	jsr     _movement
;
; projectile_movement();
;
	jsr     _projectile_movement
;
; set_scroll_x(scroll_x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; handle_scrolling();
;
	jsr     _handle_scrolling
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1)
;
	jmp     L1F00

.endproc

