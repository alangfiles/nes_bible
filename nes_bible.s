;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_bank_bg
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_get_pad_new
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.export		_animate_orb_data
	.export		_animate_orb1_data
	.export		_animate_orb2_data
	.export		_animate_orb3_data
	.export		_animate_orb4_data
	.export		_animate_orb5_data
	.export		_animate_orb6_data
	.export		_animate_orb7_data
	.export		_animate_meter28_data
	.export		_animate_meter27_data
	.export		_animate_meter26_data
	.export		_animate_meter25_data
	.export		_animate_meter24_data
	.export		_animate_meter23_data
	.export		_animate_meter22_data
	.export		_animate_meter21_data
	.export		_animate_meter20_data
	.export		_animate_meter19_data
	.export		_animate_meter18_data
	.export		_animate_meter17_data
	.export		_animate_meter16_data
	.export		_animate_meter15_data
	.export		_animate_meter14_data
	.export		_animate_meter13_data
	.export		_animate_meter12_data
	.export		_animate_meter11_data
	.export		_animate_meter10_data
	.export		_animate_meter9_data
	.export		_animate_meter8_data
	.export		_animate_meter7_data
	.export		_animate_meter6_data
	.export		_animate_meter5_data
	.export		_animate_meter4_data
	.export		_animate_meter3_data
	.export		_animate_meter2_data
	.export		_animate_meter1_data
	.export		_animate_meter0_data
	.export		_animate_playerclimb1_data
	.export		_animate_playerclimb2_data
	.export		_animate_playerclimb3_data
	.export		_animate_playerstandright_data
	.export		_animate_playerstandleft_data
	.export		_animate_playerstandshootleft_data
	.export		_animate_playerstandshootright_data
	.export		_animate_playerrun1left_data
	.export		_animate_playerrun2left_data
	.export		_animate_playerrun3left_data
	.export		_animate_playerrun4left_data
	.export		_animate_playerrun5left_data
	.export		_animate_playerrun1right_data
	.export		_animate_playerrun2right_data
	.export		_animate_playerrun3right_data
	.export		_animate_playerrun4right_data
	.export		_animate_playerrun5right_data
	.export		_animate_playerrunshoot1left_data
	.export		_animate_playerrunshoot2left_data
	.export		_animate_playerrunshoot3left_data
	.export		_animate_playerrunshoot4left_data
	.export		_animate_playerrunshoot5left_data
	.export		_animate_playerrunshoot1right_data
	.export		_animate_playerrunshoot2right_data
	.export		_animate_playerrunshoot3right_data
	.export		_animate_playerrunshoot4right_data
	.export		_animate_playerrunshoot5right_data
	.export		_animate_playerjumpleft_data
	.export		_animate_playerjumpleftshoot_data
	.export		_animate_playerjumpright_data
	.export		_animate_playerjumprightshoot_data
	.export		_animate_playerfallwiggle1left_data
	.export		_animate_payerfallwiggle2left_data
	.export		_animate_playerfallwiggle1leftshoot_data
	.export		_animate_playerfallwiggle2leftshoot_data
	.export		_animate_playerfallwiggle1right_data
	.export		_animate_playerfallwiggle2right_data
	.export		_animate_playerfallwiggle1rightshoot_data
	.export		_animate_playerfallwiggle2rightshoot_data
	.export		_animate_hootyowl1_data
	.export		_animate_hootyowl2_data
	.export		_animate_hootyowl3_data
	.export		_animate_hootyowl4_data
	.export		_animate_hootyowl5_data
	.export		_animate_snail1_data
	.export		_animate_snail2_data
	.export		_animate_snail3_data
	.export		_animate_snake1_data
	.export		_animate_snake2_data
	.export		_animate_snake3_data
	.export		_animate_snake4_data
	.export		_animate_snake5_data
	.export		_animate_snake6_data
	.export		_animate_snake7_data
	.export		_animate_snake8_data
	.export		_animate_snake9_data
	.export		_animate_snake10_data
	.export		_animate_snake11_data
	.export		_animate_snake12_data
	.export		_animate_snake13_data
	.export		_animate_snake14_data
	.export		_animate_snake15_data
	.export		_animate_snake16_data
	.export		_animate_snake17_data
	.export		_animate_snake18_data
	.export		_animate_snake19_data
	.export		_animate_snake20_data
	.export		_animate_snake21_data
	.export		_animate_snake22_data
	.export		_animate_mole1_data
	.export		_animate_mole2_data
	.export		_animate_mole3_data
	.export		_animate_mole4_data
	.export		_animate_mole5_data
	.export		_animate_mole6_data
	.export		_animate_mole7_data
	.export		_animate_mole8_data
	.export		_animate_spider_data
	.export		_animate_mouse_data
	.export		_debug
	.export		_pad1
	.export		_pad1_new
	.export		_short_jump_count
	.export		_map_loaded
	.export		_collision
	.export		_player_in_air
	.export		_player_on_ladder
	.export		_player_jumping
	.export		_player_falling
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp5
	.export		_temp6
	.export		_temp_playerlocation
	.export		_temp_cmap1
	.export		_temp_cmap2
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_sprite_frame_counter
	.export		_frame_counter
	.export		_address
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_room
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_l_scroll_frames
	.export		_r_scroll_frames
	.export		_old_x
	.export		_old_y
	.export		_temp_x
	.export		_temp_y
	.export		_temp_room
	.export		_player_shooting
	.export		_projectile_cooldown
	.export		_projectile_count
	.export		_projectile_index
	.export		_projectiles_list
	.export		_projectiles_x
	.export		_projectiles_y
	.export		_sine_wave
	.export		_c_map
	.export		_c_map2
	.export		_Generic
	.export		_BoxGuy1
	.export		_palette_sp
	.export		_palette_bg
	.export		_metatile
	.export		_metatile_colision_map
	.export		_Leveltng_0
	.export		_Leveltng_1
	.export		_Leveltng_2
	.export		_Leveltng_3
	.export		_Leveltng_4
	.export		_Leveltng_5
	.export		_Leveltng_6
	.export		_Leveltng_7
	.export		_Leveltng_8
	.export		_Leveltng_9
	.export		_Leveltng_10
	.export		_level1_list
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision_sub
	.export		_draw_screen_R
	.export		_draw_screen_L
	.export		_new_cmap
	.export		_handle_scrolling
	.export		_projectile_movement
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_bg_coll_D2
	.export		_bg_collision_fast
	.export		_bg_coll_ladder
	.export		_draw_player_sprites
	.export		_main

.segment	"DATA"

_direction:
	.byte	$01
_room:
	.byte	$00
_projectiles_list:
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
_projectiles_x:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_projectiles_y:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_sine_wave:
	.byte	$05
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$08
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
_BoxGuy1:
	.word	$4000
	.word	$8400
	.res	4,$00

.segment	"RODATA"

_animate_orb_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$80
_animate_orb1_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$80
_animate_orb2_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$80
_animate_orb3_data:
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$80
_animate_orb4_data:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$00
	.byte	$80
_animate_orb5_data:
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$00
	.byte	$80
_animate_orb6_data:
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$80
_animate_orb7_data:
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$80
_animate_meter28_data:
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter27_data:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter26_data:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter25_data:
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter24_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter23_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter22_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter21_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter20_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter19_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter18_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter17_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter16_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter15_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter14_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter13_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter12_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter11_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter10_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter9_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter8_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter7_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter6_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter5_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter4_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter3_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$51
	.byte	$02
	.byte	$80
_animate_meter2_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$52
	.byte	$02
	.byte	$80
_animate_meter1_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$53
	.byte	$02
	.byte	$80
_animate_meter0_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$54
	.byte	$02
	.byte	$80
_animate_playerclimb1_data:
	.byte	$08
	.byte	$F8
	.byte	$06
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$26
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$80
_animate_playerclimb2_data:
	.byte	$08
	.byte	$F8
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$80
_animate_playerclimb3_data:
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$17
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$27
	.byte	$00
	.byte	$80
_animate_playerstandright_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$20
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerstandleft_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerstandshootleft_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerstandshootright_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$20
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerrun1left_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$18
	.byte	$08
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$80
_animate_playerrun2left_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$43
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$80
_animate_playerrun3left_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$80
_animate_playerrun4left_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$39
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$48
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$49
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$80
_animate_playerrun5left_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$3B
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$4B
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$4C
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$4D
	.byte	$00
	.byte	$80
_animate_playerrun1right_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$35
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$36
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$45
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$40
	.byte	$18
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$80
_animate_playerrun2right_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$32
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$42
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$80
_animate_playerrun3right_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$40
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$80
_animate_playerrun4right_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$38
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$39
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$48
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$49
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$80
_animate_playerrun5right_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$3B
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$4B
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$40
	.byte	$80
_animate_playerrunshoot1left_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$18
	.byte	$08
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerrunshoot2left_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$43
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerrunshoot3left_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerrunshoot4left_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$39
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$48
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$49
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerrunshoot5left_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$4B
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$4C
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$18
	.byte	$08
	.byte	$4D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerrunshoot1right_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$36
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$45
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$40
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerrunshoot2right_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$36
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$42
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerrunshoot3right_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$40
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerrunshoot4right_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$39
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$48
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$49
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerrunshoot5right_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$4B
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$40
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerjumpleft_data:
	.byte	$08
	.byte	$F8
	.byte	$55
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerjumpleftshoot_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerjumpright_data:
	.byte	$10
	.byte	$F8
	.byte	$55
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$56
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$65
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$75
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerjumprightshoot_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$56
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$75
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerfallwiggle1left_data:
	.byte	$08
	.byte	$F8
	.byte	$55
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$58
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$78
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_payerfallwiggle2left_data:
	.byte	$08
	.byte	$F8
	.byte	$57
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$67
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$77
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerfallwiggle1leftshoot_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$58
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$75
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$78
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerfallwiggle2leftshoot_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$77
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerfallwiggle1right_data:
	.byte	$10
	.byte	$F8
	.byte	$55
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$58
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$65
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$75
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerfallwiggle2right_data:
	.byte	$10
	.byte	$F8
	.byte	$57
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$56
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$67
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$77
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$76
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerfallwiggle1rightshoot_data:
	.byte	$10
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$58
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$40
	.byte	$10
	.byte	$08
	.byte	$75
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$78
	.byte	$40
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerfallwiggle2rightshoot_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$77
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$76
	.byte	$00
	.byte	$0C
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_hootyowl1_data:
	.byte	$00
	.byte	$00
	.byte	$E7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$F7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$E9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$F9
	.byte	$02
	.byte	$80
_animate_hootyowl2_data:
	.byte	$00
	.byte	$00
	.byte	$C7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$F7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$C9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$F9
	.byte	$02
	.byte	$80
_animate_hootyowl3_data:
	.byte	$00
	.byte	$00
	.byte	$A7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$A9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$B9
	.byte	$02
	.byte	$80
_animate_hootyowl4_data:
	.byte	$00
	.byte	$00
	.byte	$87
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$88
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$89
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$98
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$97
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$99
	.byte	$02
	.byte	$80
_animate_hootyowl5_data:
	.byte	$00
	.byte	$08
	.byte	$87
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$88
	.byte	$82
	.byte	$10
	.byte	$08
	.byte	$89
	.byte	$82
	.byte	$08
	.byte	$00
	.byte	$98
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$82
	.byte	$10
	.byte	$00
	.byte	$99
	.byte	$82
	.byte	$80
_animate_snail1_data:
	.byte	$00
	.byte	$00
	.byte	$ED
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$FD
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EF
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$FF
	.byte	$01
	.byte	$80
_animate_snail2_data:
	.byte	$00
	.byte	$00
	.byte	$CD
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$DD
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EF
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$DF
	.byte	$01
	.byte	$80
_animate_snail3_data:
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$BD
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EF
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$BF
	.byte	$01
	.byte	$80
_animate_snake1_data:
	.byte	$20
	.byte	$08
	.byte	$FA
	.byte	$C1
	.byte	$80
_animate_snake2_data:
	.byte	$20
	.byte	$00
	.byte	$FA
	.byte	$C1
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$80
_animate_snake3_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$80
_animate_snake4_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$80
_animate_snake5_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$FA
	.byte	$01
	.byte	$80
_animate_snake6_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake7_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$EC
	.byte	$C1
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake8_data:
	.byte	$20
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$FA
	.byte	$C1
	.byte	$80
_animate_snake9_data:
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$FA
	.byte	$C1
	.byte	$80
_animate_snake10_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$80
_animate_snake11_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$FB
	.byte	$01
	.byte	$80
_animate_snake12_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$FC
	.byte	$01
	.byte	$80
_animate_snake13_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$FB
	.byte	$01
	.byte	$80
_animate_snake14_data:
	.byte	$10
	.byte	$08
	.byte	$EC
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$80
_animate_snake15_data:
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$FA
	.byte	$01
	.byte	$80
_animate_snake16_data:
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake17_data:
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake18_data:
	.byte	$00
	.byte	$08
	.byte	$EC
	.byte	$C1
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake19_data:
	.byte	$00
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake20_data:
	.byte	$F8
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake21_data:
	.byte	$F0
	.byte	$00
	.byte	$EC
	.byte	$01
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake22_data:
	.byte	$F0
	.byte	$08
	.byte	$EC
	.byte	$01
	.byte	$80
_animate_mole1_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6F
	.byte	$03
	.byte	$80
_animate_mole2_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6C
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6D
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5D
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$03
	.byte	$80
_animate_mole3_data:
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$5A
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$6A
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6B
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5B
	.byte	$03
	.byte	$80
_animate_mole4_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6C
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6D
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5D
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$03
	.byte	$80
_animate_mole5_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$6E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$6F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$5F
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$5E
	.byte	$03
	.byte	$80
_animate_mole6_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$8C
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$8D
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7D
	.byte	$03
	.byte	$80
_animate_mole7_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$8E
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$8F
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7F
	.byte	$03
	.byte	$80
_animate_mole8_data:
	.byte	$08
	.byte	$08
	.byte	$AF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$8A
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$8B
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$7B
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$03
	.byte	$80
_animate_spider_data:
	.byte	$00
	.byte	$00
	.byte	$9B
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$9C
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AB
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$AB
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$AC
	.byte	$01
	.byte	$80
_animate_mouse_data:
	.byte	$00
	.byte	$08
	.byte	$A4
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$A5
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$95
	.byte	$03
	.byte	$80
_palette_sp:
	.byte	$0F
	.byte	$06
	.byte	$24
	.byte	$36
	.byte	$0F
	.byte	$21
	.byte	$2A
	.byte	$1A
	.byte	$0F
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$0F
	.byte	$21
	.byte	$20
	.byte	$10
_palette_bg:
	.byte	$21
	.byte	$0F
	.byte	$2D
	.byte	$10
	.byte	$21
	.byte	$30
	.byte	$29
	.byte	$06
	.byte	$21
	.byte	$0F
	.byte	$16
	.byte	$06
	.byte	$21
	.byte	$0F
	.byte	$19
	.byte	$29
_metatile:
	.byte	$7B
	.byte	$7C
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$7D
	.byte	$7E
	.byte	$8D
	.byte	$8E
	.byte	$00
	.byte	$9B
	.byte	$9C
	.byte	$AB
	.byte	$AC
	.byte	$00
	.byte	$9D
	.byte	$9E
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$BE
	.byte	$AF
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$BE
	.byte	$BE
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$8E
	.byte	$00
	.byte	$BE
	.byte	$BE
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$BE
	.byte	$B9
	.byte	$9B
	.byte	$9C
	.byte	$00
	.byte	$BE
	.byte	$BE
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$BE
	.byte	$BB
	.byte	$AB
	.byte	$AC
	.byte	$00
	.byte	$BE
	.byte	$AF
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$BE
	.byte	$BD
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$BE
	.byte	$BD
	.byte	$7D
	.byte	$7E
	.byte	$00
	.byte	$BA
	.byte	$BF
	.byte	$9B
	.byte	$9C
	.byte	$00
	.byte	$BA
	.byte	$B8
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$7B
	.byte	$AE
	.byte	$7C
	.byte	$7B
	.byte	$00
	.byte	$8B
	.byte	$8C
	.byte	$9B
	.byte	$9C
	.byte	$00
	.byte	$8D
	.byte	$8E
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$7B
	.byte	$7C
	.byte	$8B
	.byte	$01
	.byte	$00
	.byte	$AD
	.byte	$8E
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$AD
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$7E
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$9D
	.byte	$9E
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$AB
	.byte	$AC
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$7B
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$7B
	.byte	$AD
	.byte	$01
	.byte	$AE
	.byte	$00
	.byte	$7B
	.byte	$7C
	.byte	$01
	.byte	$7B
	.byte	$00
	.byte	$7A
	.byte	$7C
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$00
	.byte	$7B
	.byte	$6A
	.byte	$7C
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$76
	.byte	$85
	.byte	$86
	.byte	$02
	.byte	$65
	.byte	$66
	.byte	$85
	.byte	$86
	.byte	$02
	.byte	$75
	.byte	$76
	.byte	$95
	.byte	$96
	.byte	$02
	.byte	$74
	.byte	$76
	.byte	$84
	.byte	$86
	.byte	$02
	.byte	$75
	.byte	$77
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$64
	.byte	$66
	.byte	$84
	.byte	$86
	.byte	$02
	.byte	$65
	.byte	$67
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$74
	.byte	$76
	.byte	$94
	.byte	$96
	.byte	$02
	.byte	$75
	.byte	$77
	.byte	$95
	.byte	$97
	.byte	$02
	.byte	$BB
	.byte	$CD
	.byte	$CB
	.byte	$CB
	.byte	$02
	.byte	$CD
	.byte	$BC
	.byte	$DD
	.byte	$DC
	.byte	$02
	.byte	$CC
	.byte	$CD
	.byte	$DC
	.byte	$CB
	.byte	$02
	.byte	$CD
	.byte	$AF
	.byte	$DC
	.byte	$CB
	.byte	$02
	.byte	$CC
	.byte	$CF
	.byte	$CB
	.byte	$DF
	.byte	$02
	.byte	$CE
	.byte	$CD
	.byte	$DE
	.byte	$DC
	.byte	$02
	.byte	$CE
	.byte	$CD
	.byte	$DE
	.byte	$CB
	.byte	$02
	.byte	$65
	.byte	$66
	.byte	$95
	.byte	$96
	.byte	$02
	.byte	$64
	.byte	$66
	.byte	$94
	.byte	$96
	.byte	$02
	.byte	$65
	.byte	$67
	.byte	$95
	.byte	$97
	.byte	$02
	.byte	$EB
	.byte	$EB
	.byte	$FB
	.byte	$FC
	.byte	$03
	.byte	$EB
	.byte	$EA
	.byte	$FC
	.byte	$FB
	.byte	$03
	.byte	$FA
	.byte	$EB
	.byte	$FC
	.byte	$FC
	.byte	$03
	.byte	$EB
	.byte	$EC
	.byte	$FB
	.byte	$FC
	.byte	$03
	.byte	$98
	.byte	$99
	.byte	$A8
	.byte	$A9
	.byte	$03
	.byte	$9A
	.byte	$98
	.byte	$AA
	.byte	$A8
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$9A
	.byte	$98
	.byte	$03
	.byte	$7B
	.byte	$8B
	.byte	$AD
	.byte	$9B
	.byte	$00
	.byte	$8E
	.byte	$7B
	.byte	$9C
	.byte	$AE
	.byte	$00
	.byte	$8B
	.byte	$7C
	.byte	$9B
	.byte	$AD
	.byte	$00
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$02
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$CA
	.byte	$CA
	.byte	$DA
	.byte	$DA
	.byte	$00
	.byte	$38
	.byte	$36
	.byte	$36
	.byte	$36
	.byte	$02
	.byte	$37
	.byte	$36
	.byte	$36
	.byte	$36
	.byte	$02
	.byte	$37
	.byte	$39
	.byte	$36
	.byte	$37
	.byte	$02
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$30
	.byte	$02
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$02
	.byte	$31
	.byte	$31
	.byte	$31
	.byte	$31
	.byte	$02
	.byte	$32
	.byte	$30
	.byte	$34
	.byte	$31
	.byte	$02
	.byte	$30
	.byte	$33
	.byte	$30
	.byte	$35
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$1F
	.byte	$02
	.byte	$02
	.byte	$30
	.byte	$33
	.byte	$30
	.byte	$33
	.byte	$02
	.byte	$02
	.byte	$0D
	.byte	$0E
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$1F
	.byte	$02
	.byte	$02
	.byte	$2F
	.byte	$03
	.byte	$1B
	.byte	$0C
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$3F
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$2A
	.byte	$01
	.byte	$03
	.byte	$1A
	.byte	$01
	.byte	$01
	.byte	$2A
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$1A
	.byte	$03
	.byte	$F2
	.byte	$F2
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$F3
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$D4
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$82
	.byte	$03
	.byte	$01
	.byte	$2A
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$1A
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$AA
	.byte	$03
	.byte	$E8
	.byte	$03
	.byte	$A8
	.byte	$A9
	.byte	$68
	.byte	$FC
	.byte	$03
	.byte	$8A
	.byte	$03
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$E9
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$19
	.byte	$09
	.byte	$18
	.byte	$02
	.byte	$08
	.byte	$19
	.byte	$08
	.byte	$18
	.byte	$02
	.byte	$B1
	.byte	$B2
	.byte	$08
	.byte	$18
	.byte	$02
	.byte	$D4
	.byte	$B0
	.byte	$F3
	.byte	$C0
	.byte	$02
	.byte	$08
	.byte	$19
	.byte	$C1
	.byte	$C2
	.byte	$02
	.byte	$B3
	.byte	$F3
	.byte	$C3
	.byte	$D4
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$02
	.byte	$F1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$14
	.byte	$04
	.byte	$15
	.byte	$04
	.byte	$02
	.byte	$15
	.byte	$04
	.byte	$15
	.byte	$05
	.byte	$02
	.byte	$E5
	.byte	$E6
	.byte	$14
	.byte	$04
	.byte	$02
	.byte	$D4
	.byte	$E4
	.byte	$F3
	.byte	$F4
	.byte	$02
	.byte	$14
	.byte	$04
	.byte	$F5
	.byte	$F6
	.byte	$02
	.byte	$E7
	.byte	$F3
	.byte	$F7
	.byte	$D4
	.byte	$02
	.byte	$00
	.byte	$E2
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$E3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$17
	.byte	$06
	.byte	$17
	.byte	$02
	.byte	$07
	.byte	$16
	.byte	$07
	.byte	$17
	.byte	$02
	.byte	$06
	.byte	$17
	.byte	$07
	.byte	$17
	.byte	$02
	.byte	$E0
	.byte	$E1
	.byte	$06
	.byte	$16
	.byte	$02
	.byte	$D4
	.byte	$D0
	.byte	$F2
	.byte	$F2
	.byte	$02
	.byte	$D1
	.byte	$F3
	.byte	$F2
	.byte	$F2
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D2
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$AA
	.byte	$AA
	.byte	$03
	.byte	$04
	.byte	$E3
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$A9
	.byte	$A9
	.byte	$78
	.byte	$69
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$00
	.byte	$03
	.byte	$8A
	.byte	$00
	.byte	$8A
	.byte	$00
	.byte	$03
	.byte	$8A
	.byte	$00
	.byte	$79
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$F9
	.byte	$03
	.byte	$F9
	.byte	$E9
	.byte	$AA
	.byte	$AA
	.byte	$03
	.byte	$90
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$91
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$92
	.byte	$92
	.byte	$02
	.byte	$92
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$92
	.byte	$90
	.byte	$02
	.byte	$68
	.byte	$A8
	.byte	$01
	.byte	$69
	.byte	$03
	.byte	$68
	.byte	$69
	.byte	$EE
	.byte	$ED
	.byte	$03
	.byte	$68
	.byte	$68
	.byte	$EF
	.byte	$EE
	.byte	$03
	.byte	$69
	.byte	$68
	.byte	$EE
	.byte	$ED
	.byte	$03
	.byte	$68
	.byte	$EF
	.byte	$EF
	.byte	$FF
	.byte	$03
	.byte	$69
	.byte	$ED
	.byte	$EE
	.byte	$EE
	.byte	$03
	.byte	$A9
	.byte	$68
	.byte	$68
	.byte	$01
	.byte	$03
	.byte	$AA
	.byte	$A8
	.byte	$68
	.byte	$69
	.byte	$03
	.byte	$AA
	.byte	$A8
	.byte	$68
	.byte	$68
	.byte	$03
	.byte	$A9
	.byte	$8A
	.byte	$AA
	.byte	$8A
	.byte	$03
	.byte	$A8
	.byte	$8A
	.byte	$AA
	.byte	$8A
	.byte	$03
	.byte	$A8
	.byte	$A9
	.byte	$A9
	.byte	$AA
	.byte	$03
	.byte	$AA
	.byte	$A9
	.byte	$A8
	.byte	$A8
	.byte	$03
	.byte	$A9
	.byte	$AA
	.byte	$AA
	.byte	$A9
	.byte	$03
	.byte	$A8
	.byte	$A8
	.byte	$A9
	.byte	$A8
	.byte	$03
	.byte	$A9
	.byte	$A9
	.byte	$AA
	.byte	$A9
	.byte	$03
	.byte	$00
	.byte	$7A
	.byte	$88
	.byte	$AA
	.byte	$03
	.byte	$00
	.byte	$88
	.byte	$88
	.byte	$AA
	.byte	$03
	.byte	$6A
	.byte	$00
	.byte	$AA
	.byte	$6A
	.byte	$03
	.byte	$89
	.byte	$00
	.byte	$A8
	.byte	$89
	.byte	$03
	.byte	$A9
	.byte	$6A
	.byte	$AA
	.byte	$AA
	.byte	$03
	.byte	$01
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$FE
	.byte	$03
	.byte	$EF
	.byte	$EF
	.byte	$FE
	.byte	$FD
	.byte	$03
	.byte	$ED
	.byte	$EE
	.byte	$FE
	.byte	$FF
	.byte	$03
	.byte	$FD
	.byte	$FE
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$A9
	.byte	$79
	.byte	$FF
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$3F
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$2F
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$1F
	.byte	$1F
	.byte	$02
	.byte	$03
	.byte	$0F
	.byte	$02
	.byte	$01
	.byte	$0F
	.byte	$03
	.byte	$02
	.byte	$2F
	.byte	$11
	.byte	$11
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$11
	.byte	$11
	.byte	$03
	.byte	$03
	.byte	$61
	.byte	$60
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$62
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$61
	.byte	$03
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$72
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$03
	.byte	$FF
	.byte	$FD
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$20
	.byte	$20
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$3F
	.byte	$03
	.byte	$02
	.byte	$3F
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$0E
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$03
	.byte	$0E
	.byte	$01
	.byte	$3F
	.byte	$03
	.byte	$02
	.byte	$3F
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$62
	.byte	$60
	.byte	$03
	.byte	$02
	.byte	$61
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$72
	.byte	$01
	.byte	$61
	.byte	$03
	.byte	$03
	.byte	$62
	.byte	$01
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$B5
	.byte	$B6
	.byte	$C5
	.byte	$C6
	.byte	$02
	.byte	$01
	.byte	$B4
	.byte	$01
	.byte	$C4
	.byte	$02
	.byte	$B7
	.byte	$01
	.byte	$C7
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$A5
	.byte	$A6
	.byte	$02
	.byte	$D5
	.byte	$D6
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$9F
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$D8
	.byte	$D9
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$D9
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$C8
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$C9
	.byte	$01
	.byte	$D9
	.byte	$02
	.byte	$D8
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$D8
	.byte	$01
	.byte	$01
	.byte	$C9
	.byte	$02
	.byte	$01
	.byte	$D8
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$5E
	.byte	$6C
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6C
	.byte	$00
	.byte	$6B
	.byte	$5E
	.byte	$03
	.byte	$6D
	.byte	$00
	.byte	$6B
	.byte	$5E
	.byte	$6D
	.byte	$5D
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$03
	.byte	$6D
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$6D
	.byte	$20
	.byte	$6D
	.byte	$20
	.byte	$00
	.byte	$20
	.byte	$6E
	.byte	$6F
	.byte	$20
	.byte	$00
	.byte	$6D
	.byte	$14
	.byte	$03
	.byte	$6F
	.byte	$00
	.byte	$20
	.byte	$6E
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$6E
	.byte	$6E
	.byte	$20
	.byte	$6E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$6D
	.byte	$6D
	.byte	$A3
	.byte	$A7
	.byte	$00
	.byte	$5D
	.byte	$5B
	.byte	$20
	.byte	$9F
	.byte	$00
	.byte	$5C
	.byte	$80
	.byte	$9F
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5B
	.byte	$5C
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$9F
	.byte	$5F
	.byte	$00
	.byte	$5B
	.byte	$5C
	.byte	$9F
	.byte	$01
	.byte	$00
	.byte	$6B
	.byte	$6C
	.byte	$01
	.byte	$A3
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$A4
	.byte	$03
	.byte	$00
	.byte	$A3
	.byte	$A7
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$03
	.byte	$6D
	.byte	$A7
	.byte	$03
	.byte	$00
	.byte	$9F
	.byte	$9F
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$9F
	.byte	$01
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$6E
	.byte	$9F
	.byte	$6E
	.byte	$8F
	.byte	$00
	.byte	$8F
	.byte	$7F
	.byte	$6E
	.byte	$6E
	.byte	$00
	.byte	$9F
	.byte	$9F
	.byte	$8F
	.byte	$7F
	.byte	$00
	.byte	$7F
	.byte	$9F
	.byte	$6E
	.byte	$8F
	.byte	$00
_metatile_colision_map:
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$01
	.byte	$01
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_Leveltng_0:
	.byte	$3C
	.byte	$1E
	.byte	$1F
	.byte	$50
	.byte	$95
	.byte	$94
	.byte	$91
	.byte	$8E
	.byte	$93
	.byte	$92
	.byte	$8E
	.byte	$92
	.byte	$92
	.byte	$94
	.byte	$92
	.byte	$91
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$1F
	.byte	$92
	.byte	$94
	.byte	$91
	.byte	$90
	.byte	$8F
	.byte	$91
	.byte	$92
	.byte	$8E
	.byte	$92
	.byte	$91
	.byte	$92
	.byte	$92
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$1E
	.byte	$92
	.byte	$90
	.byte	$91
	.byte	$94
	.byte	$8F
	.byte	$91
	.byte	$90
	.byte	$8E
	.byte	$92
	.byte	$91
	.byte	$94
	.byte	$92
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$90
	.byte	$92
	.byte	$90
	.byte	$92
	.byte	$8E
	.byte	$90
	.byte	$91
	.byte	$8F
	.byte	$94
	.byte	$91
	.byte	$90
	.byte	$94
	.byte	$02
	.byte	$03
	.byte	$15
	.byte	$1B
	.byte	$92
	.byte	$92
	.byte	$90
	.byte	$90
	.byte	$8E
	.byte	$92
	.byte	$93
	.byte	$8F
	.byte	$92
	.byte	$91
	.byte	$93
	.byte	$90
	.byte	$00
	.byte	$15
	.byte	$51
	.byte	$51
	.byte	$85
	.byte	$92
	.byte	$90
	.byte	$91
	.byte	$8B
	.byte	$88
	.byte	$8C
	.byte	$8E
	.byte	$87
	.byte	$85
	.byte	$87
	.byte	$8B
	.byte	$02
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$9B
	.byte	$8C
	.byte	$8B
	.byte	$88
	.byte	$9C
	.byte	$73
	.byte	$9A
	.byte	$8B
	.byte	$6A
	.byte	$9A
	.byte	$83
	.byte	$9C
	.byte	$10
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$50
	.byte	$AF
	.byte	$62
	.byte	$AF
	.byte	$76
	.byte	$71
	.byte	$77
	.byte	$AF
	.byte	$69
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$12
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$50
	.byte	$50
	.byte	$60
	.byte	$67
	.byte	$50
	.byte	$71
	.byte	$50
	.byte	$50
	.byte	$69
	.byte	$6F
	.byte	$50
	.byte	$50
	.byte	$01
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$58
	.byte	$59
	.byte	$61
	.byte	$58
	.byte	$59
	.byte	$72
	.byte	$58
	.byte	$59
	.byte	$68
	.byte	$58
	.byte	$59
	.byte	$58
	.byte	$03
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$74
	.byte	$55
	.byte	$75
	.byte	$51
	.byte	$69
	.byte	$52
	.byte	$51
	.byte	$74
	.byte	$00
	.byte	$0F
	.byte	$04
	.byte	$0C
	.byte	$54
	.byte	$51
	.byte	$55
	.byte	$54
	.byte	$56
	.byte	$55
	.byte	$51
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$53
	.byte	$51
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$0F
	.byte	$06
	.byte	$08
	.byte	$0C
	.byte	$54
	.byte	$51
	.byte	$51
	.byte	$54
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$00
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
_Leveltng_1:
	.byte	$92
	.byte	$8F
	.byte	$92
	.byte	$90
	.byte	$92
	.byte	$92
	.byte	$92
	.byte	$8E
	.byte	$92
	.byte	$92
	.byte	$92
	.byte	$92
	.byte	$99
	.byte	$7B
	.byte	$50
	.byte	$50
	.byte	$94
	.byte	$8F
	.byte	$94
	.byte	$92
	.byte	$94
	.byte	$94
	.byte	$93
	.byte	$92
	.byte	$8E
	.byte	$92
	.byte	$90
	.byte	$90
	.byte	$92
	.byte	$7C
	.byte	$50
	.byte	$50
	.byte	$90
	.byte	$8F
	.byte	$94
	.byte	$92
	.byte	$93
	.byte	$90
	.byte	$94
	.byte	$92
	.byte	$8E
	.byte	$92
	.byte	$90
	.byte	$90
	.byte	$92
	.byte	$7C
	.byte	$50
	.byte	$50
	.byte	$91
	.byte	$8F
	.byte	$93
	.byte	$93
	.byte	$92
	.byte	$91
	.byte	$91
	.byte	$93
	.byte	$8F
	.byte	$92
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$7D
	.byte	$50
	.byte	$50
	.byte	$8F
	.byte	$94
	.byte	$8E
	.byte	$91
	.byte	$92
	.byte	$91
	.byte	$94
	.byte	$94
	.byte	$8E
	.byte	$8D
	.byte	$85
	.byte	$92
	.byte	$8E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$90
	.byte	$8C
	.byte	$8E
	.byte	$91
	.byte	$91
	.byte	$92
	.byte	$8D
	.byte	$8E
	.byte	$8B
	.byte	$62
	.byte	$9C
	.byte	$8B
	.byte	$9F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$8B
	.byte	$62
	.byte	$88
	.byte	$8B
	.byte	$8D
	.byte	$8B
	.byte	$71
	.byte	$87
	.byte	$9A
	.byte	$61
	.byte	$67
	.byte	$9E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$73
	.byte	$61
	.byte	$AF
	.byte	$AF
	.byte	$9B
	.byte	$6A
	.byte	$70
	.byte	$AF
	.byte	$DD
	.byte	$61
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$71
	.byte	$60
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$69
	.byte	$71
	.byte	$77
	.byte	$50
	.byte	$61
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$72
	.byte	$60
	.byte	$58
	.byte	$58
	.byte	$59
	.byte	$68
	.byte	$72
	.byte	$58
	.byte	$59
	.byte	$61
	.byte	$58
	.byte	$59
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$53
	.byte	$51
	.byte	$69
	.byte	$72
	.byte	$51
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$54
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$55
	.byte	$55
	.byte	$57
	.byte	$51
	.byte	$54
	.byte	$68
	.byte	$55
	.byte	$75
	.byte	$56
	.byte	$55
	.byte	$57
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$53
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$51
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$57
	.byte	$51
	.byte	$53
	.byte	$51
	.byte	$51
	.byte	$54
	.byte	$0F
	.byte	$04
	.byte	$0C
	.byte	$0B
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$04
	.byte	$08
	.byte	$06
	.byte	$07
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$0D
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
_Leveltng_2:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DE
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$35
	.byte	$34
	.byte	$A4
	.byte	$A1
	.byte	$AB
	.byte	$A7
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$AB
	.byte	$A8
	.byte	$B0
	.byte	$35
	.byte	$36
	.byte	$25
	.byte	$21
	.byte	$51
	.byte	$A0
	.byte	$B0
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$AB
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$25
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$A3
	.byte	$A2
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$A7
	.byte	$35
	.byte	$36
	.byte	$23
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$A5
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$35
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$36
	.byte	$31
	.byte	$30
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
_Leveltng_3:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$96
	.byte	$90
	.byte	$91
	.byte	$90
	.byte	$98
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$95
	.byte	$90
	.byte	$91
	.byte	$90
	.byte	$90
	.byte	$90
	.byte	$99
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$92
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$90
	.byte	$90
	.byte	$8F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$92
	.byte	$91
	.byte	$91
	.byte	$91
	.byte	$90
	.byte	$90
	.byte	$8E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$85
	.byte	$92
	.byte	$91
	.byte	$90
	.byte	$91
	.byte	$8E
	.byte	$8C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$85
	.byte	$8C
	.byte	$85
	.byte	$86
	.byte	$8C
	.byte	$9A
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AF
	.byte	$9C
	.byte	$6A
	.byte	$9A
	.byte	$AF
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$6E
	.byte	$69
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$68
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$33
	.byte	$36
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$69
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$21
	.byte	$26
	.byte	$35
	.byte	$36
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$A7
	.byte	$4D
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$53
	.byte	$4F
	.byte	$A7
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$B0
	.byte	$A7
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$4A
	.byte	$4B
	.byte	$5A
	.byte	$4B
	.byte	$5B
	.byte	$4C
	.byte	$B0
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$24
	.byte	$35
	.byte	$34
	.byte	$36
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$A8
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$30
	.byte	$30
	.byte	$32
	.byte	$35
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$36
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
_Leveltng_4:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$40
	.byte	$41
	.byte	$41
	.byte	$41
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$95
	.byte	$99
	.byte	$7B
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$7A
	.byte	$8D
	.byte	$7D
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$43
	.byte	$51
	.byte	$45
	.byte	$51
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$A8
	.byte	$7E
	.byte	$78
	.byte	$5F
	.byte	$B0
	.byte	$AB
	.byte	$46
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$B0
	.byte	$A8
	.byte	$35
	.byte	$34
	.byte	$36
	.byte	$B0
	.byte	$A8
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$B1
	.byte	$A8
	.byte	$B0
	.byte	$35
	.byte	$36
	.byte	$25
	.byte	$21
	.byte	$26
	.byte	$35
	.byte	$36
	.byte	$AA
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$A8
	.byte	$A7
	.byte	$35
	.byte	$34
	.byte	$34
	.byte	$31
	.byte	$30
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$30
	.byte	$32
	.byte	$35
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$36
	.byte	$31
	.byte	$30
	.byte	$30
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
_Leveltng_5:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DE
	.byte	$50
	.byte	$B2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$95
	.byte	$99
	.byte	$7B
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$41
	.byte	$41
	.byte	$42
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$90
	.byte	$92
	.byte	$7C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$B2
	.byte	$50
	.byte	$50
	.byte	$44
	.byte	$44
	.byte	$49
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$7A
	.byte	$8D
	.byte	$7D
	.byte	$50
	.byte	$40
	.byte	$41
	.byte	$41
	.byte	$41
	.byte	$42
	.byte	$50
	.byte	$44
	.byte	$51
	.byte	$49
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$6E
	.byte	$79
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$49
	.byte	$AC
	.byte	$44
	.byte	$45
	.byte	$47
	.byte	$51
	.byte	$4F
	.byte	$A8
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$A9
	.byte	$43
	.byte	$51
	.byte	$44
	.byte	$51
	.byte	$49
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$B0
	.byte	$46
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$49
	.byte	$51
	.byte	$34
	.byte	$36
	.byte	$B0
	.byte	$AB
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$A7
	.byte	$B0
	.byte	$A7
	.byte	$B1
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$30
	.byte	$32
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
_Leveltng_6:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$B2
	.byte	$50
	.byte	$B2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$40
	.byte	$41
	.byte	$41
	.byte	$41
	.byte	$42
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$49
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$51
	.byte	$45
	.byte	$51
	.byte	$49
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$45
	.byte	$49
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$49
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$51
	.byte	$44
	.byte	$51
	.byte	$49
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$B0
	.byte	$A7
	.byte	$46
	.byte	$44
	.byte	$44
	.byte	$48
	.byte	$47
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$4F
	.byte	$7E
	.byte	$7F
	.byte	$5F
	.byte	$B0
	.byte	$A7
	.byte	$4F
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B1
	.byte	$A8
	.byte	$A8
	.byte	$B0
	.byte	$AB
	.byte	$B0
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$A7
	.byte	$AA
	.byte	$B1
	.byte	$A8
	.byte	$A8
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$36
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
_Leveltng_7:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D6
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D0
	.byte	$D5
	.byte	$D4
	.byte	$D4
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$A8
	.byte	$A7
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$AB
	.byte	$B0
	.byte	$0E
	.byte	$0D
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$A7
	.byte	$AA
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$0E
	.byte	$0D
	.byte	$00
	.byte	$3C
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$0E
	.byte	$09
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$12
	.byte	$02
	.byte	$01
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
_Leveltng_8:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D3
	.byte	$50
	.byte	$50
	.byte	$C5
	.byte	$D1
	.byte	$D3
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D5
	.byte	$0E
	.byte	$50
	.byte	$D0
	.byte	$D4
	.byte	$D6
	.byte	$D7
	.byte	$EC
	.byte	$EB
	.byte	$EA
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$D0
	.byte	$D5
	.byte	$D4
	.byte	$D4
	.byte	$00
	.byte	$D2
	.byte	$D4
	.byte	$D4
	.byte	$D6
	.byte	$D9
	.byte	$DA
	.byte	$EE
	.byte	$E9
	.byte	$E9
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$D4
	.byte	$0F
	.byte	$0C
	.byte	$02
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D8
	.byte	$DA
	.byte	$EF
	.byte	$E9
	.byte	$E9
	.byte	$EB
	.byte	$EA
	.byte	$E7
	.byte	$3C
	.byte	$12
	.byte	$3A
	.byte	$0E
	.byte	$07
	.byte	$04
	.byte	$06
	.byte	$04
	.byte	$0C
	.byte	$D8
	.byte	$DB
	.byte	$EE
	.byte	$0E
	.byte	$0C
	.byte	$E9
	.byte	$EB
	.byte	$12
	.byte	$10
	.byte	$12
	.byte	$00
	.byte	$3C
	.byte	$12
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$00
	.byte	$01
	.byte	$AA
	.byte	$B0
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$12
	.byte	$11
	.byte	$B0
	.byte	$B0
	.byte	$A9
	.byte	$02
	.byte	$03
	.byte	$B0
	.byte	$A7
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$00
	.byte	$01
	.byte	$B0
	.byte	$B0
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$3C
	.byte	$10
	.byte	$03
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$02
	.byte	$03
	.byte	$A6
	.byte	$A6
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$38
	.byte	$38
	.byte	$51
	.byte	$51
	.byte	$38
	.byte	$38
	.byte	$37
_Leveltng_9:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$E3
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0A
	.byte	$06
	.byte	$0C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D3
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$E4
	.byte	$E2
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$C5
	.byte	$D0
	.byte	$D4
	.byte	$D9
	.byte	$EC
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$0A
	.byte	$06
	.byte	$0D
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D4
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$DB
	.byte	$3B
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$E4
	.byte	$E5
	.byte	$E8
	.byte	$D6
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$D4
	.byte	$D8
	.byte	$12
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$3C
	.byte	$E9
	.byte	$EB
	.byte	$EB
	.byte	$E7
	.byte	$DF
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$D9
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$01
	.byte	$0E
	.byte	$0A
	.byte	$0C
	.byte	$A7
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$A9
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$3A
	.byte	$10
	.byte	$3C
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$AB
	.byte	$B0
	.byte	$B0
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$3C
	.byte	$3C
	.byte	$03
	.byte	$00
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$B0
	.byte	$AB
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$10
	.byte	$3C
	.byte	$12
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$0E
	.byte	$09
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$10
	.byte	$00
_Leveltng_10:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$02
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$02
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$3D
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$E1
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$0E
	.byte	$05
	.byte	$07
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$E9
	.byte	$EB
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$3C
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$12
	.byte	$02
	.byte	$3C
	.byte	$00
	.byte	$ED
	.byte	$EF
	.byte	$EB
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$02
	.byte	$DB
	.byte	$DB
	.byte	$EB
	.byte	$EB
	.byte	$E3
	.byte	$AC
	.byte	$3D
	.byte	$02
	.byte	$03
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$DA
	.byte	$DB
	.byte	$EF
	.byte	$EB
	.byte	$0F
	.byte	$07
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$A7
	.byte	$B0
	.byte	$AA
	.byte	$AB
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$25
	.byte	$B0
	.byte	$0F
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$12
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$25
	.byte	$20
	.byte	$B0
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$3C
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$25
	.byte	$20
	.byte	$20
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$3C
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$25
	.byte	$21
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$25
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
_level1_list:
	.addr	_Leveltng_0
	.addr	_Leveltng_1
	.addr	_Leveltng_2
	.addr	_Leveltng_3
	.addr	_Leveltng_4
	.addr	_Leveltng_5
	.addr	_Leveltng_6
	.addr	_Leveltng_7
	.addr	_Leveltng_8
	.addr	_Leveltng_9
	.addr	_Leveltng_10

.segment	"BSS"

.segment	"ZEROPAGE"
_debug:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_short_jump_count:
	.res	1,$00
_map_loaded:
	.res	1,$00
_collision:
	.res	1,$00
_player_in_air:
	.res	1,$00
_player_on_ladder:
	.res	1,$00
_player_jumping:
	.res	1,$00
_player_falling:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_temp_playerlocation:
	.res	2,$00
_temp_cmap1:
	.res	1,$00
_temp_cmap2:
	.res	1,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_sprite_frame_counter:
	.res	1,$00
_frame_counter:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scroll_count:
	.res	1,$00
_pseudo_scroll_x:
	.res	2,$00
_l_scroll_frames:
	.res	1,$00
_r_scroll_frames:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_temp_room:
	.res	1,$00
_player_shooting:
	.res	1,$00
_projectile_cooldown:
	.res	1,$00
_projectile_count:
	.res	1,$00
_projectile_index:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_Generic:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; set_data_pointer(level1_list[0]);
;
	lda     _level1_list
	ldx     _level1_list+1
	jsr     _set_data_pointer
;
; set_mt_pointer(metatile);
;
	lda     #<(_metatile)
	ldx     #>(_metatile)
	jsr     _set_mt_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L21B5:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L21B4:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L21B7
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L21B4
;
; if (y == 0xe0)
;
L21B7:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L1E66
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L21B5
;
; set_data_pointer(level1_list[1]);
;
L1E66:	lda     _level1_list+2
	ldx     _level1_list+2+1
	jsr     _set_data_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L21B6:	sta     _y
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; address = get_ppu_addr(1, x, y);
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0);
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (y == 0xe0)
;
	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L1E8A
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L21B6
;
; memcpy(c_map, level1_list[0], 240);
;
L1E8A:	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	lda     _level1_list
	ldx     _level1_list+1
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; temp_cmap1 = 0;
;
	lda     #$00
	sta     _temp_cmap1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_player_sprites();
;
	jsr     _draw_player_sprites
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	lda     #$00
	sta     _temp1
L21B8:	lda     _temp1
	cmp     #$03
	bcs     L1EAC
;
; if (projectiles_list[temp1] != OFF)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	beq     L21B9
;
; temp6 = projectiles_y[temp1] + sine_wave[frame_counter % 10];
;
	ldy     _temp1
	lda     _projectiles_y,y
	jsr     pusha0
	lda     _frame_counter
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	sta     ptr1
	txa
	clc
	adc     #>(_sine_wave)
	sta     ptr1+1
	ldy     #<(_sine_wave)
	lda     (ptr1),y
	jsr     tosadda0
	sta     _temp6
	stx     _temp6+1
;
; oam_meta_spr(projectiles_x[temp1], temp6, animate_orb1_data);
;
	jsr     decsp2
	ldy     _temp1
	lda     _projectiles_x,y
	ldy     #$01
	sta     (sp),y
	lda     _temp6
	dey
	sta     (sp),y
	lda     #<(_animate_orb1_data)
	ldx     #>(_animate_orb1_data)
	jsr     _oam_meta_spr
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
L21B9:	inc     _temp1
	jmp     L21B8
;
; if (debug)
;
L1EAC:	lda     _debug
	bne     L21BA
;
; }
;
	rts
;
; oam_spr(20, 010, 0x58, 1); // 0xfe = X
;
L21BA:	jsr     decsp3
	lda     #$14
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$58
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = (scroll_x) >> 8;
;
	lda     _scroll_x+1
	sta     _temp1
;
; oam_spr(28, 010, temp1 + 0x30, 1);
;
	jsr     decsp3
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = (scroll_x & 0xff) >> 4;
;
	lda     _scroll_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; oam_spr(36, 010, temp1 + 0x30, 1);
;
	jsr     decsp3
	lda     #$24
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = (scroll_x & 0x0f);
;
	lda     _scroll_x
	and     #$0F
	sta     _temp1
;
; oam_spr(44, 010, temp1 + 0x30, 1);
;
	jsr     decsp3
	lda     #$2C
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; temp1 = room;
;
	lda     _room
	sta     _temp1
;
; oam_spr(58, 010, 0x52, 1); // 0xfd = R
;
	jsr     decsp3
	lda     #$3A
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$52
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(66, 010, temp1 + 0x30, 1);
;
	jsr     decsp3
	lda     #$42
	ldy     #$02
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$01
	jsr     _oam_spr
;
; oam_spr(20, 20, 0x58, 2); // 0xfe = X
;
	jsr     decsp3
	lda     #$14
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$58
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; temp1 = (BoxGuy1.x >> 8 & 0xff) >> 4;
;
	lda     _BoxGuy1+1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp1
;
; oam_spr(28, 20, temp1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$1C
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; temp1 = (BoxGuy1.x >> 8 & 0x0f);
;
	lda     _BoxGuy1+1
	and     #$0F
	sta     _temp1
;
; oam_spr(36, 20, temp1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$24
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(50, 20, 0xff, 2); // 0xff = Y
;
	jsr     decsp3
	lda     #$32
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     #$FF
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(58, 20, temp_cmap1 + 0x30, 2);
;
	jsr     decsp3
	lda     #$3A
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp_cmap1
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jsr     _oam_spr
;
; oam_spr(80, 20, temp_cmap2 + 0x30, 2);
;
	jsr     decsp3
	lda     #$50
	ldy     #$02
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	lda     _temp_cmap2
	clc
	adc     #$30
	dey
	sta     (sp),y
	lda     #$02
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; old_x = BoxGuy1.x;
;
	lda     _BoxGuy1+1
	sta     _old_x+1
	lda     _BoxGuy1
	sta     _old_x
;
; if (pad1 & PAD_LEFT)
;
	lda     _pad1
	and     #$02
	beq     L21C5
;
; direction = LEFT;
;
	lda     #$00
	sta     _direction
;
; if (BoxGuy1.vel_x >= DECEL)
;
	lda     _BoxGuy1+4
	cmp     #$32
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L1F22
	eor     #$80
L1F22:	bpl     L1F20
;
; BoxGuy1.vel_x -= DECEL;
;
	lda     _BoxGuy1+4
	sec
	sbc     #$32
	sta     _BoxGuy1+4
	jcs     L1F5C
	dec     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x > 0)
;
	jmp     L1F5C
L1F20:	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L1F29
	eor     #$80
L1F29:	bpl     L1F27
;
; BoxGuy1.vel_x = 0;
;
	ldx     #$00
	txa
;
; else
;
	jmp     L21C7
;
; BoxGuy1.vel_x -= ACCEL;
;
L1F27:	lda     _BoxGuy1+4
	sec
	sbc     #$1E
	sta     _BoxGuy1+4
	bcs     L1F2F
	dec     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x < -MAX_SPEED)
;
L1F2F:	lda     _BoxGuy1+4
	cmp     #$80
	lda     _BoxGuy1+4+1
	sbc     #$FE
	bvc     L1F32
	eor     #$80
L1F32:	jpl     L1F5C
;
; BoxGuy1.vel_x = -MAX_SPEED;
;
	ldx     #$FE
	lda     #$80
;
; else if (pad1 & PAD_RIGHT)
;
	jmp     L21C7
L21C5:	lda     _pad1
	and     #$01
	beq     L1F36
;
; direction = RIGHT;
;
	lda     #$01
	sta     _direction
;
; if (BoxGuy1.vel_x <= DECEL)
;
	lda     _BoxGuy1+4
	cmp     #$33
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvc     L1F3C
	eor     #$80
L1F3C:	bpl     L1F3A
;
; BoxGuy1.vel_x += DECEL;
;
	lda     #$32
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	jcc     L1F5C
	inc     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x < 0)
;
	jmp     L1F5C
L1F3A:	ldx     _BoxGuy1+4+1
	cpx     #$80
	bcc     L1F41
;
; BoxGuy1.vel_x = 0;
;
	ldx     #$00
	txa
;
; else
;
	jmp     L21C7
;
; BoxGuy1.vel_x += ACCEL;
;
L1F41:	lda     #$1E
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L1F48
	inc     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x >= MAX_SPEED)
;
L1F48:	lda     _BoxGuy1+4
	cmp     #$80
	lda     _BoxGuy1+4+1
	sbc     #$01
	bvs     L1F4B
	eor     #$80
L1F4B:	bpl     L1F5C
;
; BoxGuy1.vel_x = MAX_SPEED;
;
	ldx     #$01
	lda     #$80
;
; else
;
	jmp     L21C7
;
; if (BoxGuy1.vel_x >= ACCEL)
;
L1F36:	lda     _BoxGuy1+4
	cmp     #$1E
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L1F51
	eor     #$80
L1F51:	bpl     L1F4F
;
; BoxGuy1.vel_x -= ACCEL;
;
	lda     _BoxGuy1+4
	sec
	sbc     #$1E
	sta     _BoxGuy1+4
	bcs     L1F5C
	dec     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x < -ACCEL)
;
	jmp     L1F5C
L1F4F:	lda     _BoxGuy1+4
	cmp     #$E2
	lda     _BoxGuy1+4+1
	sbc     #$FF
	bvc     L1F58
	eor     #$80
L1F58:	asl     a
	lda     #$00
	tax
	bcc     L21C7
;
; BoxGuy1.vel_x += ACCEL;
;
	lda     #$1E
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L1F5C
	inc     _BoxGuy1+4+1
;
; else
;
	jmp     L1F5C
;
; BoxGuy1.vel_x = 0;
;
L21C7:	sta     _BoxGuy1+4
	stx     _BoxGuy1+4+1
;
; BoxGuy1.x += BoxGuy1.vel_x;
;
L1F5C:	lda     _BoxGuy1+4
	clc
	adc     _BoxGuy1
	sta     _BoxGuy1
	lda     _BoxGuy1+4+1
	adc     _BoxGuy1+1
	sta     _BoxGuy1+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L21CA
;
; if (old_x >= 0x8000)
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L21C9
;
; BoxGuy1.x = 0xf000; // max right
;
	ldx     #$F0
;
; BoxGuy1.x = 0x0000; // max left
;
L21C9:	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; Generic.x = high_byte(BoxGuy1.x); // this is much faster than passing a pointer to BoxGuy1
;
L21CA:	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$13
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	lda     #$0E
	sta     _Generic+3
;
; if (BoxGuy1.vel_x < 0)
;
	ldx     _BoxGuy1+4+1
	cpx     #$80
	bcc     L1F77
;
; if (bg_coll_L())
;
	jsr     _bg_coll_L
	tax
	beq     L1F91
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_L;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_L
	sta     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L1F91
;
; BoxGuy1.x = 0xf000;
;
	ldx     #$F0
;
; else if (BoxGuy1.vel_x > 0)
;
	jmp     L21E8
L1F77:	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L1F88
	eor     #$80
L1F88:	bpl     L1F91
;
; if (bg_coll_R())
;
	jsr     _bg_coll_R
	tax
	beq     L1F91
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_R;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_R
	sta     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L1F91
;
; BoxGuy1.x = 0x0000;
;
	ldx     #$00
L21E8:	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; if (player_on_ladder && bg_coll_ladder())
;
L1F91:	lda     _player_on_ladder
	beq     L21CC
	jsr     _bg_coll_ladder
	tax
	beq     L21CC
;
; BoxGuy1.vel_y = 0;
;
	ldx     #$00
;
; else
;
	jmp     L21E9
;
; player_on_ladder = 0;
;
L21CC:	sta     _player_on_ladder
;
; if (BoxGuy1.vel_y < 0x300)
;
	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$03
	bvc     L1FA0
	eor     #$80
L1FA0:	bpl     L1F9E
;
; if (BoxGuy1.vel_y < 0)
;
	ldx     _BoxGuy1+6+1
	cpx     #$80
	lda     #$00
	bcc     L21CE
;
; player_jumping = 1;
;
	lda     #$01
	sta     _player_jumping
;
; player_falling = 0;
;
	lda     #$00
;
; else
;
	jmp     L21C2
;
; player_jumping = 0;
;
L21CE:	sta     _player_jumping
;
; player_falling = 1;
;
	lda     #$01
L21C2:	sta     _player_falling
;
; BoxGuy1.vel_y += GRAVITY;
;
	lda     #$3C
	clc
	adc     _BoxGuy1+6
	sta     _BoxGuy1+6
	bcc     L1FAF
	inc     _BoxGuy1+6+1
;
; else
;
	jmp     L1FAF
;
; BoxGuy1.vel_y = 0x300; // consistent
;
L1F9E:	ldx     #$03
L21E9:	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; BoxGuy1.y += BoxGuy1.vel_y; // add gravity to y; (make him go up or down)
;
L1FAF:	lda     _BoxGuy1+6
	clc
	adc     _BoxGuy1+2
	sta     _BoxGuy1+2
	lda     _BoxGuy1+6+1
	adc     _BoxGuy1+2+1
	sta     _BoxGuy1+2+1
;
; Generic.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if (BoxGuy1.vel_y > 0) // he's falling
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L1FBC
	eor     #$80
L1FBC:	bpl     L1FBA
;
; if (bg_coll_D()) // if he's collising below
;
	jsr     _bg_coll_D
	tax
	beq     L21CF
;
; player_in_air = 0;
;
	lda     #$00
	sta     _player_in_air
;
; player_falling = 0;
;
	sta     _player_falling
;
; player_on_ladder = 0;
;
	sta     _player_on_ladder
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_D;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_D
	sta     _BoxGuy1+3
;
; BoxGuy1.y &= 0xff00;
;
	ldx     _BoxGuy1+2+1
	lda     #$00
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; if (BoxGuy1.vel_y > 0)
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L1FCD
	eor     #$80
L1FCD:	bpl     L21CF
;
; else if (BoxGuy1.vel_y < 0)
;
	jmp     L21EA
L1FBA:	ldx     _BoxGuy1+6+1
	cpx     #$80
	bcc     L21CF
;
; if (bg_coll_U())
;
	jsr     _bg_coll_U
	tax
	beq     L21CF
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_U;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_U
	sta     _BoxGuy1+3
;
; BoxGuy1.vel_y = 0;
;
L21EA:	lda     #$00
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; Generic.y = high_byte(BoxGuy1.y); // the rest should be the same
;
L21CF:	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if (projectile_cooldown > 0)
;
	lda     _projectile_cooldown
	beq     L21D0
;
; --projectile_cooldown;
;
	dec     _projectile_cooldown
;
; if (pad1_new & PAD_UP)
;
L21D0:	lda     _pad1_new
	and     #$08
	beq     L21D1
;
; if (bg_coll_ladder())
;
	jsr     _bg_coll_ladder
	tax
	beq     L21D1
;
; player_on_ladder = 1;
;
	lda     #$01
	sta     _player_on_ladder
;
; BoxGuy1.vel_y = 0;
;
	lda     #$00
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (pad1_new & PAD_A)
;
L21D1:	lda     _pad1_new
	and     #$80
	beq     L21D2
;
; if (bg_coll_D2())
;
	jsr     _bg_coll_D2
	tax
	beq     L21D2
;
; BoxGuy1.vel_y = JUMP_VEL; // JUMP
;
	ldx     #$FA
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; short_jump_count = 1;
;
	lda     #$01
	sta     _short_jump_count
;
; player_in_air = 1;
;
	sta     _player_in_air
;
; player_jumping = 1;
;
	sta     _player_jumping
;
; if (pad1_new & PAD_B && projectile_cooldown == 0) // shooting
;
L21D2:	lda     _pad1_new
	ldx     #$00
	and     #$40
	jeq     L2009
	lda     _projectile_cooldown
	jne     L2009
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	sta     _temp1
L21D6:	lda     _temp1
	cmp     #$03
	bcs     L1FFC
;
; if (projectiles_list[temp1] == OFF)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	bne     L21D7
;
; temp2 = 1;
;
	lda     #$01
	sta     _temp2
;
; break;
;
	jmp     L1FFC
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
L21D7:	inc     _temp1
	jmp     L21D6
;
; if (temp2)
;
L1FFC:	lda     _temp2
	beq     L2009
;
; projectile_cooldown = PROJECTILE_COOLDOWN_FRAMES;
;
	lda     #$0A
	sta     _projectile_cooldown
;
; player_shooting = 1;
;
	lda     #$01
	sta     _player_shooting
;
; projectile_index = temp1;
;
	lda     _temp1
	sta     _projectile_index
;
; if (direction == RIGHT)
;
	lda     _direction
	cmp     #$01
	bne     L2011
;
; projectiles_list[projectile_index] = RIGHT;
;
	ldy     _projectile_index
;
; else
;
	jmp     L21C4
;
; projectiles_list[projectile_index] = LEFT;
;
L2011:	ldy     _projectile_index
	lda     #$00
L21C4:	sta     _projectiles_list,y
;
; projectiles_x[projectile_index] = high_byte(BoxGuy1.x) + 10;
;
	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _projectile_index
	bcc     L201E
	inx
L201E:	sta     ptr1
	stx     ptr1+1
	lda     _BoxGuy1+1
	clc
	adc     #$0A
	ldy     #$00
	sta     (ptr1),y
;
; projectiles_y[projectile_index] = high_byte(BoxGuy1.y) - 8;
;
	lda     #<(_projectiles_y)
	ldx     #>(_projectiles_y)
	clc
	adc     _projectile_index
	bcc     L2024
	inx
L2024:	sta     ptr1
	stx     ptr1+1
	lda     _BoxGuy1+3
	sec
	sbc     #$08
	ldx     #$00
	sta     (ptr1),y
;
; if (short_jump_count)
;
L2009:	lda     _short_jump_count
	beq     L202C
;
; ++short_jump_count;
;
	inc     _short_jump_count
;
; if (short_jump_count > 30)
;
	lda     _short_jump_count
	cmp     #$1F
	bcc     L202C
;
; short_jump_count = 0;
;
	lda     #$00
	sta     _short_jump_count
;
; if ((short_jump_count) && ((pad1 & PAD_A) == 0) && (BoxGuy1.vel_y < -0x200))
;
L202C:	lda     _short_jump_count
	beq     L21DB
	lda     _pad1
	and     #$80
	bne     L21DB
	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$FE
	bvc     L2038
	eor     #$80
L2038:	bpl     L21E7
;
; BoxGuy1.vel_y = -0x200;
;
	ldx     #$FE
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; short_jump_count = 0;
;
	sta     _short_jump_count
;
; temp5 = low_byte(scroll_x) + high_byte(BoxGuy1.x);
;
L21E7:	ldx     #$00
L21DB:	lda     _scroll_x
	clc
	adc     _BoxGuy1+1
	bcc     L21BB
	ldx     #$01
L21BB:	sta     _temp5
	stx     _temp5+1
;
; if (temp5 > 0x98 && temp5 < 0xa4) // middle of the screen
;
	cmp     #$99
	txa
	sbc     #$00
	bcc     L2042
	lda     _temp5+1
	cmp     #$00
	bne     L2045
	lda     _temp5
	cmp     #$A4
L2045:	bcs     L2042
;
; map_loaded = 0;
;
	lda     #$00
	sta     _map_loaded
;
; temp5 = BoxGuy1.x; // store his x before we check the scrolling
;
L2042:	lda     _BoxGuy1+1
	sta     _temp5+1
	lda     _BoxGuy1
	sta     _temp5
;
; if (BoxGuy1.x < MAX_LEFT)
;
	ldx     _BoxGuy1+1
	cpx     #$40
	jcs     L2073
;
; if (!map_loaded)
;
	lda     _map_loaded
	bne     L204D
;
; if (room >= 1)
;
	lda     _room
	beq     L204F
;
; room = ((scroll_x >> 8) - 1); // high byte = room, one to the left
;
	lda     _scroll_x+1
	sec
	sbc     #$01
	sta     _room
;
; new_cmap();
;
L204F:	jsr     _new_cmap
;
; map_loaded = 1; // only do once
;
	lda     #$01
	sta     _map_loaded
;
; if (room == 0)
;
L204D:	lda     _room
	bne     L21E0
;
; if (scroll_x > 0)
;
	lda     _scroll_x
	ora     _scroll_x+1
	beq     L205B
;
; temp1 = (MAX_LEFT - BoxGuy1.x) >> 8;
;
	lda     #$00
	sec
	sbc     _BoxGuy1
	lda     #$40
	sbc     _BoxGuy1+1
	sta     _temp1
;
; if (temp1 > 3)
;
	cmp     #$04
	bcc     L2061
;
; temp1 = 3; // max scroll change
;
	lda     #$03
	sta     _temp1
;
; if (scroll_x < 3)
;
L2061:	lda     _scroll_x+1
	cmp     #$00
	bne     L2067
	lda     _scroll_x
	cmp     #$03
L2067:	bcs     L21DF
;
; temp1 = scroll_x;
;
	lda     _scroll_x
	sta     _temp1
;
; scroll_x -= temp1;                  // scroll the window
;
L21DF:	lda     _temp1
	eor     #$FF
	sec
	adc     _scroll_x
	sta     _scroll_x
	lda     #$FF
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) + temp1; // add the offset to the guy
;
	lda     _BoxGuy1+1
	clc
	adc     _temp1
	sta     _BoxGuy1+1
;
; else
;
	jmp     L21E0
;
; BoxGuy1.x = temp5;
;
L205B:	lda     _temp5+1
	sta     _BoxGuy1+1
	lda     _temp5
	sta     _BoxGuy1
;
; if (room >= 1)
;
L21E0:	lda     _room
	beq     L2073
;
; temp1 = (MAX_LEFT - BoxGuy1.x) >> 8;
;
	lda     #$00
	sec
	sbc     _BoxGuy1
	lda     #$40
	sbc     _BoxGuy1+1
	sta     _temp1
;
; if (temp1 > 3)
;
	cmp     #$04
	bcc     L21E1
;
; temp1 = 3;                     // max scroll change
;
	lda     #$03
	sta     _temp1
;
; scroll_x -= temp1;                  // scroll the window
;
L21E1:	lda     _temp1
	eor     #$FF
	sec
	adc     _scroll_x
	sta     _scroll_x
	lda     #$FF
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) + temp1; // add the offset to the guy
;
	lda     _BoxGuy1+1
	clc
	adc     _temp1
	sta     _BoxGuy1+1
;
; if (BoxGuy1.x > MAX_RIGHT)
;
L2073:	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$90
	bcc     L208E
;
; if (!map_loaded)
;
	lda     _map_loaded
	bne     L21E2
;
; room = ((scroll_x >> 8) + 1); // high byte = room, one to the right
;
	lda     _scroll_x+1
	clc
	adc     #$01
	sta     _room
;
; new_cmap();
;
	jsr     _new_cmap
;
; map_loaded = 1; // only do once
;
	lda     #$01
	sta     _map_loaded
;
; if (room <= MAX_ROOMS)
;
L21E2:	lda     _room
	cmp     #$0B
	bcs     L208E
;
; temp1 = (BoxGuy1.x - MAX_RIGHT) >> 8;
;
	lda     _BoxGuy1+1
	sec
	sbc     #$90
	sta     _temp1
;
; if (temp1 > 3)
;
	cmp     #$04
	bcc     L21E3
;
; temp1 = 3;                     // max scroll change
;
	lda     #$03
	sta     _temp1
;
; scroll_x += temp1;                  // scroll the window
;
L21E3:	lda     _temp1
	clc
	adc     _scroll_x
	sta     _scroll_x
	lda     #$00
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - temp1; // sub the offet from the guy
;
	lda     _BoxGuy1+1
	sec
	sbc     _temp1
	sta     _BoxGuy1+1
;
; if (scroll_x >= MAX_SCROLL)
;
L208E:	lda     _scroll_x
	cmp     #$FF
	lda     _scroll_x+1
	sbc     #$09
	bcc     L20A8
;
; scroll_x = MAX_SCROLL; // stop scrolling right, end of level
;
	ldx     #$09
	lda     #$FF
	sta     _scroll_x
	stx     _scroll_x+1
;
; BoxGuy1.x = temp5;   // but allow the x position to go all the way right
;
	lda     _temp5+1
	sta     _BoxGuy1+1
	lda     _temp5
	sta     _BoxGuy1
;
; if (high_byte(BoxGuy1.x) >= 0xe0)
;
	lda     _BoxGuy1+1
	cmp     #$E0
	bcc     L20A8
;
; BoxGuy1.x = 0xe000;
;
	ldx     #$E0
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; }
;
L20A8:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if (temp_y >= 0xf0)
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L21EC
;
; return 0;
;
	txa
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0);
;
L21EC:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; map = temp_room & 1; // high byte
;
	lda     _temp_room
	and     #$01
	sta     _map
;
; if (!map)
;
	lda     _map
	bne     L1C80
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
;
; else
;
	jmp     L21EB
;
; collision = c_map2[coordinates];
;
L1C80:	ldy     _coordinates
	lda     _c_map2,y
L21EB:	sta     _collision
;
; return metatile_colision_map[collision];
;
	ldy     _collision
	lda     _metatile_colision_map,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x + 0x120;
;
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$20
	bcc     L2129
	inx
L2129:	inx
	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; set_data_pointer(level1_list[temp1]);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L21F0
	inx
	clc
L21F0:	adc     #<(_level1_list)
	sta     ptr1
	txa
	adc     #>(_level1_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch (scroll_count)
;
	lda     _scroll_count
;
; }
;
	beq     L2137
	cmp     #$01
	beq     L2150
	cmp     #$02
	jeq     L216A
	jmp     L2183
;
; address = get_ppu_addr(nt, x, 0);
;
L2137:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L21F5
;
; address = get_ppu_addr(nt, x, 0x40);
;
L2150:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L21F5
;
; address = get_ppu_addr(nt, x, 0x80);
;
L216A:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L21F5
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L2183:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L21F5:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_L: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x - 0x20; // Modify the scroll offset for left scroll
;
	lda     _scroll_x
	ldx     _scroll_x+1
	sec
	sbc     #$20
	bcs     L20B0
	dex
L20B0:	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; set_data_pointer(level1_list[temp1]);
;
	ldx     #$00
	lda     _temp1
	asl     a
	bcc     L21F8
	inx
	clc
L21F8:	adc     #<(_level1_list)
	sta     ptr1
	txa
	adc     #>(_level1_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch (scroll_count)
;
	lda     _scroll_count
;
; }
;
	beq     L20BE
	cmp     #$01
	beq     L20D7
	cmp     #$02
	jeq     L20F1
	jmp     L210A
;
; address = get_ppu_addr(nt, x, 0);
;
L20BE:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L21FD
;
; address = get_ppu_addr(nt, x, 0x40);
;
L20D7:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L21FD
;
; address = get_ppu_addr(nt, x, 0x80);
;
L20F1:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L21FD
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L210A:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L21FD:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; --scroll_count;   // Reverse the increment to scroll in the opposite direction
;
	dec     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; map = room & 1; // even or odd?
;
	lda     _room
	and     #$01
	sta     _map
;
; if (!map)
;
	lda     _map
	bne     L21A2
;
; memcpy(c_map, level1_list[room], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _room
	asl     a
	bcc     L2200
	inx
	clc
L2200:	adc     #<(_level1_list)
	sta     ptr1
	txa
	adc     #>(_level1_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; temp_cmap1 = room;
;
	lda     _room
	sta     _temp_cmap1
;
; else
;
	rts
;
; memcpy(c_map2, level1_list[room], 240);
;
L21A2:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	jsr     pushax
	ldx     #$00
	lda     _room
	asl     a
	bcc     L2201
	inx
	clc
L2201:	adc     #<(_level1_list)
	sta     ptr1
	txa
	adc     #>(_level1_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; temp_cmap2 = room;
;
	lda     _room
	sta     _temp_cmap2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handle_scrolling (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_scrolling: near

.segment	"CODE"

;
; if (!r_scroll_frames && !l_scroll_frames)
;
	lda     _r_scroll_frames
	bne     L1E53
	lda     _l_scroll_frames
	bne     L1E53
;
; if (direction == RIGHT)
;
	lda     _direction
	cmp     #$01
	bne     L2202
;
; r_scroll_frames = 4;
;
	lda     #$04
	sta     _r_scroll_frames
;
; else
;
	jmp     L1E53
;
; l_scroll_frames = 4;
;
L2202:	lda     #$04
	sta     _l_scroll_frames
;
; if (r_scroll_frames)
;
L1E53:	lda     _r_scroll_frames
	beq     L1E56
;
; draw_screen_R();
;
	jsr     _draw_screen_R
;
; --r_scroll_frames;
;
	dec     _r_scroll_frames
;
; else if (l_scroll_frames)
;
	rts
L1E56:	lda     _l_scroll_frames
	beq     L1E5B
;
; draw_screen_L();
;
	jsr     _draw_screen_L
;
; --l_scroll_frames;
;
	dec     _l_scroll_frames
;
; }
;
L1E5B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ projectile_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_projectile_movement: near

.segment	"CODE"

;
; for (temp1 = 0; temp1 < 3; ++temp1)
;
	lda     #$00
	sta     _temp1
L2205:	lda     _temp1
	cmp     #$03
	bcc     L2214
;
; }
;
	rts
;
; if (projectiles_list[temp1] != OFF)
;
L2214:	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	jeq     L2213
;
; if (projectiles_x[temp1] > 250)
;
	ldy     _temp1
	lda     _projectiles_x,y
	cmp     #$FB
	bcc     L2206
;
; projectiles_list[temp1] = OFF;
;
	ldy     _temp1
	lda     #$FF
	sta     _projectiles_list,y
;
; else
;
	jmp     L2213
;
; temp2 = 2; // projectile speed
;
L2206:	lda     #$02
	sta     _temp2
;
; if (projectiles_list[temp1] == RIGHT)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$01
	jne     L1E0C
;
; if (BoxGuy1.x > (MAX_RIGHT - 4) && pad1_new & PAD_RIGHT)
;
	lda     _BoxGuy1
	cmp     #$FD
	lda     _BoxGuy1+1
	sbc     #$8F
	bcc     L1E10
	lda     _pad1_new
	and     #$01
	beq     L1E10
;
; temp3 = (BoxGuy1.x - MAX_RIGHT - 4) >> 8;
;
	lda     _BoxGuy1
	pha
	lda     _BoxGuy1+1
	sec
	sbc     #$90
	tax
	pla
	sec
	sbc     #$04
	bcs     L1E18
	dex
L1E18:	txa
	sta     _temp3
;
; if (temp3 > 3)
;
	cmp     #$04
	bcc     L220A
;
; temp3 = 3; // max scroll change
;
	lda     #$03
	sta     _temp3
;
; temp2 += temp3;
;
L220A:	lda     _temp3
	clc
	adc     _temp2
	sta     _temp2
;
; if (BoxGuy1.x < (MAX_LEFT + 4) && pad1_new & PAD_LEFT)
;
L1E10:	lda     _BoxGuy1+1
	cmp     #$40
	bne     L1E22
	lda     _BoxGuy1
	cmp     #$04
L1E22:	bcs     L1E1F
	lda     _pad1_new
	and     #$02
	beq     L1E1F
;
; temp3 = (MAX_LEFT + 4 - BoxGuy1.x) >> 8;
;
	lda     #$04
	sec
	sbc     _BoxGuy1
	lda     #$40
	sbc     _BoxGuy1+1
	sta     _temp3
;
; if (temp3 > 3)
;
	cmp     #$04
	bcc     L220D
;
; temp3 = 3;
;
	lda     #$03
	sta     _temp3
;
; temp2 += temp3;
;
L220D:	lda     _temp3
	clc
	adc     _temp2
	sta     _temp2
;
; projectiles_x[temp1] += temp2;
;
L1E1F:	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L1E30
	inx
L1E30:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     _temp2
;
; else if (projectiles_list[temp1] == LEFT)
;
	jmp     L2204
L1E0C:	ldy     _temp1
	lda     _projectiles_list,y
	bne     L2213
;
; if (BoxGuy1.x > (MAX_RIGHT - 4) && pad1_new & PAD_RIGHT)
;
	lda     _BoxGuy1
	cmp     #$FD
	lda     _BoxGuy1+1
	sbc     #$8F
	bcc     L1E37
	lda     _pad1_new
	and     #$01
	beq     L1E37
;
; temp2 += 3;
;
	lda     #$03
	clc
	adc     _temp2
	sta     _temp2
;
; if (BoxGuy1.x < (MAX_LEFT + 4) && pad1_new & PAD_LEFT)
;
L1E37:	lda     _BoxGuy1+1
	cmp     #$40
	bne     L1E41
	lda     _BoxGuy1
	cmp     #$04
L1E41:	bcs     L1E3E
	lda     _pad1_new
	and     #$02
	beq     L1E3E
;
; temp2 -= 1;
;
	dec     _temp2
;
; projectiles_x[temp1] -= temp2;
;
L1E3E:	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L1E48
	inx
L1E48:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     _temp2
L2204:	jsr     staspidx
;
; for (temp1 = 0; temp1 < 3; ++temp1)
;
L2213:	inc     _temp1
	jmp     L2205

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; eject_L = temp_x | 0xf0;
;
	lda     _temp_x
	ora     #$F0
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L2216
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L2216:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L2218
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L2218:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + Generic.width;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L2219
	inx
L2219:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; eject_R = (temp_x + 1) & 0x0f;
;
	lda     _temp_x
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L221B
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L221B:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L221D
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L221D:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L1C1B
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1C1B:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L221F
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L221F:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L221E
	inx
L221E:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L1C2B
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1C2B:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L2221
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L2221:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L1C39
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1C39:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; if ((temp_y & 0x0f) > 3)
;
	and     #$0F
	cmp     #$04
	lda     #$00
	bcc     L2225
;
; return 0; // bug fix
;
	tax
	rts
;
; eject_D = (temp_y + 1) & 0x0f;
;
L2225:	lda     _temp_y
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L2226
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L2226:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L2223
	inx
L2223:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L1C4F
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1C4F:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L2227
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L2227:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D2: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L1C5D
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1C5D:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y += 2;
;
	lda     #$02
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L222A
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L222A:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	txa
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L2229
	inx
L2229:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L1C6D
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L1C6D:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L222C
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L222C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_fast (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_fast: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; if (Generic.y >= 0xf0)
;
	lda     _Generic+1
	cmp     #$F0
;
; return;
;
	bcs     L1BD6
;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
	pla
	sta     _temp5
;
; temp_x = temp5 & 0xff;  // low byte x
;
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + 6; // y middle
;
	lda     _Generic+1
	clc
	adc     #$06
	sta     _temp_y
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L222D
;
; ++collision_L;
;
	inc     _collision_L
;
; temp5 += Generic.width;
;
L222D:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff;  // low byte x
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp_room
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L1BD6
;
; ++collision_R;
;
	inc     _collision_R
;
; }
;
L1BD6:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_ladder (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_ladder: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + Generic.width;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L222E
	inx
L222E:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_LADDER)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$01
	beq     L2231
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L2231:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_sprites: near

.segment	"CODE"

;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L2236
;
; temp_x = 1;
;
	lda     #$01
	sta     _temp_x
;
; if (temp_y == 0)
;
L2236:	lda     _temp_y
	bne     L2237
;
; temp_y = 1;
;
	lda     #$01
	sta     _temp_y
;
; ++sprite_frame_counter;
;
L2237:	inc     _sprite_frame_counter
;
; if (player_shooting)
;
	lda     _player_shooting
	jeq     L1C9C
;
; ++player_shooting;
;
	inc     _player_shooting
;
; if (player_shooting > 15)
;
	lda     _player_shooting
	cmp     #$10
	bcc     L2238
;
; player_shooting = 0;
;
	lda     #$00
	sta     _player_shooting
;
; if (direction == LEFT)
;
L2238:	lda     _direction
	jne     L1CA3
;
; if (player_in_air)
;
	lda     _player_in_air
	beq     L1CA5
;
; oam_meta_spr(temp_x, temp_y, animate_playerjumpleftshoot_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerjumpleftshoot_data)
	ldx     #>(_animate_playerjumpleftshoot_data)
;
; else
;
	jmp     _oam_meta_spr
;
; if (BoxGuy1.vel_x)
;
L1CA5:	lda     _BoxGuy1+4
	ora     _BoxGuy1+4+1
	beq     L1CAC
;
; if (sprite_frame_counter < 8)
;
	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L2239
;
; oam_meta_spr(temp_x, temp_y, animate_playerrunshoot1left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrunshoot1left_data)
	ldx     #>(_animate_playerrunshoot1left_data)
;
; else if (sprite_frame_counter < 15)
;
	jmp     _oam_meta_spr
L2239:	lda     _sprite_frame_counter
	cmp     #$0F
	bcs     L223A
;
; oam_meta_spr(temp_x, temp_y, animate_playerrunshoot2left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrunshoot2left_data)
	ldx     #>(_animate_playerrunshoot2left_data)
;
; else
;
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L223A:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, animate_playerrunshoot2left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrunshoot2left_data)
	ldx     #>(_animate_playerrunshoot2left_data)
;
; else
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(temp_x, temp_y, animate_playerstandshootleft_data);
;
L1CAC:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerstandshootleft_data)
	ldx     #>(_animate_playerstandshootleft_data)
	jmp     _oam_meta_spr
;
; if (player_in_air)
;
L1CA3:	lda     _player_in_air
	beq     L1CC8
;
; oam_meta_spr(temp_x, temp_y, animate_playerjumprightshoot_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerjumprightshoot_data)
	ldx     #>(_animate_playerjumprightshoot_data)
	jmp     _oam_meta_spr
;
; if (BoxGuy1.vel_x)
;
L1CC8:	lda     _BoxGuy1+4
	ora     _BoxGuy1+4+1
	beq     L1CCF
;
; if (sprite_frame_counter < 8)
;
	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L223B
;
; oam_meta_spr(temp_x, temp_y, animate_playerrunshoot1right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrunshoot1right_data)
	ldx     #>(_animate_playerrunshoot1right_data)
;
; else if (sprite_frame_counter < 15)
;
	jmp     _oam_meta_spr
L223B:	lda     _sprite_frame_counter
	cmp     #$0F
	bcs     L223C
;
; oam_meta_spr(temp_x, temp_y, animate_playerrunshoot2right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrunshoot2right_data)
	ldx     #>(_animate_playerrunshoot2right_data)
;
; else
;
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L223C:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, animate_playerrunshoot2right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrunshoot2right_data)
	ldx     #>(_animate_playerrunshoot2right_data)
	jmp     _oam_meta_spr
;
; oam_meta_spr(temp_x, temp_y, animate_playerstandshootright_data);
;
L1CCF:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerstandshootright_data)
	ldx     #>(_animate_playerstandshootright_data)
	jmp     _oam_meta_spr
;
; if (player_in_air) // aka, falling
;
L1C9C:	lda     _player_in_air
	jeq     L1CEB
;
; if (player_jumping)
;
	lda     _player_jumping
	beq     L1CED
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L1CEF
;
; oam_meta_spr(temp_x, temp_y, animate_playerjumpleft_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerjumpleft_data)
	ldx     #>(_animate_playerjumpleft_data)
;
; else
;
	jmp     _oam_meta_spr
;
; oam_meta_spr(temp_x, temp_y, animate_playerjumpright_data);
;
L1CEF:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerjumpright_data)
	ldx     #>(_animate_playerjumpright_data)
	jmp     _oam_meta_spr
;
; if (direction == LEFT)
;
L1CED:	lda     _direction
	bne     L223F
;
; if (sprite_frame_counter < 8)
;
	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L223D
;
; oam_meta_spr(temp_x, temp_y, animate_playerfallwiggle1left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerfallwiggle1left_data)
	ldx     #>(_animate_playerfallwiggle1left_data)
;
; else if (sprite_frame_counter < 15)
;
	jmp     _oam_meta_spr
L223D:	lda     _sprite_frame_counter
	cmp     #$0F
	bcs     L223E
;
; oam_meta_spr(temp_x, temp_y, animate_playerfallwiggle2leftshoot_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerfallwiggle2leftshoot_data)
	ldx     #>(_animate_playerfallwiggle2leftshoot_data)
;
; else
;
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L223E:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, animate_playerfallwiggle2leftshoot_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerfallwiggle2leftshoot_data)
	ldx     #>(_animate_playerfallwiggle2leftshoot_data)
	jmp     _oam_meta_spr
;
; if (sprite_frame_counter < 8)
;
L223F:	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L2240
;
; oam_meta_spr(temp_x, temp_y, animate_playerfallwiggle1right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerfallwiggle1right_data)
	ldx     #>(_animate_playerfallwiggle1right_data)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 15)
;
L2240:	lda     _sprite_frame_counter
	cmp     #$0F
	bcs     L2241
;
; oam_meta_spr(temp_x, temp_y, animate_playerfallwiggle2right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerfallwiggle2right_data)
	ldx     #>(_animate_playerfallwiggle2right_data)
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L2241:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, animate_playerfallwiggle2right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerfallwiggle2right_data)
	ldx     #>(_animate_playerfallwiggle2right_data)
	jmp     _oam_meta_spr
;
; else if (player_on_ladder)
;
L1CEB:	lda     _player_on_ladder
	beq     L1D27
;
; oam_meta_spr(temp_x, temp_y, animate_playerclimb1_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerclimb1_data)
	ldx     #>(_animate_playerclimb1_data)
	jmp     _oam_meta_spr
;
; else if (direction == LEFT) // not jumping
;
L1D27:	lda     _direction
	jne     L1D2E
;
; if (BoxGuy1.vel_x)
;
	lda     _BoxGuy1+4
	ora     _BoxGuy1+4+1
	jeq     L224C
;
; if (sprite_frame_counter < 4)
;
	lda     _sprite_frame_counter
	cmp     #$04
	bcs     L2242
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun1left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun1left_data)
	ldx     #>(_animate_playerrun1left_data)
;
; else if (sprite_frame_counter < 8)
;
	jmp     _oam_meta_spr
L2242:	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L2243
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun2left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun2left_data)
	ldx     #>(_animate_playerrun2left_data)
;
; else if (sprite_frame_counter < 12)
;
	jmp     _oam_meta_spr
L2243:	lda     _sprite_frame_counter
	cmp     #$0C
	bcs     L2244
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun3left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun3left_data)
	ldx     #>(_animate_playerrun3left_data)
;
; else if (sprite_frame_counter < 16)
;
	jmp     _oam_meta_spr
L2244:	lda     _sprite_frame_counter
	cmp     #$10
	bcs     L2245
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun4left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun4left_data)
	ldx     #>(_animate_playerrun4left_data)
;
; else if (sprite_frame_counter < 20)
;
	jmp     _oam_meta_spr
L2245:	lda     _sprite_frame_counter
	cmp     #$14
	bcs     L2246
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun5left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun5left_data)
	ldx     #>(_animate_playerrun5left_data)
;
; else if (sprite_frame_counter < 24)
;
	jmp     _oam_meta_spr
L2246:	lda     _sprite_frame_counter
	cmp     #$18
	bcs     L2247
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun4left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun4left_data)
	ldx     #>(_animate_playerrun4left_data)
;
; else if (sprite_frame_counter < 28)
;
	jmp     _oam_meta_spr
L2247:	lda     _sprite_frame_counter
	cmp     #$1C
	bcs     L2248
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun3left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun3left_data)
	ldx     #>(_animate_playerrun3left_data)
;
; else if (sprite_frame_counter < 32)
;
	jmp     _oam_meta_spr
L2248:	lda     _sprite_frame_counter
	cmp     #$20
	bcs     L2249
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun2left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun2left_data)
	ldx     #>(_animate_playerrun2left_data)
;
; else if (sprite_frame_counter < 35)
;
	jmp     _oam_meta_spr
L2249:	lda     _sprite_frame_counter
	cmp     #$23
	bcs     L224A
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun1left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun1left_data)
	ldx     #>(_animate_playerrun1left_data)
;
; else
;
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L224A:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun1left_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun1left_data)
	ldx     #>(_animate_playerrun1left_data)
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L224C:	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, animate_playerstandleft_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerstandleft_data)
	ldx     #>(_animate_playerstandleft_data)
	jmp     _oam_meta_spr
;
; if (BoxGuy1.vel_x)
;
L1D2E:	lda     _BoxGuy1+4
	ora     _BoxGuy1+4+1
	jeq     L2256
;
; if (sprite_frame_counter < 4)
;
	lda     _sprite_frame_counter
	cmp     #$04
	bcs     L224D
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun1right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun1right_data)
	ldx     #>(_animate_playerrun1right_data)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 8)
;
L224D:	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L224E
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun2right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun2right_data)
	ldx     #>(_animate_playerrun2right_data)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 12)
;
L224E:	lda     _sprite_frame_counter
	cmp     #$0C
	bcs     L224F
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun3right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun3right_data)
	ldx     #>(_animate_playerrun3right_data)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 16)
;
L224F:	lda     _sprite_frame_counter
	cmp     #$10
	bcs     L2250
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun4right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun4right_data)
	ldx     #>(_animate_playerrun4right_data)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 20)
;
L2250:	lda     _sprite_frame_counter
	cmp     #$14
	bcs     L2251
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun5right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun5right_data)
	ldx     #>(_animate_playerrun5right_data)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 24)
;
L2251:	lda     _sprite_frame_counter
	cmp     #$18
	bcs     L2252
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun4right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun4right_data)
	ldx     #>(_animate_playerrun4right_data)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 28)
;
L2252:	lda     _sprite_frame_counter
	cmp     #$1C
	bcs     L2253
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun3right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun3right_data)
	ldx     #>(_animate_playerrun3right_data)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 32)
;
L2253:	lda     _sprite_frame_counter
	cmp     #$20
	bcs     L2254
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun2right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun2right_data)
	ldx     #>(_animate_playerrun2right_data)
	jmp     _oam_meta_spr
;
; else if (sprite_frame_counter < 35)
;
L2254:	lda     _sprite_frame_counter
	cmp     #$23
	bcs     L2255
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun1right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun1right_data)
	ldx     #>(_animate_playerrun1right_data)
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L2255:	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, animate_playerrun1right_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerrun1right_data)
	ldx     #>(_animate_playerrun1right_data)
	jmp     _oam_meta_spr
;
; sprite_frame_counter = 0;
;
L2256:	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, animate_playerstandright_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerstandright_data)
	ldx     #>(_animate_playerstandright_data)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; ppu_mask(0); // grayscale mode
;
	lda     #$00
	jsr     _ppu_mask
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; load_room();
;
	jsr     _load_room
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; room = 0;
;
	lda     #$00
	sta     _room
;
; ++frame_counter;
;
L1DE0:	inc     _frame_counter
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; movement();
;
	jsr     _movement
;
; projectile_movement();
;
	jsr     _projectile_movement
;
; set_scroll_x(scroll_x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; handle_scrolling();
;
	jsr     _handle_scrolling
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (1)
;
	jmp     L1DE0

.endproc

